
ETPU "C" COMPILER 1.0.7.85                                              PAGE  1


                                        /*******************************************************************************
                                         * 版权 2015-2016 中国航空工业集团第六三一所第十八研究室
                                         *
                                         * 对本文件的拷贝、发布、修改或者其他任何用途必须得到中国航空工业集团第六三一所
                                         * 的书面协议许可。
                                         *
                                         * Copyrights (2015-2016) ACTRI
                                         * All Right Reserved
                                         *******************************************************************************

                                         *******************************************************************************
                                         * Revision History
                                         *------------------------------------------------------------------------------
                                         * 2017-12-07, gbo, created
                                         *******************************************************************************

                                         *******************************************************************************
                                         * content
                                         *------------------------------------------------------------------------------
                                         *  File            : etpuc_set.c
                                         *  Description     : ETPU函数集
                                         *  Call            : 029-89186510
                                         ******************************************************************************/

                                        /* Use a 6k memory starting at 0 */
0400 2800                               #pragma memory ROM[(10 * (1024))] @ 0x0400;

                                        /* Put entry table at the beginning of memory so that it is not
                                           dependent on memory size. */
                                        #pragma entryaddr 0x0000;

0001                                    int24 Global_Error = 0xFF;
0000                                    unsigned int8 gEngPosSyncState = 0;
0004                                    unsigned int8 gCamState = 0;
0005                                    unsigned int24 gCamEdgeAngle = 0;
0009                                    unsigned int24 gCamCount = 0;

                                        union Link_t {
0000                                        int32 Chans;
0000 0003                                   int8  Chan[3];
0000 0003                               };

0007                                    #define GLOBAL_ERROR_FUNC
                                        void Global_Error_Func();

0008                                    #define REGISTER_PASSING

                                        #ifndef REGISTER_PASSING
                                        void Link4( union Link_t Link  );
                                        #else
                                        void Link4( );
                                        #endif

0000                                    register_p7_0 p7_0;
0000                                    register_p15_8 p15_8;

ETPU "C" COMPILER 1.0.7.85                                              PAGE  2


0000                                    register_p23_16 p23_16;
0000                                    register_p31_24 p31_24;

                                        /*************************/
                                        /* Include the functions */
                                        /*************************/
                                        /* PWM (Pulse Width Modulation) function */
00000000                                #define PWM_FUNCTION_NUMBER 0
                                        #include "etpuc_pwm.c"
                                        /*******************************************************************************
                                         * 版权 2015-2016 中国航空工业集团第六三一所第十八研究室
                                         *
                                         * 对本文件的拷贝、发布、修改或者其他任何用途必须得到中国航空工业集团第六三一所
                                         * 的书面协议许可。
                                         *
                                         * Copyrights (2015-2016) ACTRI
                                         * All Right Reserved
                                         *******************************************************************************

                                         *******************************************************************************
                                         * Revision History
                                         *------------------------------------------------------------------------------
                                         * 2017-12-07, gbo, created
                                         *******************************************************************************

                                         *******************************************************************************
                                         * content
                                         *------------------------------------------------------------------------------
                                         *  File            : etpuc_pwm.c
                                         *  Description     : ETPU的PWM输出
                                         *  Call            : 029-89186510
                                         ******************************************************************************/
                                        #include "etpuc_pwm.h"
                                        /*******************************************************************************
                                         * 版权 2015-2016 中国航空工业集团第六三一所第十八研究室
                                         *
                                         * 对本文件的拷贝、发布、修改或者其他任何用途必须得到中国航空工业集团第六三一所
                                         * 的书面协议许可。
                                         *
                                         * Copyrights (2015-2016) ACTRI
                                         * All Right Reserved
                                         *******************************************************************************

                                         *******************************************************************************
                                         * Revision History
                                         *------------------------------------------------------------------------------
                                         * 2017-12-07, gbo, created
                                         *******************************************************************************

                                         *******************************************************************************
                                         * content
                                         *------------------------------------------------------------------------------
                                         *  File            : etpuc_pwm.h
                                         *  Description     : ETPU的PWM输出头文件
                                         *  Call            : 029-89186510

ETPU "C" COMPILER 1.0.7.85                                              PAGE  3


                                         ******************************************************************************/
                                        #ifndef _ETPUC_PWM_H
0009                                    #define _ETPUC_PWM_H

                                        #include <etpuc.h>
                                        #ifndef __ETPUC_H
000A                                    #define __ETPUC_H

                                        /*
                                         *  eTPU C Code Development System
                                         *
                                         *  Processor register definitions
                                         *  for the eTPU C Code Development System.
                                         *
                                         *  This code may be adapted for any purpose
                                         *  when used with the eTPU C Code Development
                                         *  System.  No warranty is implied or given
                                         *  as to their usability for any purpose.
                                         *
                                         *  (c) Copyright 2002-2004 Byte Craft Limited
                                         *  421 King St.N., Waterloo, ON, Canada, N2J 4E4
                                         *  VOICE: 1 (519) 888 6911
                                         *  FAX  : 1 (519) 746 6751
                                         *  email: support@bytecraft.com
                                         *
                                         *  Byte Craft Limited
                                         *  Waterloo, Ontario
                                         *  Canada N2J 4E4
                                         *  (519) 888-6911
                                         *
                                         *  Walter Banks
                                         *
                                         * Revision history
                                         * ----------------
                                         * V0.90  WB    Nov 2003  First pre-release of etpuc.h based on V1.10 etpu.h with
                                         *                        changes to reflect eTPU naming conventions
                                         * V1.00  WB    Nov 2003  First release changes to the channel fields to reflect
                                         *                        naming conventions for eTPU
                                         * V1.01  WB    Dec 2003  Corrected definitions of pin_opacA and pin_opacB
                                         *
                                         *
                                         *
                                         *  All of the eTPU registers can be directly accessed from C
                                         *

                                             register_ac        ac   ;      // 24 bits
                                             register_b         b    ;      // 24 bits
                                             register_c         c    ;      // 24 bits
                                             register_d         d    ;      // 24 bits
                                             register_chan      chan ;      //  5 bits
                                             register_diob      diob ;      // 24 bits
                                             register_erta      erta ;      // 24 bits
                                             register_ertb      ertb ;      // 24 bits
                                             register_link      link ;      //  8 bits
                                             register_mach      mach ;      // 24 bits

ETPU "C" COMPILER 1.0.7.85                                              PAGE  4


                                             register_macl      macl ;      // 24 bits
                                             register_p         p    ;      // 24 bits
                                             register_rar       rar  ;      // 14 bits
                                             register_sr        sr   ;      // 24 bits
                                             register_tcr1      tcr1 ;      // 24 bits
                                             register_tcr2      tcr2 ;      // 24 bits
                                             register_tpr       tpr  ;      // 16 bits
                                             register_trr       trr  ;      // 24 bits
                                             register_chan_base chan_base;  // 24 bits
                                        */

                                        /* The following registers are defined for
                                           eTPU C application code */

0000                                         register_chan       chan ;       //  5 bits
0000                                         register_erta       erta ;       // 24 bits
0000                                         register_ertb       ertb ;       // 24 bits
0000                                         register_tcr1       tcr1 ;       // 24 bits
0000                                         register_tcr2       tcr2 ;       // 24 bits
0000                                         register_tpr        tpr  ;       // 16 bits
0000                                         register_trr        trr  ;       // 24 bits
0000                                         register_chan_base  chan_base;   // 24 bits
0000                                         register_link       link;        // 8 bits

                                        /*
                                           The link request can be set by copying the
                                           channel number into the link register. The
                                           following definition does this.
                                         */

000B                                    #define link_request(channel) link = channel

                                        /*
                                         *
                                         *
                                         *  All of the eTPU channel fields are predefined as a
                                         *  large C structure (chan_struct) by the eTPU C compiler.
                                         *
                                         *  struct chan {
                                         *               CIRC   int : 2 ;
                                         *               ERWA   int : 1 ;
                                         *               ERWB   int : 1 ;
                                         *               FLC    int : 3 ;
                                         *               IPACA  int : 3 ;
                                         *               IPACB  int : 3 ;
                                         *               LSR    int : 1 ;  // w test
                                         *               MRLA   int : 1 ;  // w test
                                         *               MRLB   int : 1 ;  // w test
                                         *               MRLE   int : 1 ;
                                         *               MTD    int : 2 ;
                                         *               OPACA  int : 3 ;
                                         *               OPACB  int : 3 ;
                                         *               PDCM   int : 4 ;
                                         *               PIN    int : 3 ;
                                         *               TBSA   int : 4 ;

ETPU "C" COMPILER 1.0.7.85                                              PAGE  5


                                         *               TBSB   int : 4 ;
                                         *               TDL    int : 1 ;
                                         *               SMPR   int : 2 ;
                                         * State Resolution
                                         *               FLAG0  int : 1 ;  // w only also defined in FLC
                                         *               FLAG1  int : 1 ;
                                         * Channel Flags
                                         *               FM0    int : 1 ;
                                         *               FM1    int : 1 ;
                                         *         //    LSR    int : 1 ;  // also channel fields
                                         *         //    MRLA   int : 1 ;  // also channel fields
                                         *         //    MRLB   int : 1 ;  // also channel fields
                                         *               PSS    int : 1 ;
                                         *               PSTI   int : 1 ;
                                         *               PSTO   int : 1 ;
                                         *               TDLA   int : 1 ;
                                         *               TDLB   int : 1 ;
                                         *              }
                                         ***/

0000                                    chan_struct channel;
0000                                    register_cc        CC;

000C                                    #define erwA       channel.ERWA
000D                                    #define erwB       channel.ERWB

000E                                    #define flc        channel.FLC
000F                                    #define ipacA      channel.IPACA
0010                                    #define ipacB      channel.IPACB
0011                                    #define lsr        channel.LSR

0012                                    #define mrlA       channel.MRLA
0013                                    #define mrlB       channel.MRLB
0014                                    #define mrle       channel.MRLE
0015                                    #define mtd        channel.MTD
0016                                    #define opacA      channel.OPACA
0017                                    #define opacB      channel.OPACB
0018                                    #define pdcm       channel.PDCM
0019                                    #define pin        channel.PIN
001A                                    #define act_unitA  channel.TBSA
001B                                    #define act_unitB  channel.TBSB
001C                                    #define tdl        channel.TDL
001D                                    #define flag0      channel.FLAG0
001E                                    #define flag1      channel.FLAG1
001F                                    #define fm0        channel.FM0
0020                                    #define fm1        channel.FM1
0021                                    #define pss        channel.PSS
0022                                    #define psti       channel.PSTI
0023                                    #define psto       channel.PSTO
0024                                    #define tdlA       channel.TDLA
0025                                    #define tdlB       channel.TDLB


                                        // IPAC 1,2
00000000                                #define no_detect                 0

ETPU "C" COMPILER 1.0.7.85                                              PAGE  6


00000001                                #define low_high                  1
00000002                                #define high_low                  2
00000003                                #define any_trans                 3
00000004                                #define detect_input_0_on_match   4
00000005                                #define detect_input_1_on_match   5
00000007                                #define no_change_ipac            7

                                        // OPAC 1,2  fields

00000000                                #define match_no_change   0
00000001                                #define match_high        1
00000002                                #define match_low         2
00000003                                #define match_toggle      3
00000001                                #define opac_high         1
00000002                                #define opac_low          2
00000003                                #define toggle            3
00000004                                #define opac_high_low     4
00000005                                #define opac_low_high     5
00000004                                #define transition_low    4
00000005                                #define transition_high   5
00000006                                #define transition_toggle 6

                                        // PDCM fields
00000000                                #define em_b_st  0              //Either Match, Blocking, Single Transition
00000001                                #define em_b_dt  1              //Either Match, Blocking, Double Transition
00000002                                #define em_nb_st 2              //Either Match, NonBlocking, Single Transition
00000003                                #define em_nb_dt 3              //Either Match, NonBlocking, Double Transition
00000004                                #define m2_st    4              //Match2, Single, Transition
00000005                                #define m2_dt    5              //Match2, Double, Transition
00000006                                #define bm_st    6              //Both Match, Single Transition
00000007                                #define bm_dt    7              //Both Match, Double Transition
00000008                                #define m2_o_st  8              //Match2, Ordered, Single Transition
00000009                                #define m2_o_dt  9              //Match2, Ordered, Double Transition
0000000E                                #define sm_st_e  0xE                //Single Match, Single Transition, Enhanced
0000000C                                #define sm_st    0xC                //Single Match, Single Transition
0000000D                                #define sm_dt    0xD                //Single Match, Double Transition

                                        // Time Bases Selection for match and capture
00000000                                #define Mtcr1_Ctcr1_ge       0      //Match tcr1, Capture tcr1, greater than
00000001                                #define Mtcr2_Ctcr1_ge       1      //Match tcr2, Capture tcr1, greater than
00000002                                #define Mtcr1_Ctcr2_ge       2      //Match tcr1, Capture tcr2, greater than
00000003                                #define Mtcr2_Ctcr2_ge       3      //Match tcr2, Capture tcr2, greater than
00000004                                #define Mtcr1_Ctcr1_eq       4      //Match tcr1, Capture tcr1, equal
00000005                                #define Mtcr2_Ctcr1_eq       5      //Match tcr2, Capture tcr1, equal
00000006                                #define Mtcr1_Ctcr2_eq       6      //Match tcr1, Capture tcr2, equal
00000007                                #define Mtcr2_Ctcr2_eq       7      //Match tcr2, Capture tcr2, equal

00000008                                #define enable_output_buffer  8     // TBSx[3] = 1, TBSx[2:0] = 000
00000009                                #define disable_output_buffer 9     // TBSx[3] = 1, TBSx[2:0] = 001
0000000F                                #define do_nothing       15     // TBSx[3] = 1, TBSx[2:0] = 111

                                        // Time Bases Selection for transition and capture
00000000                                #define Capture_tcr1        0       //TBSx[2] = 0
00000002                                #define Capture_tcr2        2       //TBSx[2] = 1


ETPU "C" COMPILER 1.0.7.85                                              PAGE  7


                                        // Tooth Program Register structure

                                        struct tpr_struct {
0000 0A 00                                int TICKS   : 10;
0001 01 02                                int TPR10   : 1;
0001 01 03                                int HOLD    : 1;
0001 01 04                                int IPH     : 1;
0001 02 05                                int MISSCNT : 2;
0001 01 07                                int LAST    : 1;
0001                                      } ;

                                        // pin definitions
                                        //   pin = pin_high;
00000000                                #define pin_opacA  0
00000001                                #define pin_opacB  1
00000002                                #define pin_high   2
00000004                                #define pin_low    4

                                        #endif /* __ETPUC_H */

                                        #include <eTPUc_common.h>
                                        #ifndef __ETPUC_COMMON_H
0026                                    #define __ETPUC_COMMON_H

                                        /********************************************************************************

                                         FILE NAME: etpuc_common.h

                                         COPYRIGHT (c) ASH WARE, Byte Craft Limited, Freescale 2002-2004.
                                         All Rights Reserved.

                                         VERSION:  1.0

                                         This file is maintained as part of the support for the eTPU_C
                                         development tools by Byte Craft Limited.

                                         This code may be adapted for any purpose when used with the eTPU_C
                                         Code Development System.  No warranty is implied or given as to their
                                         usability for any purpose.

                                         Portions of this file are governed by the following copyrights and
                                         terms:

                                         (c) Freescale 2002-2004 FREESCALE, INC. All Rights Reserved.
                                         *  You are hereby granted a copyright license to use, modify, and
                                         *  distribute the SOFTWARE so long as this entire notice is
                                         *  retained without alteration in any modified and/or redistributed
                                         *  versions, and that such modified versions are clearly identified
                                         *  as such. No licenses are granted by implication, estoppel or
                                         *  otherwise under any patents or trademarks of Freescale, Inc. This
                                         *  software is provided on an "AS IS" basis and without warranty.
                                         *
                                         *  To the maximum extent permitted by applicable law, FREESCALE
                                         *  DISCLAIMS ALL WARRANTIES WHETHER EXPRESS OR IMPLIED, INCLUDING
                                         *  IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR

ETPU "C" COMPILER 1.0.7.85                                              PAGE  8


                                         *  PURPOSE AND ANY WARRANTY AGAINST INFRINGEMENT WITH REGARD TO THE
                                         *  SOFTWARE (INCLUDING ANY MODIFIED VERSIONS THEREOF) AND ANY
                                         *  ACCOMPANYING WRITTEN MATERIALS.
                                         *
                                         *  To the maximum extent permitted by applicable law, IN NO EVENT
                                         *  SHALL FREESCALE BE LIABLE FOR ANY DAMAGES WHATSOEVER (INCLUDING
                                         *  WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
                                         *  INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR OTHER PECUNIARY
                                         *  LOSS) ARISING OF THE USE OR INABILITY TO USE THE SOFTWARE.
                                         *
                                         *  Freescale assumes no responsibility for the maintenance and support
                                         *  of this software

                                         (c) Copyright 2002-2004 Byte Craft Limited
                                         421 King St.N., Waterloo, ON, Canada, N2J 4E4
                                         VOICE: 1 (519) 888 6911
                                         email: support@bytecraft.com

                                         (c) Copyright 2002-2004 ASH WARE

                                        ================================================================================

                                        DESCRIPTION: This file defines the application-friendly macros,
                                        functions for common tasks like channel set up and register control
                                        field access.

                                        ================================================================================

                                        SOURCES:

                                        etpuc_common.h is based on the following header files commonly used by
                                        the eTPU development community:

                                        AshWareETpu.h - developed by Andy Klumpp from ASH WARE
                                        Mike.h - developed by Mike Pauwels from Freescale
                                        etpu_common.h - developped by Ming Li from Freescale

                                        Jeff Loeliger from Freescale and Walter Banks from Byte Craft
                                        also made significant contibutions.

                                        ================================================================================
                                         UPDATE HISTORY
                                         REV      AUTHOR        DATE                DESCRIPTION OF CHANGE
                                         ---      -------      --------    ---------------------
                                         0.0      Ming Li      10/30/03    Initial creation
                                         0.1      Ming Li      11/12/03    Updated to incorporate comments from eTPU
                                                                           development community.
                                         0.2      Walter Banks 15 Dec 03   Made changes to be reflect definitions in
                                                                           eTPUc.h
                                                                           Corrected IsTransALatched()
                                                                                     IsTransBLatched()
                                                                           Added missing definitions
                                                                                     set_pin_per_opacA
                                                                                     set_pin_per_opacB
                                                                                     force_pin_high

ETPU "C" COMPILER 1.0.7.85                                              PAGE  9


                                                                                     force_pin_low
                                                                           Corrected opac1 to opacA
                                                                                     opac2 to opacB

                                         0.3      Walter Banks  5 Jan 04   Corrected opacB = pin_action; to
                                                                               opacA = pin_action;

                                         0.4     J. Loeliger    21/Jan/04  Cleared up reorganized and added more:
                                                                           -Moved TRUE & FALSE to top and added
                                                                              conditional
                                                                           -Moved entry conditions up and added macros
                                                                              for all conditions
                                                                           -Merged with AshWareETpu.h
                                                                              -Removed commet with of PDCM names.
                                                                           -Grouped latches and flags together.
                                                                             -added new set and clear for latches and
                                                                                flags
                                                                           -Merged output pin value to 1 set rather
                                                                              than 2
                                                                           -Added long channel mode names.
                                                                           -Added SetupMatch_AB for better
                                                                              optimization
                                                                           -Added match only conditions for output
                                                                              functions.
                                                                           -Added new ActionUnintA/B macros
                                                                           -Added new Pin macro
                                                                           -And more.
                                         0.5     J. Loeliger     12/Feb/04 -Changed DetectTrans to OnTrans.
                                         0.6     J. Loeliger     30/Mar/04 -Added SetupMatchB and fixed some old
                                                                             references to 1 & 2 -> A & B
                                         0.7     J. Loeliger     16/Apr/04 -Changed Disable match (MRLE) to =0
                                         0.8     J. Loeliger     27/Apr/04 -Fixed Disable/Enable match in thread,
                                                                              they were swapped.
                                         0.9     J. Loeliger     10/May/04 -Added support for OBE with new
                                                 M. Brejl                   EnableOutputBuffer()/DisableOutputBuffer()
                                                                            Removed all // comments. Changed Motorola
                                                                            to Freescale.
                                                                            Fixed spelling mistake in GetCurentChanNum

                                         0.4     Karen McMurray  19 May 04  Changed all ertA to erta
                                                                                        ertB to ertb.

                                         1.0     Kirk Zurell     11 Aug 04  Integrated etpuc_common.h from J. Loeliger
                                                                            and etpuc_common.h from Byte Craft Limited.
                                                                            Removed tabs & made comments more sustainable.
                                                                            Conditionalized some definitions to be more
                                                                            economical on symbols.

                                                                            Divider lines have 80 asterices.

                                        */



                                        /********************************************************************************/

ETPU "C" COMPILER 1.0.7.85                                              PAGE 10



                                        /* This file depends upon definitions from etpuc.h */

                                        #ifndef __ETPUC_H
                                        #include <etpuc.h>
                                        #endif /* __ETPUC_H */


                                        /********************************************************************************/

                                        /* Constant definitions */

                                        #ifndef TRUE
00000001                                #define TRUE        1
                                        #endif

                                        #ifndef FALSE
00000000                                #define FALSE       0
                                        #endif


                                        /********************************************************************************/

                                        /* State Resolution Flags, and other latches */

                                        /* Clear() definitions */
0027                                    #define LSRLatch      lsr
0028                                    #define LatchedMatchA mrlA
0029                                    #define LatchedMatchB mrlB
002A                                    #define TransLatch    tdl

                                        /* Macros */

                                        /* Set flag0 or flag1
                                           Usage: Set(flag0 | flag1);*/

002B                                    #define Set(cond)     (cond = 1)

                                        /* Clear a flag
                                           Usage: Clear(flag0 | flag1 | LSRLatch | lsr | MatchALatch | mrlA |
                                                         MatchBLatch | mrlB | TransLatch | tdl);         */

002C                                    #define Clear(cond)   (cond = 0)

                                        /* SYNONYMS */
                                        /* Flag 0 & flag 1 */
002D                                    #define ClrFlag0()  (channel.FLAG0 = 0)
002E                                    #define SetFlag0()  (channel.FLAG0 = 1)
002F                                    #define ClrFlag1()  (channel.FLAG1 = 0)
0030                                    #define SetFlag1()  (channel.FLAG1 = 1)


0031                                    #define FunctionMode0          channel.FM0
0032                                    #define IsFunctionMode0()     (channel.FM0==1)
0033                                    #define IsSampledFuncMode0()  (channel.FM0==1)

ETPU "C" COMPILER 1.0.7.85                                              PAGE 11


0034                                    #define IsLatchedFuncMode0()  (channel.FM0==1)

0035                                    #define FunctionMode1          channel.FM1
0036                                    #define IsFunctionMode1()     (channel.FM1==1)
0037                                    #define IsSampledFuncMode1()  (channel.FM1==1)
0038                                    #define IsLatchedFuncMode1()  (channel.FM1==1)


                                        /********************************************************************************/

                                        /* Writing the match registers and enabling/disabling the Match
                                           Recognition Latch Enable */

0039                                    #define EnableMatchA()                 (channel.ERWA = 0)
003A                                    #define EnableMatchB()                 (channel.ERWB = 0)
003B                                    #define DisableMatch()                 (channel.MRLE = 0)

                                        /* SYNONYMS */
003C                                    #define WriteErtAToMatchAAndEnable()   channel.ERWA = 0
003D                                    #define WriteErtBToMatchBAndEnable()   channel.ERWB = 0
003E                                    #define DisableMatchDetection();       channel.MRLE = 0


                                        /* Read capture register */
003F                                    #define GetCapRegA()  (erta)
0040                                    #define GetCapRegB()  (ertb)

                                        /* Clear Latch */
0041                                    #define ClearLSRLatch()       (channel.LSR  = 0)

0042                                    #define ClearMatchALatch()    (channel.MRLA = 0)
0043                                    #define ClearMatchBLatch()    (channel.MRLB = 0)

0044                                    #define ClearTransLatch()     (channel.TDL = 0)

                                        /* SYNONYMS */
0045                                    #define ClearLinkServiceRequestEvent() (lsr  = 0)

0046                                    #define ClearMatchAEvent()    (channel.MRLA = 0)
0047                                    #define ClearMatchBEvent()    (channel.MRLB = 0)

0048                                    #define ClearTransitionEvents() (channel.TDL = 0)



                                        /* Test latch conditions */

0049                                    #define TransitionALatch           channel.TDLA
004A                                    #define IsTransALatched()         (channel.TDLA==1)

004B                                    #define TransitionBLatch           channel.TDLB
004C                                    #define IsTransBLatched()         (channel.TDLB==1)

004D                                    #define MatchALatch            channel.MRLA
004E                                    #define IsMatchALatched()     (channel.MRLA==1)

ETPU "C" COMPILER 1.0.7.85                                              PAGE 12



004F                                    #define MatchBLatch            channel.MRLB
0050                                    #define IsMatchBLatched()     (channel.MRLB==1)

                                        /* SYNONYMS */
0051                                    #define IsLatchedTransitionA()    (channel.TDLA==1)
0052                                    #define IsLatchedTransitionB()    (channel.TDLB==1)
0053                                    #define IsLatchedMatchA()         (channel.MRLA==1)
0054                                    #define IsLatchedMatchB()         (channel.MRLB==1)



                                        /********************************************************************************/

                                        /* Enabling/Disabling Event Handling */

0055                                    #define EnableEventHandling()                   (channel.MTD = 0)
0056                                    #define DisableEventHandling()                  (channel.MTD = 1)

                                        /* SYNONYMS */
0057                                    #define EnableMatchAndTransitionEventHandling()  channel.MTD = 0
0058                                    #define DisableMatchAndTransitionEventHandling() channel.MTD = 1


                                        /********************************************************************************/

                                        /* Semaphore Operations */

0059                                    #define IsSemaphoreLocked()   (channel.SMPR == 1)
005A                                    #define LockSemaphore(num)    (channel.SMPR = num)
005B                                    #define FreeSemaphore()       (channel.SMPR = -1)


                                        /********************************************************************************/

                                        /* Exceptions */

                                        /* Channel control macros */
005C                                    #define SetChannelInterrupt()       (channel.CIRC = 0)
005D                                    #define SetChannelInterruptRequest()(channel.CIRC = 0)

005E                                    #define SetDataTransferInterrupt()        (channel.CIRC = 1)
005F                                    #define SetDataTransferInterruptRequest() (channel.CIRC = 1)

0060                                    #define SetGlobalException()  (channel.CIRC = 2)

                                        /* Channel control */

                                        /* Generate the link service request to channel[ChNum] */
0061                                    #define LinkToChannel(ChNum)            (link = ChNum)
0062                                    #define LinkTo(num)                 link = num;
0063                                    #define LinkToEngine1Chan(num)      link = (num | (1<<6))
0064                                    #define LinkToEngine2Chan(num)      link = (num | (2<<6))
0065                                    #define LinkToOtherEngineChan(num)  link = (num | (3<<6))


ETPU "C" COMPILER 1.0.7.85                                              PAGE 13


                                        /* switch to specified channel from current channel */
0066                                    #define SwitchToChannel(ChNum)      (chan = ChNum)

                                        /* return current channel number */
0067                                    #define GetCurrentChanNum()         (chan)

                                        /* branch condition */
0068                                    #define LinkServiceRequest     channel.LSR
0069                                    #define IsLinkReqActive()     (channel.LSR==1)
006A                                    #define IsSampledLink()       (channel.LSR==1)
006B                                    #define IsLatchedLink()       (channel.LSR==1)


                                        /********************************************************************************/

                                        /* Entry Conditions Definition */

                                        /* Usage: use these in the if()/else if()/else structure in an
                                           ETPU_function */

006C                                    #define HostServiceRequest               hsr
006D                                    #define IsHostServiceRequestEvent(num)   (hsr==num)

006E                                    #define MatchA_TransB                    (m1==1)
006F                                    #define matchA_transB                    (m1==1)
0070                                    #define IsMatchAOrTransitionBEvent()     (m1==1)

0071                                    #define MatchB_TransA                    (m2==1)
0072                                    #define matchB_transA                    (m2==1)
0073                                    #define IsMatchBOrTransitionAEvent()     (m2==1)

0074                                    #define linkRequest                      (lsr==1)
0075                                    #define IsLinkServiceRequestEvent()      (lsr==1)

                                        /* For output-only functions */
0076                                    #define MatchA                           (m1==1)
0077                                    #define MatchB                           (m2==1)


                                        /********************************************************************************/

                                        /* Predefined Channel Modes (PDCM) */

0078                                    #define SetChannelMode(mode)        (channel.PDCM = mode)
0079                                    #define channel_setup channel.PDCM

                                        /* Usage:       channel_setup = PDCM_constant

                                        PDCM_constants are taken from etpuc.h:
                                        em_b_st         Either Match, Blocking, Single Transition
                                        em_b_dt         Either Match, Blocking, Double Transition
                                        em_nb_st        Either Match, NonBlocking, Single Transition
                                        em_nb_dt        Either Match, NonBlocking, Double Transition
                                        m2_st           Match2, Single, Transition
                                        m2_dt           Match2, Double, Transition

ETPU "C" COMPILER 1.0.7.85                                              PAGE 14


                                        bm_st           Both Match, Single Transition
                                        bm_dt           Both Match, Double Transition
                                        m2_o_st         Match2, Ordered Single Blocking Transition
                                        m2_o_dt         Match2, Ordered Double Transition
                                        sm_st_e         Single Match, Single Transition Enhanced
                                        sm_st           Single Match, Single Transition
                                        sm_dt           Single Match, Double Transition
                                        */

                                        /* SYNONYMS */
007A                                    #define EitherMatchBlockingSingleTransition()     channel.PDCM = em_b_st
007B                                    #define EitherMatchBlockingDoubleTransition()     channel.PDCM = em_b_dt
007C                                    #define EitherMatchNonBlockingSingleTransition()  channel.PDCM = em_nb_st
007D                                    #define EitherMatchNonBlockingDoubleTransition()  channel.PDCM = em_nb_dt
007E                                    #define Match2SingleTransition()                  channel.PDCM = m2_st
007F                                    #define Match2DoubleTransition()                  channel.PDCM = m2_dt
0080                                    #define BothMatchSingleTransition()               channel.PDCM = bm_st
0081                                    #define BothMatchDoubleTransition()               channel.PDCM = bm_dt
0082                                    #define Match2OrderedSingleBlockingTransition()   channel.PDCM = m2_o_st
0083                                    #define Match2OrderedDoubleTransition()           channel.PDCM = m2_o_dt
0084                                    #define SingleMatchSingleTransitionEnhanced()     channel.PDCM = sm_st_e
0085                                    #define SingleMatchSingleTransition()             channel.PDCM = sm_st
0086                                    #define SingleMatchDoubleTransition()             channel.PDCM = sm_dt


                                        #define ClearAllLatches()         \
0087                                            (lsr = 0);(mrlA = 0);(mrlB = 0);(tdl = 0);


                                        /********************************************************************************/

                                        /* Complex Macros */

                                        /* These macros should provide the most optimized way of doing things.
                                           They should be in the best order for optimizing. The compiler might
                                           be able to identify this code for optimization. */

                                        #define SetupMatchA(reference) \
                                                erta = reference;      \
                                                EnableMatchA();        \
0088                                            ClearMatchALatch();

                                        #define SetupMatchB(reference) \
                                                ertb = reference;      \
                                                EnableMatchB();        \
0089                                            ClearMatchBLatch();

                                        /* These are ONLY useful for init. and if you know which TCR you want
                                           to use. Latches are cleared at the end so it can be combined with
                                           other latches. */

                                        #define ConfigMatch_AB() \
                                                WriteErtAToMatchAAndEnable(); \
                                                WriteErtBToMatchBAndEnable(); \
                                                EnableMatchA();        \

ETPU "C" COMPILER 1.0.7.85                                              PAGE 15


                                                EnableMatchB();        \
                                                EnableEventHandling();\
                                                ClearMatchALatch();\
008A                                            ClearMatchBLatch();

                                        #define SetupMatch_A(reference, timebase_comparator, pin_action) \
                                                erta = reference; \
                                                act_unitA = timebase_comparator; \
                                                opacA = pin_action; \
                                                EnableMatchA();        \
                                                ClearMatchALatch();\
008B                                            EnableEventHandling();

                                        #define SetupMatch_B(reference, timebase_comparator, pin_action) \
                                                ertb = reference; \
                                                act_unitB = timebase_comparator; \
                                                opacB = pin_action; \
                                                EnableMatchB();        \
                                                ClearMatchBLatch();\
008C                                            EnableEventHandling();

                                        #define SetupCaptureTrans_A(timebase, pin_trans) \
                                                act_unitA = timebase;\
                                                ipacA = pin_trans;\
                                                ClearTransLatch();\
008D                                            EnableEventHandling();

                                        #define SetupCaptureTrans_B(timebase, pin_trans) \
                                                act_unitB = timebase;\
                                                ipacB = pin_trans;\
                                                ClearTransLatch();\
008E                                            EnableEventHandling();


                                        /********************************************************************************/

                                        /* Action Units */

                                        /* Usage: ActionUnitA( MatchTCR1 | MatchTCR2,
                                                               CaptureTCR1 | CaptureTCR2,
                                                               GreaterEqual | EqualOnly ); */

008F                                    #define ActionUnitA( match, capture, compare)   (act_unitA=match##capture##compare)
0090                                    #define ActionUnitB( match, capture, compare)   (act_unitB=match##capture##compare)

0091                                    #define MatchTCR1    Mtcr1_
0092                                    #define MatchTCR2    Mtcr2_
0093                                    #define CaptureTCR1  Ctcr1_
0094                                    #define CaptureTCR2  Ctcr2_
0095                                    #define GreaterEqual ge
0096                                    #define EqualOnly    eq

                                        /* SYNONYMS */
                                        /* Action Unit A, Time Bases for match and capture */
0097                                    #define TimeBaseAMatchTcr1CaptureTcr1GreaterEqual()      channel.TBSA = Mtcr1_Ctcr1_ge

ETPU "C" COMPILER 1.0.7.85                                              PAGE 16


0098                                    #define TimeBaseAMatchTcr2CaptureTcr1GreaterEqual()      channel.TBSA = Mtcr2_Ctcr1_ge
0099                                    #define TimeBaseAMatchTcr1CaptureTcr2GreaterEqual()      channel.TBSA = Mtcr1_Ctcr2_ge
009A                                    #define TimeBaseAMatchTcr2CaptureTcr2GreaterEqual()      channel.TBSA = Mtcr2_Ctcr2_ge
009B                                    #define TimeBaseAMatchTcr1CaptureTcr1ExactlyEqual()      channel.TBSA = Mtcr1_Ctcr1_eq
009C                                    #define TimeBaseAMatchTcr2CaptureTcr1ExactlyEqual()      channel.TBSA = Mtcr2_Ctcr1_eq
009D                                    #define TimeBaseAMatchTcr1CaptureTcr2ExactlyEqual()      channel.TBSA = Mtcr1_Ctcr2_eq
009E                                    #define TimeBaseAMatchTcr2CaptureTcr2ExactlyEqual()      channel.TBSA = Mtcr2_Ctcr2_eq

                                        /* Action Unit B, Time Bases for match and capture */
009F                                    #define TimeBaseBMatchTcr1CaptureTcr1GreaterEqual()      channel.TBSB = Mtcr1_Ctcr1_ge
00A0                                    #define TimeBaseBMatchTcr2CaptureTcr1GreaterEqual()      channel.TBSB = Mtcr2_Ctcr1_ge
00A1                                    #define TimeBaseBMatchTcr1CaptureTcr2GreaterEqual()      channel.TBSB = Mtcr1_Ctcr2_ge
00A2                                    #define TimeBaseBMatchTcr2CaptureTcr2GreaterEqual()      channel.TBSB = Mtcr2_Ctcr2_ge
00A3                                    #define TimeBaseBMatchTcr1CaptureTcr1ExactlyEqual()      channel.TBSB = Mtcr1_Ctcr1_eq
00A4                                    #define TimeBaseBMatchTcr2CaptureTcr1ExactlyEqual()      channel.TBSB = Mtcr2_Ctcr1_eq
00A5                                    #define TimeBaseBMatchTcr1CaptureTcr2ExactlyEqual()      channel.TBSB = Mtcr1_Ctcr2_eq
00A6                                    #define TimeBaseBMatchTcr2CaptureTcr2ExactlyEqual()      channel.TBSB = Mtcr2_Ctcr2_eq



                                        /********************************************************************************/

                                        /* Pin output buffer */

00A7                                    #define EnableOutputBuffer()           (channel.TBSA = enable_output_buffer)
00A8                                    #define DisableOutputBuffer()          (channel.TBSA = disable_output_buffer)


                                        /********************************************************************************/

                                        /* Pin control */

                                        /* Pin() definitions */
00000002                                #define SetHigh pin_high
00000004                                #define SetLow  pin_low
00000000                                #define PerPacA pin_opacA
00000001                                #define PerPacB pin_opacB

                                        /* Set Output Pin
                                           Usage: Pin( SetHigh | SetLow | PerPacA | PerPacB ); */
00A9                                    #define Pin( state )          (channel.PIN=state)

                                        /* Immediate output pin */
00000000                                #define set_pin_per_opacA  pin_opacA
00000001                                #define set_pin_per_opacB  pin_opacB
00000002                                #define force_pin_high     pin_high
00000004                                #define force_pin_low      pin_low

00AA                                    #define SetPinHigh()          (channel.PIN=force_pin_high)
00AB                                    #define SetPinLow()           (channel.PIN=force_pin_low)
00AC                                    #define SetPinPerPacA()       (channel.PIN=set_pin_per_opacA)
00AD                                    #define SetPinPerPacB()       (channel.PIN=set_pin_per_opacB)

                                        /* Reading the pin states: branch conditions */


ETPU "C" COMPILER 1.0.7.85                                              PAGE 17


00AE                                    #define SampledInputPin            channel.PSS
00AF                                    #define IsLatchedInputPin()        (channel.PSS==1)
00B0                                    #define IsInputPinHigh()           (channel.PSS==1)

00B1                                    #define CurrentInputPin            channel.PSTI
00B2                                    #define IsCurrentInputPin()        (channel.PSTI==1)

00B3                                    #define CurrentOutputPin           channel.PSTO
00B4                                    #define IsCurrentOutputPin()       (channel.PSTO==1)

                                        /* SYNONYMS */
00B5                                    #define IsSampledInputPinHigh()    (channel.PSS==1)
00B6                                    #define IsLatchedInputPinHigh()    (channel.PSS==1)
00B7                                    #define IsCurrentInputPinHigh()    (channel.PSTI==1)
00B8                                    #define IsCurrentOutputPinHigh()   (channel.PSTO==1)



                                        /********************************************************************************/

                                        /* Output Pin Action */

00000000                                #define NoChange    match_no_change
00000001                                #define PinHigh     match_high
00000002                                #define PinLow      match_low
00000003                                #define PinToggle   match_toggle

                                        /* Usage: OnMatchA( NoChange | PinHigh | PinLow | PinToggle ); */
00B9                                    #define OnMatchA(action)      (opacA = action)
00BA                                    #define OnMatchB(action)      (opacB = action)

                                        /* SYNONYMS */
                                        /* Action Unit A, Output Pin Actions */
00BB                                    #define OnMatchAPinNoChange()      channel.OPACA = match_no_change
00BC                                    #define OnMatchAPinHigh()          channel.OPACA = match_high
00BD                                    #define OnMatchAPinLow()           channel.OPACA = match_low
00BE                                    #define OnMatchAPinToggle()        channel.OPACA = match_toggle
00BF                                    #define OnInputActionAPinLow()     channel.OPACA = transition_low
00C0                                    #define OnInputActionAPinHigh()    channel.OPACA = transition_high
00C1                                    #define OnInputActionAPinToggle()  channel.OPACA = transition_toggle

                                        /* Action Unit B, Output Pin Actions */
00C2                                    #define OnMatchBPinNoChange()      channel.OPACB = match_no_change
00C3                                    #define OnMatchBPinHigh()          channel.OPACB = match_high
00C4                                    #define OnMatchBPinLow()           channel.OPACB = match_low
00C5                                    #define OnMatchBPinToggle()        channel.OPACB = match_toggle
00C6                                    #define OnInputActionBPinLow()     channel.OPACB = transition_low
00C7                                    #define OnInputActionBPinHigh()    channel.OPACB = transition_high
00C8                                    #define OnInputActionBPinToggle()  channel.OPACB = transition_toggle


                                        /********************************************************************************/

                                        /* Input Pin Action */


ETPU "C" COMPILER 1.0.7.85                                              PAGE 18


00000000                                #define NoDetect  no_detect
00000001                                #define LowHigh   low_high
00000002                                #define HighLow   high_low
00000003                                #define AnyTrans  any_trans

                                        /* Usage: DetectTransA( no_detect | low_high | high_low | any_trans | ...); */
00C9                                    #define OnTransA(action)     (ipacA = action)
00CA                                    #define OnTransB(action)     (ipacB = action)

                                        /* SYNONYMS */
                                        /* Action Unit A, Input Pin Edge Detection */
00CB                                    #define DetectADisable()        channel.IPACA = no_detect
00CC                                    #define DetectARisingEdge()     channel.IPACA = low_high
00CD                                    #define DetectAFallingEdge()    channel.IPACA = high_low
00CE                                    #define DetectAAnyEdge()        channel.IPACA = any_trans
00CF                                    #define DetectALowOnMatchA()    channel.IPACA = detect_input_0_on_match
00D0                                    #define DetectAHighOnMatchA()   channel.IPACA = detect_input_1_on_match

                                        /* Action Unit B, Input Pin Edge Detection */
00D1                                    #define DetectBDisable()        channel.IPACB = no_detect
00D2                                    #define DetectBRisingEdge()     channel.IPACB = low_high
00D3                                    #define DetectBFallingEdge()    channel.IPACB = high_low
00D4                                    #define DetectBAnyEdge()        channel.IPACB = any_trans
00D5                                    #define DetectBLowOnMatchA()    channel.IPACB = detect_input_0_on_match
00D6                                    #define DetectBHighOnMatchA()   channel.IPACB = detect_input_1_on_match


                                        /********************************************************************************/

                                        /* Intrinsics synonyms */

                                        /* Matches in Threads */
00D7                                    #define DisableMatchesInThread()    match_disable()
00D8                                    #define EnableMatchesInThread()     match_enable()



                                        #endif /* __ETPUC_COMMON_H */

                                        /* 如果作为函数集，则放置在对应的位置，否则仅有一个函数 */
                                        #ifdef PWM_FUNCTION_NUMBER
0000                                    #pragma ETPU_function PWM, alternate @ PWM_FUNCTION_NUMBER;
                                        #else
                                        #pragma ETPU_function PWM, alternate;
                                        #endif

                                        /* 服务请求定义 */
                                        /* 初始化 */
00000007                                #define PWM_INIT            7
                                        /* 立即更新频率占空比 */
00000003                                #define PWM_IMMED_UPDATE    3
                                        /* 同步更新频率占空比 */
00000005                                #define PWM_COHERENT_UPDATE 5

                                        /* FM位选择定义 */

ETPU "C" COMPILER 1.0.7.85                                              PAGE 19


00000000                                #define PWM_USE_TCR1    0
00000001                                #define PWM_ACTIVE_HIGH 1
00000000                                #define PWM_ACTIVE_LOW  0

                                        /* 用于线程选择的flag定义 */
                                        /* 正在处理有效沿的标志 */
00D9                                    #define PWM_PROING_ACTIVE_FLAG          (flag0 == 0)
                                        /* 正在处理无效沿的标志 */
00DA                                    #define PWM_PROING_INACTIVE_FLAG        (flag0 == 1)
                                        /* 将要处理无效沿的标志 */
00DB                                    #define PWM_PRO_INACTIVE_FLAG           (flag0 == 0)
                                        /* 将要处理有效沿且高有效的标志 */
00DC                                    #define PWM_PRO_ACTIVE_HIGH_FLAG        (flag0 == 1 && flag1 == 1)
                                        /* 将要处理有效沿且低有效的标志 */
00DD                                    #define PWM_PRO_ACTIVE_LOW_FLAG         (flag0 == 1 && flag1 == 0)

                                        /* 用于设置flag */
00DE                                    #define SET_PWM_NEXT_ACTIVE_FLAG()      {flag0 = 1;}
00DF                                    #define SET_PWM_NEXT_INACTIVE_FLAG()    {flag0 = 0;}
00E0                                    #define SET_PWM_ACTIVE_HIGH_FLAG()      {flag1 = 1;}
00E1                                    #define SET_PWM_ACTIVE_LOW_FLAG()       {flag1 = 0;}

                                        #endif

                                        /*******************************************************************************
                                         * PWM
                                         *
                                         * 描述:实现PWM输出，可选时基为TCR1或TCR2可选高电平有效或低电平有效，可立即更新
                                         * 频率占空比或同步更新频率占空比
                                         *
                                         * 参数：
                                         * 输入参数:
                                         *     Flag: 自用参数，标记flag0，用于限制当前的匹配，1时表示即将处理有效沿或，
                                         *     正在处理无效沿，0时表示即将处理无效沿或正在处理有效沿
                                         *     Period: PWM的周期，以TCRx的个数为单位，立即更新时，将新周期从主CPU传入
                                         *     ActiveTime: PWM有效电平的持续时间，以TCRx的个数为单位，立即更新时，将
                                         * 新的有效时间从主CPU传入
                                         *     Coherent_Period: 用于同步更新时指定周期
                                         *     Coherent_ActiveTime: 用于同步更新时指定有效时间
                                         *
                                         * 输出参数:
                                         *
                                         * 备注:FunctionMode0: 用来决定当前的PWM是高电平有效还是低电平有效，仅用于
                                         * 初始化，后面使用flag1决定。该输入为隐含输入，需要在HostCPU调用时指定；
                                         *      FunctionMode1: 用来决定当前的时基是TCR1还是TCR2，仅用于初始化。该输入为
                                         * 隐含输入，需要在HostCPU调用时指定；
                                         *      flag1: 用于判断高电平有效还是低电平有效的模式，也用于决定线程。
                                         *
                                         * 遗留问题:
                                         ******************************************************************************/
                                        void PWM(unsigned int8 Flag,
                                                 unsigned int24 Period,
                                                 unsigned int24 ActiveTime,
                                                 unsigned int24 Coherent_Period,
                                                 unsigned int24 Coherent_ActiveTime)

ETPU "C" COMPILER 1.0.7.85                                              PAGE 20


0000 0001 0005 0009 000D                {
                                            /* 保存下次有效沿匹配的起始时刻 */
0011                                        static int24 LastFrame;
                                            /* 保存下次无效沿匹配的起始时刻 */
0015                                        static int24 NextEdge;
                                            
                                            /* 初始化线程，初始化通道时执行 */
                                            if (HostServiceRequest == PWM_INIT)
                                            {
                                                /* 清空匹配检测，跳变检测，清除锁存 */
                                                DisableMatchesInThread();
                                                OnTransA(NoDetect);
                                                OnTransB(NoDetect);
                                                ClearLSRLatch();
                                                ClearTransLatch();
                                                ClearMatchAEvent();
                                                ClearMatchBEvent();

                                                /* 设置通道工作模式，可以匹配ERTA和ERTB，且没有先后顺序，也不互相阻塞，
                                                 * 两个匹配都可以产生服务请求 */
                                                SetChannelMode(em_nb_st);
                                                /* 设置下次处理有效沿的标志 */
0400 580FF6A5   chan ipaca = no_detect,         
                    ipacb = no_detect,         
                    em_nb_st,clr_lsr,         
                    clr_mrla,clr_mrlb,         
                    clr_tdl.            
0404                                            SET_PWM_NEXT_ACTIVE_FLAG();
0404 0C0FAEBE   alu p31_24 = #0x01;             Flag = 1;
                    Set flag0.          

                                                /* 设置匹配时钟为TCR2 */
0408 CFFFF980   ram PRAM0 = p31_24.         
040C                                            ActionUnitA(MatchTCR2, CaptureTCR2, GreaterEqual);
                                                ActionUnitB(MatchTCR2, CaptureTCR2, GreaterEqual);
                                                /* 设置ERTA，下一个时钟产生匹配A */
040C 4FF33FFF                           
                    chan tbsa = mtcr2_ctcr2_ge         
                    ,                   
                    tbsb = mtcr2_ctcr2_ge         
                    .                   
0410                                            erta = tcr2 + 1;

                                                /* 若FM1为使用TCR1，则设置匹配时钟为TCR1 */
0410 F3A8211F   if fm1==1 jump 0420,                        if (FunctionMode1 == PWM_USE_TCR1)
                    noflush.            
0414 39FD2FF4   alu erta = tcr2 + 1 ,ccs    
                    .                   
0418                                            {
                                                    ActionUnitA(MatchTCR1, CaptureTCR1, GreaterEqual);
                                                    ActionUnitB(MatchTCR1, CaptureTCR1, GreaterEqual);
0418 4FF00FFF                           
                    chan tbsa = mtcr1_ctcr1_ge         
                    ,                   
                    tbsb = mtcr1_ctcr1_ge         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 21


                    .                   
041C                                                erta = tcr1 + 1;
                                                }

                                                /* 设置ERTB，在ERTA发生后的ActiveTime后产生服务请求 */
                                                /* 说明此函数当ERTA时输出产生上升沿，并在ERTB处产生下降沿 */
041C 39FC2FF4   alu erta = tcr1 + 1 ,ccs         
                    .                   
0420 BFEFFB81   ram p23_0 = PRAM5.              ertb = erta + ActiveTime;

                                                /* 使能AB通道的匹配、跳变 */
0424 7F1E3F5B   alu ertb = erta + p ,ccs            ConfigMatch_AB();
                    ;chan write_erta,         
                    write_ertb.         

                                                /* FM0用来决定PWM的占空比对高电平有效还是低电平有效 */
0428 FF3F0CFB   chan write_erta,        
                    write_ertb,clr_mrla,    
                    clr_mrlb,           
                    mtd = enable_mtsr.    
042C F3C0233F   if fm0==0 jump 0464,            if (FunctionMode0 == PWM_ACTIVE_HIGH)
                                                {
042C F3C0233F   if fm0==0 jump 0464,    
                    flush.              
0430                                                 /* 置flag1 */
                                                    SET_PWM_ACTIVE_HIGH_FLAG();
                                                    
                                                    /* 高电平有效时，设置初始电平为低电平 */
0430 FFB3FCF9   chan pin = low;Set flag1    
                    .                   
0434                                                SetPinLow();
                                                    EnableOutputBuffer();
                                                    /* 当发生ERTB的匹配时，将输出置为低 */
                                                    OnMatchB(PinLow);
                                                    
0434 4F58FFFF   chan opacb = low,       
                    tbsa = obe_on.      
0438 BFEFFB81   ram p23_0 = PRAM5.                  if (ActiveTime == 0)
043C 3BF8FFF4   alu nil = p ,ccs.                   {
0440 F0C0227F   if z==0 jump 044C,flush.         
                                        
0444                                                    OnMatchA(PinLow);
                                                    }
0444 F7E0229F   jump 0450,noflush.                            else
0448 4AFFFFFF   chan opaca = low.         
                                                    {
                                                        OnMatchA(PinHigh);
044C 49FFFFFF   chan opaca = high.         
0450                                                }
                                                    
                                                    /* 下次有效沿的开始时间 */
0450 BFFE7A84   alu p = erta ,ccs;                  LastFrame = erta;
                    ram PRAM17 = p23_0.         
                                                     /* 计算下次无效沿的开始时间 */
0454 BFEFFB81   ram p23_0 = PRAM5.                  NextEdge = erta + ActiveTime;

ETPU "C" COMPILER 1.0.7.85                                              PAGE 22


0458 BF1E7A85   alu p = erta + p ,ccs;         
                    ram PRAM21 = p23_0.         
045C                                                WriteErtAToMatchAAndEnable();
                                                }
045C F7E024BF   jump 0494,noflush.                        else
0460 7FFFFF7F   chan write_erta.         
                                                {
                                                    SET_PWM_ACTIVE_LOW_FLAG();
                                                    
                                                    /* 低电平有效时，设置初始电平为高电平 */
                                                    SetPinHigh();
0464 FF72FCF9   chan pin = high;         
                    Clear flag1.         
0468                                                EnableOutputBuffer();
                                                    OnMatchB(PinHigh);
                                                    
0468 4F38FFFF   chan opacb = high,      
                    tbsa = obe_on.      
046C BFEFFB81   ram p23_0 = PRAM5.                  if (ActiveTime == 0)
0470 3BF8FFF4   alu nil = p ,ccs.                   {
0474 F0C0241F   if z==0 jump 0480,flush.         
                                        
0478                                                    OnMatchA(PinHigh);
                                                    }
0478 F7E0243F   jump 0484,noflush.                            else
047C 49FFFFFF   chan opaca = high.         
                                                    {
                                                        OnMatchA(PinLow);
0480 4AFFFFFF   chan opaca = low.         
0484                                                }
                                                    
                                                    /* 下次有效沿的开始时间 */
0484 BFFE7A84   alu p = erta ,ccs;                  LastFrame = erta;
                    ram PRAM17 = p23_0.         
                                                     /* 计算下次无效沿的开始时间 */
0488 BFEFFB81   ram p23_0 = PRAM5.                  NextEdge = erta + ActiveTime;
048C BF1E7A85   alu p = erta + p ,ccs;         
                    ram PRAM21 = p23_0.         
0490                                                WriteErtAToMatchAAndEnable();
0490 7FFFFF7F   chan write_erta.         
0494                                            }
0494 6FFFFFFF   end.                        }
000A 01 00        00 A05 P01 MD 0400  HSR 6/7   lsr x  m1 x  m2 x  pin x  flag1 x  flag0 x                             
                                         
0000             Thread Local RAM size                                   

                                            /* 当服务请求为立即更新，且当前处于有效沿，说明matchA已经来过，
                                             * 此时直接更改无效沿匹配的时间，使更改在立即生效，直接改变了本次下降沿
                                             * 到来的时间 */
                                            else if (HostServiceRequest == PWM_IMMED_UPDATE && PWM_PROING_ACTIVE_FLAG)
                                            {
0498 BFEFFB84   ram p23_0 = PRAM17.             NextEdge = LastFrame + ActiveTime;
049C BFE80A81   alu a = p ,ccs;         
                    ram p23_0 = PRAM5.         
04A0 BF197A85   alu p = a + p ,ccs;         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 23


                    ram PRAM21 = p23_0.         
04A4 BFE80A80   alu a = p ,ccs;                 ertb = NextEdge - Period;
                    ram p23_0 = PRAM1.         
                                                WriteErtBToMatchBAndEnable();
04A8 6C193FDB   alu ertb = a - p ,ccs;        }
                    chan write_ertb,end.         
                                        
0000 41 26        00 A00 P01 ME 0498  HSR 2/3   lsr x  m1 x  m2 x  pin 0  flag1 x  flag0 0                             
0004 41 26        00 A02 P01 ME 0498  HSR 2/3   lsr x  m1 x  m2 x  pin 1  flag1 x  flag0 0                             
                                         
0000             Thread Local RAM size                                   
                                            /* 当服务请求为立即更新，且当前处于无效沿，说明matchB已经来过，
                                             * 此时直接更改无效沿匹配的时间，使更改在下次有效沿时生效，改变下次下降沿
                                             * 到来的时间 */
                                            else if (HostServiceRequest == PWM_IMMED_UPDATE && PWM_PROING_INACTIVE_FLAG)
                                            {
04AC BFEFFB84   ram p23_0 = PRAM17.             NextEdge = LastFrame + ActiveTime;
04B0 BFE80A81   alu a = p ,ccs;         
                    ram p23_0 = PRAM5.         
04B4 BF197A85   alu p = a + p ,ccs;         
                    ram PRAM21 = p23_0.         
04B8                                            ertb = NextEdge;
                                                WriteErtBToMatchBAndEnable();
04B8 6FF83FDB   alu ertb = p ,ccs;          }
                    chan write_ertb,end.         
                                        
0002 41 2B        00 A01 P01 ME 04AC  HSR 2/3   lsr x  m1 x  m2 x  pin 0  flag1 x  flag0 1                             
0006 41 2B        00 A03 P01 ME 04AC  HSR 2/3   lsr x  m1 x  m2 x  pin 1  flag1 x  flag0 1                             
                                         
0000             Thread Local RAM size                                   
                                            /* 当服务请求为同步更新，若此时处于有效电平，则使无效匹配正常到来，仅更新
                                             * NextEdge，etpu会在matchB中更新ERTB，同时更新周期和占空比此处无需重复更新；
                                             * 若此时处于无效电平，则更新方式和立即更新相同，需要重新更新NextEdge
                                             * 并设置ERTB，并更新周期和占空比 */
                                            else if (HostServiceRequest == PWM_COHERENT_UPDATE)
                                            {
04BC BFEFFB84   ram p23_0 = PRAM17.             NextEdge = LastFrame + Coherent_ActiveTime;
04C0 BFE80A83   alu a = p ,ccs;         
                    ram p23_0 = PRAM13.         
04C4 BF197A85   alu p = a + p ,ccs;     
                    ram PRAM21 = p23_0.    
04C8 CFEFF880   ram p31_0 = PRAM0.              if (Flag != 0)
04CC 3BF20FF4   alu a = p31_24 ,ccs.            {
04D0 F0C826CD   if z==1 jump 04D8,flush;                ertb = NextEdge;
                    ram p23_0 = PRAM21.         
                                                    WriteErtBToMatchBAndEnable();
                                                }
04D4 7FF83FDB   alu ertb = p ,ccs;         
                    chan write_ertb.         
04D8 BFEFFB82   ram p23_0 = PRAM9.              Period = Coherent_Period;
04DC BFFFFB80   ram PRAM1 = p23_0.         
04E0 BFEFFB83   ram p23_0 = PRAM13.             ActiveTime = Coherent_ActiveTime;
04E4 AFFFFB81   ram PRAM5 = p23_0,end.        }
0008 41 2F        00 A04 P01 ME 04BC  HSR 1/4/5 lsr x  m1 x  m2 x  pin x  flag1 x  flag0 x                             
                                         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 24


0000             Thread Local RAM size                                   
                                            /* matchA有效，matchB无效，flag0有效，flag1有效或
                                             * matchA有效，matchB有效，flag0有效，flag1有效 */
                                            /* flag0的状态用于限制当前的匹配，1时当前处理matchA，0时当前处理matchB，
                                             * flag1的状态用于判断高电平有效还是低电平有效的模式，
                                             * 该线程处理matchA，且用于高电平有效的PWM */
                                            /* 此处处理有效沿匹配到来后的事件，有效沿匹配后，重新计算下一个有效沿的时间，
                                             * 并设置下次的有效沿匹配事件和设置ETPU下次应响应无效沿的匹配 */
                                            else if (m1==1 && PWM_PRO_ACTIVE_HIGH_FLAG)
                                            {
                                                /* 强制ETPU下次响应matchB */
                                                SET_PWM_NEXT_INACTIVE_FLAG();
04E8 CFF8FD00   ram PRAM0 = #0(8) ;             Flag = 0;
                    Clear flag0.         

                                                /* 此处用于高电平有效的PWM，用来设置下次有效沿的输出引脚状态 */
                                                /* 若占空比为0，则说明直接输出低电平（无效电平）即可 */
                                                /* 此处设置当ERTA发生时，输出引脚的状态 */
04EC BFEFFB81   ram p23_0 = PRAM5.              if( ActiveTime ==0 )
04F0 3BF8FFF4   alu nil = p ,ccs.               {
04F4 F0C0281F   if z==0 jump 0500,flush.         
                                        
04F8                                                OnMatchA(PinLow);
                                                }
04F8 F7E0283F   jump 0504,noflush.                        else
04FC 4AFFFFFF   chan opaca = low.         
                                                {
                                                    OnMatchA(PinHigh);
0500 49FFFFFF   chan opaca = high.         
0504                                            }

                                                ClearMatchAEvent();
                                                /* 计算下次有效沿的到来时间 */
0504 DFEF7A80   ram p23_0 = PRAM1;              erta = erta + Period;
                    chan clr_mrla.         
0508 3B1E2FF4   alu erta = erta + p ,ccs         
                    .                   
050C BFFE7A84   alu p = erta ,ccs;              LastFrame = erta;
                    ram PRAM17 = p23_0.         
                                                /* 计算下次无效沿的开始时间 */
0510 BFEFFB81   ram p23_0 = PRAM5.              NextEdge = erta + ActiveTime;
0514 BF1E7A85   alu p = erta + p ,ccs;         
                    ram PRAM21 = p23_0.         
0518                                            WriteErtAToMatchAAndEnable();
0518 6FFFFF7F   chan write_erta,end.        }
0016 41 3A        00 A0B P01 ME 04E8  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 1  flag0 1                             
001E 41 3A        00 A0F P01 ME 04E8  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 1  flag0 1                             
0036 41 3A        00 A1B P01 ME 04E8  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 1  flag0 1                             
003E 41 3A        00 A1F P01 ME 04E8  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 1  flag0 1                             
                                         
0000             Thread Local RAM size                                   
                                            /* matchA有效，matchB无效，flag0有效，flag1无效或
                                             * matchA有效，matchB有效，flag0有效，flag1无效 */
                                            /* flag0的状态用于限制当前的匹配，1时当前处理matchA，0时当前处理matchB，
                                             * flag1的状态用于判断高电平有效还是低电平有效的模式，

ETPU "C" COMPILER 1.0.7.85                                              PAGE 25


                                             * 该线程处理matchA，且低电平有效的PWM */
                                            /* 此处处理有效沿匹配到来后的事件，有效沿匹配后，重新计算下一个有效沿的时间，
                                             * 并设置下次的有效沿匹配事件和设置ETPU下次应响应无效沿的匹配 */
                                            else if (m1==1 && PWM_PRO_ACTIVE_LOW_FLAG)
                                            {
                                                /* 强制ETPU下次响应matchB */
                                                SET_PWM_NEXT_INACTIVE_FLAG();
051C CFF8FD00   ram PRAM0 = #0(8) ;             Flag = 0;
                    Clear flag0.         

                                                /* 此处用于低电平有效的PWM，用来设置下次有效沿匹配的输出引脚状态 */
                                                /* 若占空比为0，则说明直接输出高电平（无效电平）即可 */
                                                /* 此处设置当ERTA发生时，输出引脚的状态 */
0520 BFEFFB81   ram p23_0 = PRAM5.              if (ActiveTime == 0)
0524 3BF8FFF4   alu nil = p ,ccs.               {
0528 F0C029BF   if z==0 jump 0534,flush.         
                                        
052C                                                OnMatchA(PinHigh);
                                                }
052C F7E029DF   jump 0538,noflush.                        else
0530 49FFFFFF   chan opaca = high.         
                                                {
                                                    OnMatchA(PinLow);
0534 4AFFFFFF   chan opaca = low.         
0538                                            }
                                                
                                                ClearMatchAEvent();
                                                /* 计算下次有效沿的到来时间 */
0538 DFEF7A80   ram p23_0 = PRAM1;              erta = erta + Period;
                    chan clr_mrla.         
053C 3B1E2FF4   alu erta = erta + p ,ccs         
                    .                   
0540 BFFE7A84   alu p = erta ,ccs;              LastFrame = erta;
                    ram PRAM17 = p23_0.         
                                                /* 计算下次无效沿的开始时间 */
0544 BFEFFB81   ram p23_0 = PRAM5.              NextEdge = erta + ActiveTime;
0548 BF1E7A85   alu p = erta + p ,ccs;         
                    ram PRAM21 = p23_0.         
054C                                            WriteErtAToMatchAAndEnable();
054C 6FFFFF7F   chan write_erta,end.        }
0012 41 47        00 A09 P01 ME 051C  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 0  flag0 1                             
001A 41 47        00 A0D P01 ME 051C  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 0  flag0 1                             
0032 41 47        00 A19 P01 ME 051C  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 0  flag0 1                             
003A 41 47        00 A1D P01 ME 051C  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 0  flag0 1                             
                                         
0000             Thread Local RAM size                                   
                                            /* matchA无效，matchB有效，flag0无效
                                             * matchA有效，matchB有效，flag0无效 */
                                            /* flag0的状态用于限制当前的匹配，1时当前处理matchA，0时当前处理matchB，
                                             * flag1的状态用于判断高电平有效还是低电平有效的模式，
                                             * 该线程处理matchB，即无效沿的匹配 */
                                            /* 此处处理有效沿匹配到来后的事件，有效沿匹配后，重新计算下一个有效沿的时间，
                                             * 并设置下次的有效沿匹配事件和设置ETPU下次应响应无效沿的匹配 */
                                            else if (m2 == 1 && PWM_PRO_INACTIVE_FLAG)
                                            {

ETPU "C" COMPILER 1.0.7.85                                              PAGE 26


                                                /* 置flag0为1，强制下次处理matchA */
                                                SET_PWM_NEXT_ACTIVE_FLAG();
0550 0C0FAEBE   alu p31_24 = #0x01;             Flag = 1;
                    Set flag0.          
                                                
                                                ClearMatchBEvent();
                                                /* 设置下次无效沿的时间到ERTB */
0554 DFFFD980   ram PRAM0 = p31_24;         
                    chan clr_mrlb.         
0558 BFEFFB85   ram p23_0 = PRAM21.             ertb = NextEdge;
                                                /* 使能matchB，以便下次无效沿到来 */
                                                WriteErtBToMatchBAndEnable();
055C 6FF83FDB   alu ertb = p ,ccs;          }
                    chan write_ertb,end.         
                                        
0020 41 54        00 A10 P01 ME 0550  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 0  flag0 0                             
0024 41 54        00 A12 P01 ME 0550  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 1  flag0 0                             
0028 41 54        00 A14 P01 ME 0550  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 0  flag0 0                             
002C 41 54        00 A16 P01 ME 0550  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 1  flag0 0                             
0030 41 54        00 A18 P01 ME 0550  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 0  flag0 0                             
0034 41 54        00 A1A P01 ME 0550  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 1  flag0 0                             
0038 41 54        00 A1C P01 ME 0550  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 0  flag0 0                             
003C 41 54        00 A1E P01 ME 0550  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 1  flag0 0                             
                                         
0000             Thread Local RAM size                                   
                                            else if (lsr == 1)
                                            {
                                                ClearLSRLatch();
0560 47FFF7FF   chan clr_lsr,end.           }
000C 41 58        00 A06 P01 ME 0560  HSR 0     lsr 1  m1 0  m2 0  pin 0  flag1 x  flag0 x                             
000E 41 58        00 A07 P01 ME 0560  HSR 0     lsr 1  m1 0  m2 0  pin 1  flag1 x  flag0 x                             
0010 41 58        00 A08 P01 ME 0560  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 0  flag0 0                             
0014 41 58        00 A0A P01 ME 0560  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 1  flag0 0                             
0018 41 58        00 A0C P01 ME 0560  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 0  flag0 0                             
001C 41 58        00 A0E P01 ME 0560  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 1  flag0 0                             
0022 41 58        00 A11 P01 ME 0560  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 0  flag0 1                             
0026 41 58        00 A13 P01 ME 0560  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 1  flag0 1                             
002A 41 58        00 A15 P01 ME 0560  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 0  flag0 1                             
002E 41 58        00 A17 P01 ME 0560  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 1  flag0 1                             
                                         
0000             Thread Local RAM size                                   
                                            else
                                            {
                                        #ifdef GLOBAL_ERROR_FUNC
0564 FFC116BF   call 22D4,flush.                        Global_Error_Func();
                                        #else
                                                ClearAllLatches();
                                        #endif
0568 6FFFFFFF   end.                        }
056C                                     
0000             Thread Local RAM size                                   
0000             Local RAM requirements for eTPU Function PWM                                   
                                        }

                                        /* Information exported to Host CPU program */

ETPU "C" COMPILER 1.0.7.85                                              PAGE 27


056C                                    #pragma write h, (::ETPUfilename (etpu_pwm_auto.h));
056C                                    #pragma write h, (/*******************************************************************************);
056C                                    #pragma write h, ( * 版权 2015-2016 中国航空工业集团第六三一所第十八研究室                        );
056C                                    #pragma write h, ( *                                                                              );
056C                                    #pragma write h, ( * 对本文件的拷贝、发布、修改或者其他任何用途必须得到中国航空工业集团第六三一所 );
056C                                    #pragma write h, ( * 的书面协议许可。                                                             );
056C                                    #pragma write h, ( *                                                                              );
056C                                    #pragma write h, ( * Copyrights (2015-2016) ACTRI                                                 );
056C                                    #pragma write h, ( * All Right Reserved                                                           );
056C                                    #pragma write h, ( *******************************************************************************);
056C                                    #pragma write h, (                                                                                );
056C                                    #pragma write h, ( *******************************************************************************);
056C                                    #pragma write h, ( * Revision History                                                             );
056C                                    #pragma write h, ( *------------------------------------------------------------------------------);
056C                                    #pragma write h, ( * 2017-12-07, gbo, created                                                     );
056C                                    #pragma write h, ( *******************************************************************************);
056C                                    #pragma write h, ( );
056C                                    #pragma write h, ( *******************************************************************************);
056C                                    #pragma write h, ( * content                                                                      );
056C                                    #pragma write h, ( *------------------------------------------------------------------------------);
056C                                    #pragma write h, ( *  File            : etpuc_pwm_auto.h                                          );
056C                                    #pragma write h, ( *  Description     : PWM输出头文件                                      );
056C                                    #pragma write h, ( *  Call            : 029-89186510                                              );
056C                                    #pragma write h, ( *  该文件由ETPU自动生成，请勿修改！！！                                        );
056C                                    #pragma write h, ( ******************************************************************************/);
056C                                    #pragma write h, (#ifndef _ETPU_PWM_AUTO_H_ );
056C                                    #pragma write h, (#define _ETPU_PWM_AUTO_H_ );
056C                                    #pragma write h, ( );
056C                                    #pragma write h, (/* Function Configuration Information */);
056C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_PWM_FUNCTION_NUMBER) PWM_FUNCTION_NUMBER );
056C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_PWM_TABLE_SELECT) ::ETPUentrytype(PWM) );
056C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_PWM_NUM_PARMS) ::ETPUram(PWM) );
056C                                    #pragma write h, ( );
056C                                    #pragma write h, (/* Host Service Request Definitions */);
056C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_PWM_INIT) PWM_INIT );
056C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_PWM_IMM_UPDATE) PWM_IMMED_UPDATE );
056C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_PWM_CO_UPDATE) PWM_COHERENT_UPDATE );
056C                                    #pragma write h, ( );
056C                                    #pragma write h, (/* Function Mode Bit Definitions - polarity options */);
056C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_PWM_ACTIVEHIGH) PWM_ACTIVE_HIGH  );
056C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_PWM_ACTIVELOW) PWM_ACTIVE_LOW   );
056C                                    #pragma write h, ( );
056C                                    #pragma write h, (/* Parameter Definitions */);
056C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_PWM_PERIOD_OFFSET) ::ETPUlocation (PWM, Period) );
056C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_PWM_ACTIVE_OFFSET) ::ETPUlocation (PWM, ActiveTime) );
056C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_PWM_CO_PERIOD_OFFSET) ::ETPUlocation (PWM, Coherent_Period) );
056C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_PWM_CO_ACTIVE_OFFSET) ::ETPUlocation (PWM, Coherent_ActiveTime));
056C                                    #pragma write h, ( );
056C                                    #pragma write h, (#endif /* _ETPU_PWM_AUTO_H_ */);
056C                                    #pragma write h, ( );

                                        /* FIN */
00000001                                #define FIN_FUNCTION_NUMBER 1
                                        #include "etpuc_fin.c"
                                        /*******************************************************************************

ETPU "C" COMPILER 1.0.7.85                                              PAGE 28


                                         * 版权 2015-2016 中国航空工业集团第六三一所第十八研究室
                                         *
                                         * 对本文件的拷贝、发布、修改或者其他任何用途必须得到中国航空工业集团第六三一所
                                         * 的书面协议许可。
                                         *
                                         * Copyrights (2015-2016) ACTRI
                                         * All Right Reserved
                                         *******************************************************************************

                                         *******************************************************************************
                                         * Revision History
                                         *------------------------------------------------------------------------------
                                         * 2017-12-07, gbo, created
                                         *******************************************************************************

                                         *******************************************************************************
                                         * content
                                         *------------------------------------------------------------------------------
                                         *  File            : etpuc_fin.c
                                         *  Description     : ETPU频率量采集
                                         *  Call            : 029-89186510
                                         ******************************************************************************/
                                        #include <etpuc.h>
                                        #ifndef __ETPUC_H
                                        #define __ETPUC_H

                                        /*
                                         *  eTPU C Code Development System
                                         *
                                         *  Processor register definitions
                                         *  for the eTPU C Code Development System.
                                         *
                                         *  This code may be adapted for any purpose
                                         *  when used with the eTPU C Code Development
                                         *  System.  No warranty is implied or given
                                         *  as to their usability for any purpose.
                                         *
                                         *  (c) Copyright 2002-2004 Byte Craft Limited
                                         *  421 King St.N., Waterloo, ON, Canada, N2J 4E4
                                         *  VOICE: 1 (519) 888 6911
                                         *  FAX  : 1 (519) 746 6751
                                         *  email: support@bytecraft.com
                                         *
                                         *  Byte Craft Limited
                                         *  Waterloo, Ontario
                                         *  Canada N2J 4E4
                                         *  (519) 888-6911
                                         *
                                         *  Walter Banks
                                         *
                                         * Revision history
                                         * ----------------
                                         * V0.90  WB    Nov 2003  First pre-release of etpuc.h based on V1.10 etpu.h with
                                         *                        changes to reflect eTPU naming conventions
                                         * V1.00  WB    Nov 2003  First release changes to the channel fields to reflect

ETPU "C" COMPILER 1.0.7.85                                              PAGE 29


                                         *                        naming conventions for eTPU
                                         * V1.01  WB    Dec 2003  Corrected definitions of pin_opacA and pin_opacB
                                         *
                                         *
                                         *
                                         *  All of the eTPU registers can be directly accessed from C
                                         *

                                             register_ac        ac   ;      // 24 bits
                                             register_b         b    ;      // 24 bits
                                             register_c         c    ;      // 24 bits
                                             register_d         d    ;      // 24 bits
                                             register_chan      chan ;      //  5 bits
                                             register_diob      diob ;      // 24 bits
                                             register_erta      erta ;      // 24 bits
                                             register_ertb      ertb ;      // 24 bits
                                             register_link      link ;      //  8 bits
                                             register_mach      mach ;      // 24 bits
                                             register_macl      macl ;      // 24 bits
                                             register_p         p    ;      // 24 bits
                                             register_rar       rar  ;      // 14 bits
                                             register_sr        sr   ;      // 24 bits
                                             register_tcr1      tcr1 ;      // 24 bits
                                             register_tcr2      tcr2 ;      // 24 bits
                                             register_tpr       tpr  ;      // 16 bits
                                             register_trr       trr  ;      // 24 bits
                                             register_chan_base chan_base;  // 24 bits
                                        */

                                        /* The following registers are defined for
                                           eTPU C application code */

                                             register_chan       chan ;       //  5 bits
                                             register_erta       erta ;       // 24 bits
                                             register_ertb       ertb ;       // 24 bits
                                             register_tcr1       tcr1 ;       // 24 bits
                                             register_tcr2       tcr2 ;       // 24 bits
                                             register_tpr        tpr  ;       // 16 bits
                                             register_trr        trr  ;       // 24 bits
                                             register_chan_base  chan_base;   // 24 bits
                                             register_link       link;        // 8 bits

                                        /*
                                           The link request can be set by copying the
                                           channel number into the link register. The
                                           following definition does this.
                                         */

                                        #define link_request(channel) link = channel

                                        /*
                                         *
                                         *
                                         *  All of the eTPU channel fields are predefined as a
                                         *  large C structure (chan_struct) by the eTPU C compiler.

ETPU "C" COMPILER 1.0.7.85                                              PAGE 30


                                         *
                                         *  struct chan {
                                         *               CIRC   int : 2 ;
                                         *               ERWA   int : 1 ;
                                         *               ERWB   int : 1 ;
                                         *               FLC    int : 3 ;
                                         *               IPACA  int : 3 ;
                                         *               IPACB  int : 3 ;
                                         *               LSR    int : 1 ;  // w test
                                         *               MRLA   int : 1 ;  // w test
                                         *               MRLB   int : 1 ;  // w test
                                         *               MRLE   int : 1 ;
                                         *               MTD    int : 2 ;
                                         *               OPACA  int : 3 ;
                                         *               OPACB  int : 3 ;
                                         *               PDCM   int : 4 ;
                                         *               PIN    int : 3 ;
                                         *               TBSA   int : 4 ;
                                         *               TBSB   int : 4 ;
                                         *               TDL    int : 1 ;
                                         *               SMPR   int : 2 ;
                                         * State Resolution
                                         *               FLAG0  int : 1 ;  // w only also defined in FLC
                                         *               FLAG1  int : 1 ;
                                         * Channel Flags
                                         *               FM0    int : 1 ;
                                         *               FM1    int : 1 ;
                                         *         //    LSR    int : 1 ;  // also channel fields
                                         *         //    MRLA   int : 1 ;  // also channel fields
                                         *         //    MRLB   int : 1 ;  // also channel fields
                                         *               PSS    int : 1 ;
                                         *               PSTI   int : 1 ;
                                         *               PSTO   int : 1 ;
                                         *               TDLA   int : 1 ;
                                         *               TDLB   int : 1 ;
                                         *              }
                                         ***/

                                        chan_struct channel;
                                        register_cc        CC;

                                        #define erwA       channel.ERWA
                                        #define erwB       channel.ERWB

                                        #define flc        channel.FLC
                                        #define ipacA      channel.IPACA
                                        #define ipacB      channel.IPACB
                                        #define lsr        channel.LSR

                                        #define mrlA       channel.MRLA
                                        #define mrlB       channel.MRLB
                                        #define mrle       channel.MRLE
                                        #define mtd        channel.MTD
                                        #define opacA      channel.OPACA
                                        #define opacB      channel.OPACB

ETPU "C" COMPILER 1.0.7.85                                              PAGE 31


                                        #define pdcm       channel.PDCM
                                        #define pin        channel.PIN
                                        #define act_unitA  channel.TBSA
                                        #define act_unitB  channel.TBSB
                                        #define tdl        channel.TDL
                                        #define flag0      channel.FLAG0
                                        #define flag1      channel.FLAG1
                                        #define fm0        channel.FM0
                                        #define fm1        channel.FM1
                                        #define pss        channel.PSS
                                        #define psti       channel.PSTI
                                        #define psto       channel.PSTO
                                        #define tdlA       channel.TDLA
                                        #define tdlB       channel.TDLB


                                        // IPAC 1,2
                                        #define no_detect                 0
                                        #define low_high                  1
                                        #define high_low                  2
                                        #define any_trans                 3
                                        #define detect_input_0_on_match   4
                                        #define detect_input_1_on_match   5
                                        #define no_change_ipac            7

                                        // OPAC 1,2  fields

                                        #define match_no_change   0
                                        #define match_high        1
                                        #define match_low         2
                                        #define match_toggle      3
                                        #define opac_high         1
                                        #define opac_low          2
                                        #define toggle            3
                                        #define opac_high_low     4
                                        #define opac_low_high     5
                                        #define transition_low    4
                                        #define transition_high   5
                                        #define transition_toggle 6

                                        // PDCM fields
                                        #define em_b_st  0              //Either Match, Blocking, Single Transition
                                        #define em_b_dt  1              //Either Match, Blocking, Double Transition
                                        #define em_nb_st 2              //Either Match, NonBlocking, Single Transition
                                        #define em_nb_dt 3              //Either Match, NonBlocking, Double Transition
                                        #define m2_st    4              //Match2, Single, Transition
                                        #define m2_dt    5              //Match2, Double, Transition
                                        #define bm_st    6              //Both Match, Single Transition
                                        #define bm_dt    7              //Both Match, Double Transition
                                        #define m2_o_st  8              //Match2, Ordered, Single Transition
                                        #define m2_o_dt  9              //Match2, Ordered, Double Transition
                                        #define sm_st_e  0xE                //Single Match, Single Transition, Enhanced
                                        #define sm_st    0xC                //Single Match, Single Transition
                                        #define sm_dt    0xD                //Single Match, Double Transition


ETPU "C" COMPILER 1.0.7.85                                              PAGE 32


                                        // Time Bases Selection for match and capture
                                        #define Mtcr1_Ctcr1_ge       0      //Match tcr1, Capture tcr1, greater than
                                        #define Mtcr2_Ctcr1_ge       1      //Match tcr2, Capture tcr1, greater than
                                        #define Mtcr1_Ctcr2_ge       2      //Match tcr1, Capture tcr2, greater than
                                        #define Mtcr2_Ctcr2_ge       3      //Match tcr2, Capture tcr2, greater than
                                        #define Mtcr1_Ctcr1_eq       4      //Match tcr1, Capture tcr1, equal
                                        #define Mtcr2_Ctcr1_eq       5      //Match tcr2, Capture tcr1, equal
                                        #define Mtcr1_Ctcr2_eq       6      //Match tcr1, Capture tcr2, equal
                                        #define Mtcr2_Ctcr2_eq       7      //Match tcr2, Capture tcr2, equal

                                        #define enable_output_buffer  8     // TBSx[3] = 1, TBSx[2:0] = 000
                                        #define disable_output_buffer 9     // TBSx[3] = 1, TBSx[2:0] = 001
                                        #define do_nothing       15     // TBSx[3] = 1, TBSx[2:0] = 111

                                        // Time Bases Selection for transition and capture
                                        #define Capture_tcr1        0       //TBSx[2] = 0
                                        #define Capture_tcr2        2       //TBSx[2] = 1

                                        // Tooth Program Register structure

                                        struct tpr_struct {
                                          int TICKS   : 10;
                                          int TPR10   : 1;
                                          int HOLD    : 1;
                                          int IPH     : 1;
                                          int MISSCNT : 2;
                                          int LAST    : 1;
                                          } ;

                                        // pin definitions
                                        //   pin = pin_high;
                                        #define pin_opacA  0
                                        #define pin_opacB  1
                                        #define pin_high   2
                                        #define pin_low    4

                                        #endif /* __ETPUC_H */

                                        #include <eTPUc_common.h>
                                        #ifndef __ETPUC_COMMON_H
                                        #define __ETPUC_COMMON_H

                                        /********************************************************************************

                                         FILE NAME: etpuc_common.h

                                         COPYRIGHT (c) ASH WARE, Byte Craft Limited, Freescale 2002-2004.
                                         All Rights Reserved.

                                         VERSION:  1.0

                                         This file is maintained as part of the support for the eTPU_C
                                         development tools by Byte Craft Limited.

                                         This code may be adapted for any purpose when used with the eTPU_C

ETPU "C" COMPILER 1.0.7.85                                              PAGE 33


                                         Code Development System.  No warranty is implied or given as to their
                                         usability for any purpose.

                                         Portions of this file are governed by the following copyrights and
                                         terms:

                                         (c) Freescale 2002-2004 FREESCALE, INC. All Rights Reserved.
                                         *  You are hereby granted a copyright license to use, modify, and
                                         *  distribute the SOFTWARE so long as this entire notice is
                                         *  retained without alteration in any modified and/or redistributed
                                         *  versions, and that such modified versions are clearly identified
                                         *  as such. No licenses are granted by implication, estoppel or
                                         *  otherwise under any patents or trademarks of Freescale, Inc. This
                                         *  software is provided on an "AS IS" basis and without warranty.
                                         *
                                         *  To the maximum extent permitted by applicable law, FREESCALE
                                         *  DISCLAIMS ALL WARRANTIES WHETHER EXPRESS OR IMPLIED, INCLUDING
                                         *  IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
                                         *  PURPOSE AND ANY WARRANTY AGAINST INFRINGEMENT WITH REGARD TO THE
                                         *  SOFTWARE (INCLUDING ANY MODIFIED VERSIONS THEREOF) AND ANY
                                         *  ACCOMPANYING WRITTEN MATERIALS.
                                         *
                                         *  To the maximum extent permitted by applicable law, IN NO EVENT
                                         *  SHALL FREESCALE BE LIABLE FOR ANY DAMAGES WHATSOEVER (INCLUDING
                                         *  WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
                                         *  INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR OTHER PECUNIARY
                                         *  LOSS) ARISING OF THE USE OR INABILITY TO USE THE SOFTWARE.
                                         *
                                         *  Freescale assumes no responsibility for the maintenance and support
                                         *  of this software

                                         (c) Copyright 2002-2004 Byte Craft Limited
                                         421 King St.N., Waterloo, ON, Canada, N2J 4E4
                                         VOICE: 1 (519) 888 6911
                                         email: support@bytecraft.com

                                         (c) Copyright 2002-2004 ASH WARE

                                        ================================================================================

                                        DESCRIPTION: This file defines the application-friendly macros,
                                        functions for common tasks like channel set up and register control
                                        field access.

                                        ================================================================================

                                        SOURCES:

                                        etpuc_common.h is based on the following header files commonly used by
                                        the eTPU development community:

                                        AshWareETpu.h - developed by Andy Klumpp from ASH WARE
                                        Mike.h - developed by Mike Pauwels from Freescale
                                        etpu_common.h - developped by Ming Li from Freescale


ETPU "C" COMPILER 1.0.7.85                                              PAGE 34


                                        Jeff Loeliger from Freescale and Walter Banks from Byte Craft
                                        also made significant contibutions.

                                        ================================================================================
                                         UPDATE HISTORY
                                         REV      AUTHOR        DATE                DESCRIPTION OF CHANGE
                                         ---      -------      --------    ---------------------
                                         0.0      Ming Li      10/30/03    Initial creation
                                         0.1      Ming Li      11/12/03    Updated to incorporate comments from eTPU
                                                                           development community.
                                         0.2      Walter Banks 15 Dec 03   Made changes to be reflect definitions in
                                                                           eTPUc.h
                                                                           Corrected IsTransALatched()
                                                                                     IsTransBLatched()
                                                                           Added missing definitions
                                                                                     set_pin_per_opacA
                                                                                     set_pin_per_opacB
                                                                                     force_pin_high
                                                                                     force_pin_low
                                                                           Corrected opac1 to opacA
                                                                                     opac2 to opacB

                                         0.3      Walter Banks  5 Jan 04   Corrected opacB = pin_action; to
                                                                               opacA = pin_action;

                                         0.4     J. Loeliger    21/Jan/04  Cleared up reorganized and added more:
                                                                           -Moved TRUE & FALSE to top and added
                                                                              conditional
                                                                           -Moved entry conditions up and added macros
                                                                              for all conditions
                                                                           -Merged with AshWareETpu.h
                                                                              -Removed commet with of PDCM names.
                                                                           -Grouped latches and flags together.
                                                                             -added new set and clear for latches and
                                                                                flags
                                                                           -Merged output pin value to 1 set rather
                                                                              than 2
                                                                           -Added long channel mode names.
                                                                           -Added SetupMatch_AB for better
                                                                              optimization
                                                                           -Added match only conditions for output
                                                                              functions.
                                                                           -Added new ActionUnintA/B macros
                                                                           -Added new Pin macro
                                                                           -And more.
                                         0.5     J. Loeliger     12/Feb/04 -Changed DetectTrans to OnTrans.
                                         0.6     J. Loeliger     30/Mar/04 -Added SetupMatchB and fixed some old
                                                                             references to 1 & 2 -> A & B
                                         0.7     J. Loeliger     16/Apr/04 -Changed Disable match (MRLE) to =0
                                         0.8     J. Loeliger     27/Apr/04 -Fixed Disable/Enable match in thread,
                                                                              they were swapped.
                                         0.9     J. Loeliger     10/May/04 -Added support for OBE with new
                                                 M. Brejl                   EnableOutputBuffer()/DisableOutputBuffer()
                                                                            Removed all // comments. Changed Motorola
                                                                            to Freescale.

ETPU "C" COMPILER 1.0.7.85                                              PAGE 35


                                                                            Fixed spelling mistake in GetCurentChanNum

                                         0.4     Karen McMurray  19 May 04  Changed all ertA to erta
                                                                                        ertB to ertb.

                                         1.0     Kirk Zurell     11 Aug 04  Integrated etpuc_common.h from J. Loeliger
                                                                            and etpuc_common.h from Byte Craft Limited.
                                                                            Removed tabs & made comments more sustainable.
                                                                            Conditionalized some definitions to be more
                                                                            economical on symbols.

                                                                            Divider lines have 80 asterices.

                                        */



                                        /********************************************************************************/

                                        /* This file depends upon definitions from etpuc.h */

                                        #ifndef __ETPUC_H
                                        #include <etpuc.h>
                                        #endif /* __ETPUC_H */


                                        /********************************************************************************/

                                        /* Constant definitions */

                                        #ifndef TRUE
                                        #define TRUE        1
                                        #endif

                                        #ifndef FALSE
                                        #define FALSE       0
                                        #endif


                                        /********************************************************************************/

                                        /* State Resolution Flags, and other latches */

                                        /* Clear() definitions */
                                        #define LSRLatch      lsr
                                        #define LatchedMatchA mrlA
                                        #define LatchedMatchB mrlB
                                        #define TransLatch    tdl

                                        /* Macros */

                                        /* Set flag0 or flag1
                                           Usage: Set(flag0 | flag1);*/

                                        #define Set(cond)     (cond = 1)

ETPU "C" COMPILER 1.0.7.85                                              PAGE 36



                                        /* Clear a flag
                                           Usage: Clear(flag0 | flag1 | LSRLatch | lsr | MatchALatch | mrlA |
                                                         MatchBLatch | mrlB | TransLatch | tdl);         */

                                        #define Clear(cond)   (cond = 0)

                                        /* SYNONYMS */
                                        /* Flag 0 & flag 1 */
                                        #define ClrFlag0()  (channel.FLAG0 = 0)
                                        #define SetFlag0()  (channel.FLAG0 = 1)
                                        #define ClrFlag1()  (channel.FLAG1 = 0)
                                        #define SetFlag1()  (channel.FLAG1 = 1)


                                        #define FunctionMode0          channel.FM0
                                        #define IsFunctionMode0()     (channel.FM0==1)
                                        #define IsSampledFuncMode0()  (channel.FM0==1)
                                        #define IsLatchedFuncMode0()  (channel.FM0==1)

                                        #define FunctionMode1          channel.FM1
                                        #define IsFunctionMode1()     (channel.FM1==1)
                                        #define IsSampledFuncMode1()  (channel.FM1==1)
                                        #define IsLatchedFuncMode1()  (channel.FM1==1)


                                        /********************************************************************************/

                                        /* Writing the match registers and enabling/disabling the Match
                                           Recognition Latch Enable */

                                        #define EnableMatchA()                 (channel.ERWA = 0)
                                        #define EnableMatchB()                 (channel.ERWB = 0)
                                        #define DisableMatch()                 (channel.MRLE = 0)

                                        /* SYNONYMS */
                                        #define WriteErtAToMatchAAndEnable()   channel.ERWA = 0
                                        #define WriteErtBToMatchBAndEnable()   channel.ERWB = 0
                                        #define DisableMatchDetection();       channel.MRLE = 0


                                        /* Read capture register */
                                        #define GetCapRegA()  (erta)
                                        #define GetCapRegB()  (ertb)

                                        /* Clear Latch */
                                        #define ClearLSRLatch()       (channel.LSR  = 0)

                                        #define ClearMatchALatch()    (channel.MRLA = 0)
                                        #define ClearMatchBLatch()    (channel.MRLB = 0)

                                        #define ClearTransLatch()     (channel.TDL = 0)

                                        /* SYNONYMS */
                                        #define ClearLinkServiceRequestEvent() (lsr  = 0)

ETPU "C" COMPILER 1.0.7.85                                              PAGE 37



                                        #define ClearMatchAEvent()    (channel.MRLA = 0)
                                        #define ClearMatchBEvent()    (channel.MRLB = 0)

                                        #define ClearTransitionEvents() (channel.TDL = 0)



                                        /* Test latch conditions */

                                        #define TransitionALatch           channel.TDLA
                                        #define IsTransALatched()         (channel.TDLA==1)

                                        #define TransitionBLatch           channel.TDLB
                                        #define IsTransBLatched()         (channel.TDLB==1)

                                        #define MatchALatch            channel.MRLA
                                        #define IsMatchALatched()     (channel.MRLA==1)

                                        #define MatchBLatch            channel.MRLB
                                        #define IsMatchBLatched()     (channel.MRLB==1)

                                        /* SYNONYMS */
                                        #define IsLatchedTransitionA()    (channel.TDLA==1)
                                        #define IsLatchedTransitionB()    (channel.TDLB==1)
                                        #define IsLatchedMatchA()         (channel.MRLA==1)
                                        #define IsLatchedMatchB()         (channel.MRLB==1)



                                        /********************************************************************************/

                                        /* Enabling/Disabling Event Handling */

                                        #define EnableEventHandling()                   (channel.MTD = 0)
                                        #define DisableEventHandling()                  (channel.MTD = 1)

                                        /* SYNONYMS */
                                        #define EnableMatchAndTransitionEventHandling()  channel.MTD = 0
                                        #define DisableMatchAndTransitionEventHandling() channel.MTD = 1


                                        /********************************************************************************/

                                        /* Semaphore Operations */

                                        #define IsSemaphoreLocked()   (channel.SMPR == 1)
                                        #define LockSemaphore(num)    (channel.SMPR = num)
                                        #define FreeSemaphore()       (channel.SMPR = -1)


                                        /********************************************************************************/

                                        /* Exceptions */


ETPU "C" COMPILER 1.0.7.85                                              PAGE 38


                                        /* Channel control macros */
                                        #define SetChannelInterrupt()       (channel.CIRC = 0)
                                        #define SetChannelInterruptRequest()(channel.CIRC = 0)

                                        #define SetDataTransferInterrupt()        (channel.CIRC = 1)
                                        #define SetDataTransferInterruptRequest() (channel.CIRC = 1)

                                        #define SetGlobalException()  (channel.CIRC = 2)

                                        /* Channel control */

                                        /* Generate the link service request to channel[ChNum] */
                                        #define LinkToChannel(ChNum)            (link = ChNum)
                                        #define LinkTo(num)                 link = num;
                                        #define LinkToEngine1Chan(num)      link = (num | (1<<6))
                                        #define LinkToEngine2Chan(num)      link = (num | (2<<6))
                                        #define LinkToOtherEngineChan(num)  link = (num | (3<<6))

                                        /* switch to specified channel from current channel */
                                        #define SwitchToChannel(ChNum)      (chan = ChNum)

                                        /* return current channel number */
                                        #define GetCurrentChanNum()         (chan)

                                        /* branch condition */
                                        #define LinkServiceRequest     channel.LSR
                                        #define IsLinkReqActive()     (channel.LSR==1)
                                        #define IsSampledLink()       (channel.LSR==1)
                                        #define IsLatchedLink()       (channel.LSR==1)


                                        /********************************************************************************/

                                        /* Entry Conditions Definition */

                                        /* Usage: use these in the if()/else if()/else structure in an
                                           ETPU_function */

                                        #define HostServiceRequest               hsr
                                        #define IsHostServiceRequestEvent(num)   (hsr==num)

                                        #define MatchA_TransB                    (m1==1)
                                        #define matchA_transB                    (m1==1)
                                        #define IsMatchAOrTransitionBEvent()     (m1==1)

                                        #define MatchB_TransA                    (m2==1)
                                        #define matchB_transA                    (m2==1)
                                        #define IsMatchBOrTransitionAEvent()     (m2==1)

                                        #define linkRequest                      (lsr==1)
                                        #define IsLinkServiceRequestEvent()      (lsr==1)

                                        /* For output-only functions */
                                        #define MatchA                           (m1==1)
                                        #define MatchB                           (m2==1)

ETPU "C" COMPILER 1.0.7.85                                              PAGE 39




                                        /********************************************************************************/

                                        /* Predefined Channel Modes (PDCM) */

                                        #define SetChannelMode(mode)        (channel.PDCM = mode)
                                        #define channel_setup channel.PDCM

                                        /* Usage:       channel_setup = PDCM_constant

                                        PDCM_constants are taken from etpuc.h:
                                        em_b_st         Either Match, Blocking, Single Transition
                                        em_b_dt         Either Match, Blocking, Double Transition
                                        em_nb_st        Either Match, NonBlocking, Single Transition
                                        em_nb_dt        Either Match, NonBlocking, Double Transition
                                        m2_st           Match2, Single, Transition
                                        m2_dt           Match2, Double, Transition
                                        bm_st           Both Match, Single Transition
                                        bm_dt           Both Match, Double Transition
                                        m2_o_st         Match2, Ordered Single Blocking Transition
                                        m2_o_dt         Match2, Ordered Double Transition
                                        sm_st_e         Single Match, Single Transition Enhanced
                                        sm_st           Single Match, Single Transition
                                        sm_dt           Single Match, Double Transition
                                        */

                                        /* SYNONYMS */
                                        #define EitherMatchBlockingSingleTransition()     channel.PDCM = em_b_st
                                        #define EitherMatchBlockingDoubleTransition()     channel.PDCM = em_b_dt
                                        #define EitherMatchNonBlockingSingleTransition()  channel.PDCM = em_nb_st
                                        #define EitherMatchNonBlockingDoubleTransition()  channel.PDCM = em_nb_dt
                                        #define Match2SingleTransition()                  channel.PDCM = m2_st
                                        #define Match2DoubleTransition()                  channel.PDCM = m2_dt
                                        #define BothMatchSingleTransition()               channel.PDCM = bm_st
                                        #define BothMatchDoubleTransition()               channel.PDCM = bm_dt
                                        #define Match2OrderedSingleBlockingTransition()   channel.PDCM = m2_o_st
                                        #define Match2OrderedDoubleTransition()           channel.PDCM = m2_o_dt
                                        #define SingleMatchSingleTransitionEnhanced()     channel.PDCM = sm_st_e
                                        #define SingleMatchSingleTransition()             channel.PDCM = sm_st
                                        #define SingleMatchDoubleTransition()             channel.PDCM = sm_dt


                                        #define ClearAllLatches()         \
                                                (lsr = 0);(mrlA = 0);(mrlB = 0);(tdl = 0);


                                        /********************************************************************************/

                                        /* Complex Macros */

                                        /* These macros should provide the most optimized way of doing things.
                                           They should be in the best order for optimizing. The compiler might
                                           be able to identify this code for optimization. */


ETPU "C" COMPILER 1.0.7.85                                              PAGE 40


                                        #define SetupMatchA(reference) \
                                                erta = reference;      \
                                                EnableMatchA();        \
                                                ClearMatchALatch();

                                        #define SetupMatchB(reference) \
                                                ertb = reference;      \
                                                EnableMatchB();        \
                                                ClearMatchBLatch();

                                        /* These are ONLY useful for init. and if you know which TCR you want
                                           to use. Latches are cleared at the end so it can be combined with
                                           other latches. */

                                        #define ConfigMatch_AB() \
                                                WriteErtAToMatchAAndEnable(); \
                                                WriteErtBToMatchBAndEnable(); \
                                                EnableMatchA();        \
                                                EnableMatchB();        \
                                                EnableEventHandling();\
                                                ClearMatchALatch();\
                                                ClearMatchBLatch();

                                        #define SetupMatch_A(reference, timebase_comparator, pin_action) \
                                                erta = reference; \
                                                act_unitA = timebase_comparator; \
                                                opacA = pin_action; \
                                                EnableMatchA();        \
                                                ClearMatchALatch();\
                                                EnableEventHandling();

                                        #define SetupMatch_B(reference, timebase_comparator, pin_action) \
                                                ertb = reference; \
                                                act_unitB = timebase_comparator; \
                                                opacB = pin_action; \
                                                EnableMatchB();        \
                                                ClearMatchBLatch();\
                                                EnableEventHandling();

                                        #define SetupCaptureTrans_A(timebase, pin_trans) \
                                                act_unitA = timebase;\
                                                ipacA = pin_trans;\
                                                ClearTransLatch();\
                                                EnableEventHandling();

                                        #define SetupCaptureTrans_B(timebase, pin_trans) \
                                                act_unitB = timebase;\
                                                ipacB = pin_trans;\
                                                ClearTransLatch();\
                                                EnableEventHandling();


                                        /********************************************************************************/

                                        /* Action Units */

ETPU "C" COMPILER 1.0.7.85                                              PAGE 41



                                        /* Usage: ActionUnitA( MatchTCR1 | MatchTCR2,
                                                               CaptureTCR1 | CaptureTCR2,
                                                               GreaterEqual | EqualOnly ); */

                                        #define ActionUnitA( match, capture, compare)   (act_unitA=match##capture##compare)
                                        #define ActionUnitB( match, capture, compare)   (act_unitB=match##capture##compare)

                                        #define MatchTCR1    Mtcr1_
                                        #define MatchTCR2    Mtcr2_
                                        #define CaptureTCR1  Ctcr1_
                                        #define CaptureTCR2  Ctcr2_
                                        #define GreaterEqual ge
                                        #define EqualOnly    eq

                                        /* SYNONYMS */
                                        /* Action Unit A, Time Bases for match and capture */
                                        #define TimeBaseAMatchTcr1CaptureTcr1GreaterEqual()      channel.TBSA = Mtcr1_Ctcr1_ge
                                        #define TimeBaseAMatchTcr2CaptureTcr1GreaterEqual()      channel.TBSA = Mtcr2_Ctcr1_ge
                                        #define TimeBaseAMatchTcr1CaptureTcr2GreaterEqual()      channel.TBSA = Mtcr1_Ctcr2_ge
                                        #define TimeBaseAMatchTcr2CaptureTcr2GreaterEqual()      channel.TBSA = Mtcr2_Ctcr2_ge
                                        #define TimeBaseAMatchTcr1CaptureTcr1ExactlyEqual()      channel.TBSA = Mtcr1_Ctcr1_eq
                                        #define TimeBaseAMatchTcr2CaptureTcr1ExactlyEqual()      channel.TBSA = Mtcr2_Ctcr1_eq
                                        #define TimeBaseAMatchTcr1CaptureTcr2ExactlyEqual()      channel.TBSA = Mtcr1_Ctcr2_eq
                                        #define TimeBaseAMatchTcr2CaptureTcr2ExactlyEqual()      channel.TBSA = Mtcr2_Ctcr2_eq

                                        /* Action Unit B, Time Bases for match and capture */
                                        #define TimeBaseBMatchTcr1CaptureTcr1GreaterEqual()      channel.TBSB = Mtcr1_Ctcr1_ge
                                        #define TimeBaseBMatchTcr2CaptureTcr1GreaterEqual()      channel.TBSB = Mtcr2_Ctcr1_ge
                                        #define TimeBaseBMatchTcr1CaptureTcr2GreaterEqual()      channel.TBSB = Mtcr1_Ctcr2_ge
                                        #define TimeBaseBMatchTcr2CaptureTcr2GreaterEqual()      channel.TBSB = Mtcr2_Ctcr2_ge
                                        #define TimeBaseBMatchTcr1CaptureTcr1ExactlyEqual()      channel.TBSB = Mtcr1_Ctcr1_eq
                                        #define TimeBaseBMatchTcr2CaptureTcr1ExactlyEqual()      channel.TBSB = Mtcr2_Ctcr1_eq
                                        #define TimeBaseBMatchTcr1CaptureTcr2ExactlyEqual()      channel.TBSB = Mtcr1_Ctcr2_eq
                                        #define TimeBaseBMatchTcr2CaptureTcr2ExactlyEqual()      channel.TBSB = Mtcr2_Ctcr2_eq



                                        /********************************************************************************/

                                        /* Pin output buffer */

                                        #define EnableOutputBuffer()           (channel.TBSA = enable_output_buffer)
                                        #define DisableOutputBuffer()          (channel.TBSA = disable_output_buffer)


                                        /********************************************************************************/

                                        /* Pin control */

                                        /* Pin() definitions */
                                        #define SetHigh pin_high
                                        #define SetLow  pin_low
                                        #define PerPacA pin_opacA
                                        #define PerPacB pin_opacB

ETPU "C" COMPILER 1.0.7.85                                              PAGE 42



                                        /* Set Output Pin
                                           Usage: Pin( SetHigh | SetLow | PerPacA | PerPacB ); */
                                        #define Pin( state )          (channel.PIN=state)

                                        /* Immediate output pin */
                                        #define set_pin_per_opacA  pin_opacA
                                        #define set_pin_per_opacB  pin_opacB
                                        #define force_pin_high     pin_high
                                        #define force_pin_low      pin_low

                                        #define SetPinHigh()          (channel.PIN=force_pin_high)
                                        #define SetPinLow()           (channel.PIN=force_pin_low)
                                        #define SetPinPerPacA()       (channel.PIN=set_pin_per_opacA)
                                        #define SetPinPerPacB()       (channel.PIN=set_pin_per_opacB)

                                        /* Reading the pin states: branch conditions */

                                        #define SampledInputPin            channel.PSS
                                        #define IsLatchedInputPin()        (channel.PSS==1)
                                        #define IsInputPinHigh()           (channel.PSS==1)

                                        #define CurrentInputPin            channel.PSTI
                                        #define IsCurrentInputPin()        (channel.PSTI==1)

                                        #define CurrentOutputPin           channel.PSTO
                                        #define IsCurrentOutputPin()       (channel.PSTO==1)

                                        /* SYNONYMS */
                                        #define IsSampledInputPinHigh()    (channel.PSS==1)
                                        #define IsLatchedInputPinHigh()    (channel.PSS==1)
                                        #define IsCurrentInputPinHigh()    (channel.PSTI==1)
                                        #define IsCurrentOutputPinHigh()   (channel.PSTO==1)



                                        /********************************************************************************/

                                        /* Output Pin Action */

                                        #define NoChange    match_no_change
                                        #define PinHigh     match_high
                                        #define PinLow      match_low
                                        #define PinToggle   match_toggle

                                        /* Usage: OnMatchA( NoChange | PinHigh | PinLow | PinToggle ); */
                                        #define OnMatchA(action)      (opacA = action)
                                        #define OnMatchB(action)      (opacB = action)

                                        /* SYNONYMS */
                                        /* Action Unit A, Output Pin Actions */
                                        #define OnMatchAPinNoChange()      channel.OPACA = match_no_change
                                        #define OnMatchAPinHigh()          channel.OPACA = match_high
                                        #define OnMatchAPinLow()           channel.OPACA = match_low
                                        #define OnMatchAPinToggle()        channel.OPACA = match_toggle

ETPU "C" COMPILER 1.0.7.85                                              PAGE 43


                                        #define OnInputActionAPinLow()     channel.OPACA = transition_low
                                        #define OnInputActionAPinHigh()    channel.OPACA = transition_high
                                        #define OnInputActionAPinToggle()  channel.OPACA = transition_toggle

                                        /* Action Unit B, Output Pin Actions */
                                        #define OnMatchBPinNoChange()      channel.OPACB = match_no_change
                                        #define OnMatchBPinHigh()          channel.OPACB = match_high
                                        #define OnMatchBPinLow()           channel.OPACB = match_low
                                        #define OnMatchBPinToggle()        channel.OPACB = match_toggle
                                        #define OnInputActionBPinLow()     channel.OPACB = transition_low
                                        #define OnInputActionBPinHigh()    channel.OPACB = transition_high
                                        #define OnInputActionBPinToggle()  channel.OPACB = transition_toggle


                                        /********************************************************************************/

                                        /* Input Pin Action */

                                        #define NoDetect  no_detect
                                        #define LowHigh   low_high
                                        #define HighLow   high_low
                                        #define AnyTrans  any_trans

                                        /* Usage: DetectTransA( no_detect | low_high | high_low | any_trans | ...); */
                                        #define OnTransA(action)     (ipacA = action)
                                        #define OnTransB(action)     (ipacB = action)

                                        /* SYNONYMS */
                                        /* Action Unit A, Input Pin Edge Detection */
                                        #define DetectADisable()        channel.IPACA = no_detect
                                        #define DetectARisingEdge()     channel.IPACA = low_high
                                        #define DetectAFallingEdge()    channel.IPACA = high_low
                                        #define DetectAAnyEdge()        channel.IPACA = any_trans
                                        #define DetectALowOnMatchA()    channel.IPACA = detect_input_0_on_match
                                        #define DetectAHighOnMatchA()   channel.IPACA = detect_input_1_on_match

                                        /* Action Unit B, Input Pin Edge Detection */
                                        #define DetectBDisable()        channel.IPACB = no_detect
                                        #define DetectBRisingEdge()     channel.IPACB = low_high
                                        #define DetectBFallingEdge()    channel.IPACB = high_low
                                        #define DetectBAnyEdge()        channel.IPACB = any_trans
                                        #define DetectBLowOnMatchA()    channel.IPACB = detect_input_0_on_match
                                        #define DetectBHighOnMatchA()   channel.IPACB = detect_input_1_on_match


                                        /********************************************************************************/

                                        /* Intrinsics synonyms */

                                        /* Matches in Threads */
                                        #define DisableMatchesInThread()    match_disable()
                                        #define EnableMatchesInThread()     match_enable()




ETPU "C" COMPILER 1.0.7.85                                              PAGE 44


                                        #endif /* __ETPUC_COMMON_H */

                                        /* 如果作为函数集，则放置在对应的位置，否则仅有一个函数 */
                                        #ifdef FIN_FUNCTION_NUMBER
0001                                    #pragma ETPU_function FreqIn, alternate @ FIN_FUNCTION_NUMBER;
                                        #else
                                        #pragma ETPU_function FreqIn, alternate;
                                        #endif

                                        /* 初始化线程 */
00000007                                #define FIN_INIT            7
                                        /* 同步更新计算频率需要等待的输入信号的周期数 */
00000005                                #define FIN_PERIOD_UPDATE   5

                                        /* 是否使用TCR1，FunctionMode1使用该参数，仅用于初始化 */
00000000                                #define FIN_USE_TCR1        0
                                        /* 检测上升沿还是下降沿，FunctionMode0使用该参数，仅用于初始化 */
00000001                                #define FIN_FALLING_EDGE    1
                                        /* 默认的计算频率需要等待的输入信号的周期数 */
00000004                                #define FIN_DEFAULT_CNT     4

                                        /*******************************************************************************
                                         * FreqIn
                                         *
                                         * 描述:ETPU频率量采集，在指定的输入信号周期内，对时基进行计数，并返回计数结果
                                         *      的均值
                                         *
                                         * 参数：
                                         * 输入参数:
                                         *     PeroidCnt: 输入信号的周期数，要求频率采集应在指定周期内计算时基的总数
                                         *     PeriodCntUpdate: 需要更新的输入信号周期数，更新在下次计算周期时生效
                                         *
                                         * 输出参数:
                                         *     Result: 计算得到的输入信号一个周期包含的时基数均值
                                         *
                                         * 备注:
                                         *
                                         * 遗留问题:
                                         ******************************************************************************/
                                        void FreqIn(unsigned int24 Result,
                                                    unsigned int24 PeriodCnt,
                                                    unsigned int24 PeriodCntUpdate)
0001 0005 0009                          {
                                            /* 保存每次计时开始的时基数 */
000D                                        static unsigned int24 startTime;
                                            /* 保存输入信号上升沿发生的次数 */
0011                                         static unsigned int24 edgeTimes;
                                             /* 保存更新周期数的标志 */
0000                                         static unsigned int8 updateFlag;
                                            
                                             /* 初始化线程 */
                                             if (HostServiceRequest == FIN_INIT)
                                             {
                                                    DisableMatchesInThread();
                                                    OnTransA(NoDetect);

ETPU "C" COMPILER 1.0.7.85                                              PAGE 45


                                                    OnTransB(NoDetect);
                                                    Clear(TransLatch);
                                                    Clear(LSRLatch);
                                                
                                                    SingleMatchSingleTransition();
                                                
056C 580FF7F9   chan ipaca = no_detect,         
                    ipacb = no_detect,         
                    sm_st,clr_lsr,         
                    clr_tdl.            
0570 BFFFFF04   ram PRAM17 = #0(24) .                edgeTimes = 0;
0574 CFFFFD00   ram PRAM0 = #0(8) .                 updateFlag = 0;
                                                    /* 若输入信号的周期数不合法则赋值为默认值 */
0578 BFEFFB81   ram p23_0 = PRAM5.                  if (PeriodCnt <= 1)
057C 3AF8FFF4   alu nil = p -1 ,ccs.                {
0580 F4C02C7F   if gt jump 058C,flush.         
0584 1C1F7F9E   alu p = #0x04.                          PeriodCnt = FIN_DEFAULT_CNT;
                                                    }
                                                
                                                    /* 若要求使用TCR1，则使用TCR1，否则使用TCR2 */
0588 BFFFFB81   ram PRAM5 = p23_0.         
                                                    if (FunctionMode1 == FIN_USE_TCR1)
058C F3882CDF   if fm1==1 jump 0598,    
                    flush.              
0590                                                {
                                                        ActionUnitA(MatchTCR1, CaptureTCR1, GreaterEqual);
0590 F7E02CFF   jump 059C,noflush.                            }
0594 4FF0FFFF                           
                    chan tbsa = mtcr1_ctcr1_ge    
                    .                   
0598                                                else
                                                    {
                                                        ActionUnitA(MatchTCR2, CaptureTCR2, GreaterEqual);
0598 4FF3FFFF                           
                    chan tbsa = mtcr2_ctcr2_ge         
                    .                   
059C                                                }
                                                
                                                    /* 只检测一个沿即可 */
                                                if (FunctionMode0 == FIN_FALLING_EDGE)
059C F3C02D5F   if fm0==0 jump 05A8,    
                    flush.              
05A0                                            {
                                                    DetectAFallingEdge();
05A0 F7E02D7F   jump 05AC,noflush.                        }
05A4 5AFFFFFF   chan ipaca = high_low.    
05A8                                            else
                                                {
                                                        DetectARisingEdge();
05A8 59FFFFFF   chan ipaca = low_high.         
05AC                                            }

                                                    EnableEventHandling();
05AC F73FFCFB   chan mtd = enable_mtsr;        }
                    end.                

ETPU "C" COMPILER 1.0.7.85                                              PAGE 46


004A 01 5B        01 A05 P01 MD 056C  HSR 6/7   lsr x  m1 x  m2 x  pin x  flag1 x  flag0 x                             
                                         
0000             Thread Local RAM size                                   
                                            /* 更新计数周期线程 */
                                            else if (HostServiceRequest == FIN_PERIOD_UPDATE)
                                            {
                                                /* 更新计数周期同步进行，该线程仅给出标志 */
05B0 3DFFAFF4   alu p31_24 = 1 .                   updateFlag = 1;
                                                   /* 若新的周期不合法，则清标志 */
05B4 CFFFF980   ram PRAM0 = p31_24.     
05B8 BFEFFB82   ram p23_0 = PRAM9.                 if (PeriodCntUpdate <= 0)
05BC 3BF8FFF4   alu nil = p ,ccs.                  {
05C0 F0C02E5F   if z==0 jump 05C8,flush.         
                                        
05C4 CFFFFD00   ram PRAM0 = #0(8) .                    updateFlag = 0;
                                                   }
05C8 6FFFFFFF   end.                        }
0048 41 6C        01 A04 P01 ME 05B0  HSR 1/4/5 lsr x  m1 x  m2 x  pin x  flag1 x  flag0 x                             
                                         
0000             Thread Local RAM size                                   
                                            /* TDLA服务事件 */
                                            else if (m2 == 1)
                                            {
                                                   /* 第一次检测到上升沿则保存起始时间 */
05CC BFEFFB84   ram p23_0 = PRAM17.                if (edgeTimes == 0)
05D0 3BF8FFF4   alu nil = p ,ccs.                  {
05D4 F0C02EFF   if z==0 jump 05DC,flush.         
                                        
05D8 BFFE7A83   alu p = erta ,ccs;                     startTime = erta;
                    ram PRAM13 = p23_0.         
                                                   }
                                                   /* 累加上升沿次数 */
05DC BFEFFB84   ram p23_0 = PRAM17.                edgeTimes++;
                                                
                                                   /* 到达要求的次数后，计算平均每周期包含的时基数 */
05E0 BDF87A84   alu p = p + 1 ,ccs;     
                    ram PRAM17 = p23_0.    
05E4 BFE80A81   alu a = p ,ccs;                    if (edgeTimes >= PeriodCnt)
                    ram p23_0 = PRAM5.    
05E8 3819FFF4   alu nil = a - p ,ccs.               {
05EC F088306B   if c==1 jump 060C,flush;                   Result = (erta - startTime) / (edgeTimes - 1);
                    ram p23_0 = PRAM13.         
05F0 381E3FD4   alu b = erta - p ,ccs.         
05F4 BFEFFB84   ram p23_0 = PRAM17.         
05F8 3AF80FF4   alu a = p -1 ,ccs.         
05FC 3B330FAE   mdu b div a ,ccs.         
0600 F348301F   if mb==1 jump 0600,flush         
                    .                   
0604 BFD87A80   alu p = macl ,ccs;         
                    ram PRAM1 = p23_0.         
0608 BFFFFF04   ram PRAM17 = #0(24) .                   edgeTimes = 0;
                                               }
                                                
                                               /* 当edgeTimes清零表示即将开始下次检测，则响应次数更新 */
060C BFEFFB84   ram p23_0 = PRAM17.                if (edgeTimes == 0 && updateFlag == 1)

ETPU "C" COMPILER 1.0.7.85                                              PAGE 47


0610 3BF8FFF4   alu nil = p ,ccs.                  {
0614 F0C0319F   if z==0 jump 0630,flush.                
                                        
0618 CFEFF880   ram p31_0 = PRAM0.         
061C 0802FBAA   alu nil = p31_24 ^          
                    #0x000001,ccs.         
0620 F0C0319F   if z==0 jump 0630,flush.                
                                        
0624 BFEFFB82   ram p23_0 = PRAM9.                     PeriodCnt = PeriodCntUpdate;
0628 BFFFFB81   ram PRAM5 = p23_0.         
062C CFFFFD00   ram PRAM0 = #0(8) .                    updateFlag = 0;
                                                   }
                                                
                                                   /* 清空TDL，以便下次检测 */
                                                   ClearTransitionEvents();
0630 6FEFFFFF   chan clr_tdl,end.           }
0060 41 73        01 A10 P01 ME 05CC  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 0  flag0 0                             
0062 41 73        01 A11 P01 ME 05CC  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 0  flag0 1                             
0064 41 73        01 A12 P01 ME 05CC  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 1  flag0 0                             
0066 41 73        01 A13 P01 ME 05CC  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 1  flag0 1                             
0068 41 73        01 A14 P01 ME 05CC  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 0  flag0 0                             
006A 41 73        01 A15 P01 ME 05CC  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 0  flag0 1                             
006C 41 73        01 A16 P01 ME 05CC  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 1  flag0 0                             
006E 41 73        01 A17 P01 ME 05CC  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 1  flag0 1                             
0070 41 73        01 A18 P01 ME 05CC  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 0  flag0 0                             
0072 41 73        01 A19 P01 ME 05CC  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 0  flag0 1                             
0074 41 73        01 A1A P01 ME 05CC  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 1  flag0 0                             
0076 41 73        01 A1B P01 ME 05CC  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 1  flag0 1                             
0078 41 73        01 A1C P01 ME 05CC  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 0  flag0 0                             
007A 41 73        01 A1D P01 ME 05CC  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 0  flag0 1                             
007C 41 73        01 A1E P01 ME 05CC  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 1  flag0 0                             
007E 41 73        01 A1F P01 ME 05CC  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 1  flag0 1                             
                                         
0000             Thread Local RAM size                                   
                                            else
                                            {
                                        #ifdef GLOBAL_ERROR_FUNC
0634 FFC116BF   call 22D4,flush.                           Global_Error_Func();
                                        #else
                                                   ClearAllLatches();
                                        #endif
0638 6FFFFFFF   end.                        }
0040 C1 8D        01 A00 P23 ME 0634  HSR 2/3   lsr x  m1 x  m2 x  pin 0  flag1 x  flag0 0                             
0042 C1 8D        01 A01 P23 ME 0634  HSR 2/3   lsr x  m1 x  m2 x  pin 0  flag1 x  flag0 1                             
0044 C1 8D        01 A02 P23 ME 0634  HSR 2/3   lsr x  m1 x  m2 x  pin 1  flag1 x  flag0 0                             
0046 C1 8D        01 A03 P23 ME 0634  HSR 2/3   lsr x  m1 x  m2 x  pin 1  flag1 x  flag0 1                             
004C C1 8D        01 A06 P23 ME 0634  HSR 0     lsr 1  m1 0  m2 0  pin 0  flag1 x  flag0 x                             
004E C1 8D        01 A07 P23 ME 0634  HSR 0     lsr 1  m1 0  m2 0  pin 1  flag1 x  flag0 x                             
0050 C1 8D        01 A08 P23 ME 0634  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 0  flag0 0                             
0052 C1 8D        01 A09 P23 ME 0634  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 0  flag0 1                             
0054 C1 8D        01 A0A P23 ME 0634  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 1  flag0 0                             
0056 C1 8D        01 A0B P23 ME 0634  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 1  flag0 1                             
0058 C1 8D        01 A0C P23 ME 0634  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 0  flag0 0                             
005A C1 8D        01 A0D P23 ME 0634  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 0  flag0 1                             
005C C1 8D        01 A0E P23 ME 0634  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 1  flag0 0                             

ETPU "C" COMPILER 1.0.7.85                                              PAGE 48


005E C1 8D        01 A0F P23 ME 0634  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 1  flag0 1                             
                                         
0000             Thread Local RAM size                                   
0000             Local RAM requirements for eTPU Function FreqIn                                   
                                        }

                                        /* Information exported to Host CPU program */
063C                                    #pragma write h, (::ETPUfilename (etpu_fin_auto.h));
063C                                    #pragma write h, (/*******************************************************************************);
063C                                    #pragma write h, ( * 版权 2015-2016 中国航空工业集团第六三一所第十八研究室                        );
063C                                    #pragma write h, ( *                                                                              );
063C                                    #pragma write h, ( * 对本文件的拷贝、发布、修改或者其他任何用途必须得到中国航空工业集团第六三一所 );
063C                                    #pragma write h, ( * 的书面协议许可。                                                             );
063C                                    #pragma write h, ( *                                                                              );
063C                                    #pragma write h, ( * Copyrights (2015-2016) ACTRI                                                 );
063C                                    #pragma write h, ( * All Right Reserved                                                           );
063C                                    #pragma write h, ( *******************************************************************************);
063C                                    #pragma write h, (                                                                                );
063C                                    #pragma write h, ( *******************************************************************************);
063C                                    #pragma write h, ( * Revision History                                                             );
063C                                    #pragma write h, ( *------------------------------------------------------------------------------);
063C                                    #pragma write h, ( * 2017-12-07, gbo, created                                                     );
063C                                    #pragma write h, ( *******************************************************************************);
063C                                    #pragma write h, ( );
063C                                    #pragma write h, ( *******************************************************************************);
063C                                    #pragma write h, ( * content                                                                      );
063C                                    #pragma write h, ( *------------------------------------------------------------------------------);
063C                                    #pragma write h, ( *  File            : etpuc_fin_auto.h                                          );
063C                                    #pragma write h, ( *  Description     : 频率量采集头文件                                          );
063C                                    #pragma write h, ( *  Call            : 029-89186510                                              );
063C                                    #pragma write h, ( *  该文件由ETPU自动生成，请勿修改！！！                                        );
063C                                    #pragma write h, ( ******************************************************************************/);
063C                                    #pragma write h, (#ifndef _ETPU_FIN_AUTO_H_ );
063C                                    #pragma write h, (#define _ETPU_FIN_AUTO_H_ );
063C                                    #pragma write h, ( );
063C                                    #pragma write h, (/* Function Configuration Information */);
063C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_FIN_FUNCTION_NUMBER) FIN_FUNCTION_NUMBER );
063C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_FIN_TABLE_SELECT) ::ETPUentrytype(FreqIn) );
063C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_FIN_NUM_PARMS) ::ETPUram(FreqIn) );
063C                                    #pragma write h, ( );
063C                                    #pragma write h, (/* Host Service Request Definitions */);
063C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_FIN_INIT) FIN_INIT );
063C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_FIN_PERIOD_UPDATE) FIN_PERIOD_UPDATE );
063C                                    #pragma write h, ( );
063C                                    #pragma write h, (/* Parameter Definitions */);
063C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_FIN_RESULT_OFFSET) ::ETPUlocation (FreqIn, Result) );
063C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_FIN_PERIOD_CNT_OFFSET) ::ETPUlocation (FreqIn, PeriodCnt) );
063C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_FIN_PERIOD_CNT_UPD_OFFSET) ::ETPUlocation (FreqIn, PeriodCntUpdate) );
063C                                    #pragma write h, ( );
063C                                    #pragma write h, (#endif);
063C                                    #pragma write h, ( );

                                        /* Camshaft detect */
00000002                                #define CAM_FUNCTION_NUMBER 2
                                        #include "etpuc_cam2.c"

ETPU "C" COMPILER 1.0.7.85                                              PAGE 49


                                        /*******************************************************************************
                                         * 版权 2015-2016 中国航空工业集团第六三一所第十八研究室
                                         *
                                         * 对本文件的拷贝、发布、修改或者其他任何用途必须得到中国航空工业集团第六三一所
                                         * 的书面协议许可。
                                         *
                                         * Copyrights (2015-2016) ACTRI
                                         * All Right Reserved
                                         *******************************************************************************

                                         *******************************************************************************
                                         * Revision History
                                         *------------------------------------------------------------------------------
                                         * 2017-12-07, gbo, created
                                         *******************************************************************************

                                         *******************************************************************************
                                         * content
                                         *------------------------------------------------------------------------------
                                         *  File            : etpuc_crank.c
                                         *  Description     : ETPU曲轴信号采集，同步
                                         *  Call            : 029-89186510
                                         ******************************************************************************/
                                        #include "etpuc_cam2.h"
                                        /*******************************************************************************
                                         * 版权 2015-2016 中国航空工业集团第六三一所第十八研究室
                                         *
                                         * 对本文件的拷贝、发布、修改或者其他任何用途必须得到中国航空工业集团第六三一所
                                         * 的书面协议许可。
                                         *
                                         * Copyrights (2015-2016) ACTRI
                                         * All Right Reserved
                                         *******************************************************************************

                                         *******************************************************************************
                                         * Revision History
                                         *------------------------------------------------------------------------------
                                         * 2017-12-07, gbo, created
                                         *******************************************************************************

                                         *******************************************************************************
                                         * content
                                         *------------------------------------------------------------------------------
                                         *  File            : etpuc_crank.h
                                         *  Description     : ETPU曲轴检测头文件
                                         *  Call            : 029-89186510
                                         ******************************************************************************/
                                        #ifndef _ETPUC_CAM_H
00E4                                    #define _ETPUC_CAM_H

                                        #include <eTPUc_common.h>
                                        #ifndef __ETPUC_COMMON_H
                                        #define __ETPUC_COMMON_H

                                        /********************************************************************************

ETPU "C" COMPILER 1.0.7.85                                              PAGE 50



                                         FILE NAME: etpuc_common.h

                                         COPYRIGHT (c) ASH WARE, Byte Craft Limited, Freescale 2002-2004.
                                         All Rights Reserved.

                                         VERSION:  1.0

                                         This file is maintained as part of the support for the eTPU_C
                                         development tools by Byte Craft Limited.

                                         This code may be adapted for any purpose when used with the eTPU_C
                                         Code Development System.  No warranty is implied or given as to their
                                         usability for any purpose.

                                         Portions of this file are governed by the following copyrights and
                                         terms:

                                         (c) Freescale 2002-2004 FREESCALE, INC. All Rights Reserved.
                                         *  You are hereby granted a copyright license to use, modify, and
                                         *  distribute the SOFTWARE so long as this entire notice is
                                         *  retained without alteration in any modified and/or redistributed
                                         *  versions, and that such modified versions are clearly identified
                                         *  as such. No licenses are granted by implication, estoppel or
                                         *  otherwise under any patents or trademarks of Freescale, Inc. This
                                         *  software is provided on an "AS IS" basis and without warranty.
                                         *
                                         *  To the maximum extent permitted by applicable law, FREESCALE
                                         *  DISCLAIMS ALL WARRANTIES WHETHER EXPRESS OR IMPLIED, INCLUDING
                                         *  IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
                                         *  PURPOSE AND ANY WARRANTY AGAINST INFRINGEMENT WITH REGARD TO THE
                                         *  SOFTWARE (INCLUDING ANY MODIFIED VERSIONS THEREOF) AND ANY
                                         *  ACCOMPANYING WRITTEN MATERIALS.
                                         *
                                         *  To the maximum extent permitted by applicable law, IN NO EVENT
                                         *  SHALL FREESCALE BE LIABLE FOR ANY DAMAGES WHATSOEVER (INCLUDING
                                         *  WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
                                         *  INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR OTHER PECUNIARY
                                         *  LOSS) ARISING OF THE USE OR INABILITY TO USE THE SOFTWARE.
                                         *
                                         *  Freescale assumes no responsibility for the maintenance and support
                                         *  of this software

                                         (c) Copyright 2002-2004 Byte Craft Limited
                                         421 King St.N., Waterloo, ON, Canada, N2J 4E4
                                         VOICE: 1 (519) 888 6911
                                         email: support@bytecraft.com

                                         (c) Copyright 2002-2004 ASH WARE

                                        ================================================================================

                                        DESCRIPTION: This file defines the application-friendly macros,
                                        functions for common tasks like channel set up and register control
                                        field access.

ETPU "C" COMPILER 1.0.7.85                                              PAGE 51



                                        ================================================================================

                                        SOURCES:

                                        etpuc_common.h is based on the following header files commonly used by
                                        the eTPU development community:

                                        AshWareETpu.h - developed by Andy Klumpp from ASH WARE
                                        Mike.h - developed by Mike Pauwels from Freescale
                                        etpu_common.h - developped by Ming Li from Freescale

                                        Jeff Loeliger from Freescale and Walter Banks from Byte Craft
                                        also made significant contibutions.

                                        ================================================================================
                                         UPDATE HISTORY
                                         REV      AUTHOR        DATE                DESCRIPTION OF CHANGE
                                         ---      -------      --------    ---------------------
                                         0.0      Ming Li      10/30/03    Initial creation
                                         0.1      Ming Li      11/12/03    Updated to incorporate comments from eTPU
                                                                           development community.
                                         0.2      Walter Banks 15 Dec 03   Made changes to be reflect definitions in
                                                                           eTPUc.h
                                                                           Corrected IsTransALatched()
                                                                                     IsTransBLatched()
                                                                           Added missing definitions
                                                                                     set_pin_per_opacA
                                                                                     set_pin_per_opacB
                                                                                     force_pin_high
                                                                                     force_pin_low
                                                                           Corrected opac1 to opacA
                                                                                     opac2 to opacB

                                         0.3      Walter Banks  5 Jan 04   Corrected opacB = pin_action; to
                                                                               opacA = pin_action;

                                         0.4     J. Loeliger    21/Jan/04  Cleared up reorganized and added more:
                                                                           -Moved TRUE & FALSE to top and added
                                                                              conditional
                                                                           -Moved entry conditions up and added macros
                                                                              for all conditions
                                                                           -Merged with AshWareETpu.h
                                                                              -Removed commet with of PDCM names.
                                                                           -Grouped latches and flags together.
                                                                             -added new set and clear for latches and
                                                                                flags
                                                                           -Merged output pin value to 1 set rather
                                                                              than 2
                                                                           -Added long channel mode names.
                                                                           -Added SetupMatch_AB for better
                                                                              optimization
                                                                           -Added match only conditions for output
                                                                              functions.
                                                                           -Added new ActionUnintA/B macros

ETPU "C" COMPILER 1.0.7.85                                              PAGE 52


                                                                           -Added new Pin macro
                                                                           -And more.
                                         0.5     J. Loeliger     12/Feb/04 -Changed DetectTrans to OnTrans.
                                         0.6     J. Loeliger     30/Mar/04 -Added SetupMatchB and fixed some old
                                                                             references to 1 & 2 -> A & B
                                         0.7     J. Loeliger     16/Apr/04 -Changed Disable match (MRLE) to =0
                                         0.8     J. Loeliger     27/Apr/04 -Fixed Disable/Enable match in thread,
                                                                              they were swapped.
                                         0.9     J. Loeliger     10/May/04 -Added support for OBE with new
                                                 M. Brejl                   EnableOutputBuffer()/DisableOutputBuffer()
                                                                            Removed all // comments. Changed Motorola
                                                                            to Freescale.
                                                                            Fixed spelling mistake in GetCurentChanNum

                                         0.4     Karen McMurray  19 May 04  Changed all ertA to erta
                                                                                        ertB to ertb.

                                         1.0     Kirk Zurell     11 Aug 04  Integrated etpuc_common.h from J. Loeliger
                                                                            and etpuc_common.h from Byte Craft Limited.
                                                                            Removed tabs & made comments more sustainable.
                                                                            Conditionalized some definitions to be more
                                                                            economical on symbols.

                                                                            Divider lines have 80 asterices.

                                        */



                                        /********************************************************************************/

                                        /* This file depends upon definitions from etpuc.h */

                                        #ifndef __ETPUC_H
                                        #include <etpuc.h>
                                        #endif /* __ETPUC_H */


                                        /********************************************************************************/

                                        /* Constant definitions */

                                        #ifndef TRUE
                                        #define TRUE        1
                                        #endif

                                        #ifndef FALSE
                                        #define FALSE       0
                                        #endif


                                        /********************************************************************************/

                                        /* State Resolution Flags, and other latches */


ETPU "C" COMPILER 1.0.7.85                                              PAGE 53


                                        /* Clear() definitions */
                                        #define LSRLatch      lsr
                                        #define LatchedMatchA mrlA
                                        #define LatchedMatchB mrlB
                                        #define TransLatch    tdl

                                        /* Macros */

                                        /* Set flag0 or flag1
                                           Usage: Set(flag0 | flag1);*/

                                        #define Set(cond)     (cond = 1)

                                        /* Clear a flag
                                           Usage: Clear(flag0 | flag1 | LSRLatch | lsr | MatchALatch | mrlA |
                                                         MatchBLatch | mrlB | TransLatch | tdl);         */

                                        #define Clear(cond)   (cond = 0)

                                        /* SYNONYMS */
                                        /* Flag 0 & flag 1 */
                                        #define ClrFlag0()  (channel.FLAG0 = 0)
                                        #define SetFlag0()  (channel.FLAG0 = 1)
                                        #define ClrFlag1()  (channel.FLAG1 = 0)
                                        #define SetFlag1()  (channel.FLAG1 = 1)


                                        #define FunctionMode0          channel.FM0
                                        #define IsFunctionMode0()     (channel.FM0==1)
                                        #define IsSampledFuncMode0()  (channel.FM0==1)
                                        #define IsLatchedFuncMode0()  (channel.FM0==1)

                                        #define FunctionMode1          channel.FM1
                                        #define IsFunctionMode1()     (channel.FM1==1)
                                        #define IsSampledFuncMode1()  (channel.FM1==1)
                                        #define IsLatchedFuncMode1()  (channel.FM1==1)


                                        /********************************************************************************/

                                        /* Writing the match registers and enabling/disabling the Match
                                           Recognition Latch Enable */

                                        #define EnableMatchA()                 (channel.ERWA = 0)
                                        #define EnableMatchB()                 (channel.ERWB = 0)
                                        #define DisableMatch()                 (channel.MRLE = 0)

                                        /* SYNONYMS */
                                        #define WriteErtAToMatchAAndEnable()   channel.ERWA = 0
                                        #define WriteErtBToMatchBAndEnable()   channel.ERWB = 0
                                        #define DisableMatchDetection();       channel.MRLE = 0


                                        /* Read capture register */
                                        #define GetCapRegA()  (erta)

ETPU "C" COMPILER 1.0.7.85                                              PAGE 54


                                        #define GetCapRegB()  (ertb)

                                        /* Clear Latch */
                                        #define ClearLSRLatch()       (channel.LSR  = 0)

                                        #define ClearMatchALatch()    (channel.MRLA = 0)
                                        #define ClearMatchBLatch()    (channel.MRLB = 0)

                                        #define ClearTransLatch()     (channel.TDL = 0)

                                        /* SYNONYMS */
                                        #define ClearLinkServiceRequestEvent() (lsr  = 0)

                                        #define ClearMatchAEvent()    (channel.MRLA = 0)
                                        #define ClearMatchBEvent()    (channel.MRLB = 0)

                                        #define ClearTransitionEvents() (channel.TDL = 0)



                                        /* Test latch conditions */

                                        #define TransitionALatch           channel.TDLA
                                        #define IsTransALatched()         (channel.TDLA==1)

                                        #define TransitionBLatch           channel.TDLB
                                        #define IsTransBLatched()         (channel.TDLB==1)

                                        #define MatchALatch            channel.MRLA
                                        #define IsMatchALatched()     (channel.MRLA==1)

                                        #define MatchBLatch            channel.MRLB
                                        #define IsMatchBLatched()     (channel.MRLB==1)

                                        /* SYNONYMS */
                                        #define IsLatchedTransitionA()    (channel.TDLA==1)
                                        #define IsLatchedTransitionB()    (channel.TDLB==1)
                                        #define IsLatchedMatchA()         (channel.MRLA==1)
                                        #define IsLatchedMatchB()         (channel.MRLB==1)



                                        /********************************************************************************/

                                        /* Enabling/Disabling Event Handling */

                                        #define EnableEventHandling()                   (channel.MTD = 0)
                                        #define DisableEventHandling()                  (channel.MTD = 1)

                                        /* SYNONYMS */
                                        #define EnableMatchAndTransitionEventHandling()  channel.MTD = 0
                                        #define DisableMatchAndTransitionEventHandling() channel.MTD = 1


                                        /********************************************************************************/

ETPU "C" COMPILER 1.0.7.85                                              PAGE 55



                                        /* Semaphore Operations */

                                        #define IsSemaphoreLocked()   (channel.SMPR == 1)
                                        #define LockSemaphore(num)    (channel.SMPR = num)
                                        #define FreeSemaphore()       (channel.SMPR = -1)


                                        /********************************************************************************/

                                        /* Exceptions */

                                        /* Channel control macros */
                                        #define SetChannelInterrupt()       (channel.CIRC = 0)
                                        #define SetChannelInterruptRequest()(channel.CIRC = 0)

                                        #define SetDataTransferInterrupt()        (channel.CIRC = 1)
                                        #define SetDataTransferInterruptRequest() (channel.CIRC = 1)

                                        #define SetGlobalException()  (channel.CIRC = 2)

                                        /* Channel control */

                                        /* Generate the link service request to channel[ChNum] */
                                        #define LinkToChannel(ChNum)            (link = ChNum)
                                        #define LinkTo(num)                 link = num;
                                        #define LinkToEngine1Chan(num)      link = (num | (1<<6))
                                        #define LinkToEngine2Chan(num)      link = (num | (2<<6))
                                        #define LinkToOtherEngineChan(num)  link = (num | (3<<6))

                                        /* switch to specified channel from current channel */
                                        #define SwitchToChannel(ChNum)      (chan = ChNum)

                                        /* return current channel number */
                                        #define GetCurrentChanNum()         (chan)

                                        /* branch condition */
                                        #define LinkServiceRequest     channel.LSR
                                        #define IsLinkReqActive()     (channel.LSR==1)
                                        #define IsSampledLink()       (channel.LSR==1)
                                        #define IsLatchedLink()       (channel.LSR==1)


                                        /********************************************************************************/

                                        /* Entry Conditions Definition */

                                        /* Usage: use these in the if()/else if()/else structure in an
                                           ETPU_function */

                                        #define HostServiceRequest               hsr
                                        #define IsHostServiceRequestEvent(num)   (hsr==num)

                                        #define MatchA_TransB                    (m1==1)
                                        #define matchA_transB                    (m1==1)

ETPU "C" COMPILER 1.0.7.85                                              PAGE 56


                                        #define IsMatchAOrTransitionBEvent()     (m1==1)

                                        #define MatchB_TransA                    (m2==1)
                                        #define matchB_transA                    (m2==1)
                                        #define IsMatchBOrTransitionAEvent()     (m2==1)

                                        #define linkRequest                      (lsr==1)
                                        #define IsLinkServiceRequestEvent()      (lsr==1)

                                        /* For output-only functions */
                                        #define MatchA                           (m1==1)
                                        #define MatchB                           (m2==1)


                                        /********************************************************************************/

                                        /* Predefined Channel Modes (PDCM) */

                                        #define SetChannelMode(mode)        (channel.PDCM = mode)
                                        #define channel_setup channel.PDCM

                                        /* Usage:       channel_setup = PDCM_constant

                                        PDCM_constants are taken from etpuc.h:
                                        em_b_st         Either Match, Blocking, Single Transition
                                        em_b_dt         Either Match, Blocking, Double Transition
                                        em_nb_st        Either Match, NonBlocking, Single Transition
                                        em_nb_dt        Either Match, NonBlocking, Double Transition
                                        m2_st           Match2, Single, Transition
                                        m2_dt           Match2, Double, Transition
                                        bm_st           Both Match, Single Transition
                                        bm_dt           Both Match, Double Transition
                                        m2_o_st         Match2, Ordered Single Blocking Transition
                                        m2_o_dt         Match2, Ordered Double Transition
                                        sm_st_e         Single Match, Single Transition Enhanced
                                        sm_st           Single Match, Single Transition
                                        sm_dt           Single Match, Double Transition
                                        */

                                        /* SYNONYMS */
                                        #define EitherMatchBlockingSingleTransition()     channel.PDCM = em_b_st
                                        #define EitherMatchBlockingDoubleTransition()     channel.PDCM = em_b_dt
                                        #define EitherMatchNonBlockingSingleTransition()  channel.PDCM = em_nb_st
                                        #define EitherMatchNonBlockingDoubleTransition()  channel.PDCM = em_nb_dt
                                        #define Match2SingleTransition()                  channel.PDCM = m2_st
                                        #define Match2DoubleTransition()                  channel.PDCM = m2_dt
                                        #define BothMatchSingleTransition()               channel.PDCM = bm_st
                                        #define BothMatchDoubleTransition()               channel.PDCM = bm_dt
                                        #define Match2OrderedSingleBlockingTransition()   channel.PDCM = m2_o_st
                                        #define Match2OrderedDoubleTransition()           channel.PDCM = m2_o_dt
                                        #define SingleMatchSingleTransitionEnhanced()     channel.PDCM = sm_st_e
                                        #define SingleMatchSingleTransition()             channel.PDCM = sm_st
                                        #define SingleMatchDoubleTransition()             channel.PDCM = sm_dt



ETPU "C" COMPILER 1.0.7.85                                              PAGE 57


                                        #define ClearAllLatches()         \
                                                (lsr = 0);(mrlA = 0);(mrlB = 0);(tdl = 0);


                                        /********************************************************************************/

                                        /* Complex Macros */

                                        /* These macros should provide the most optimized way of doing things.
                                           They should be in the best order for optimizing. The compiler might
                                           be able to identify this code for optimization. */

                                        #define SetupMatchA(reference) \
                                                erta = reference;      \
                                                EnableMatchA();        \
                                                ClearMatchALatch();

                                        #define SetupMatchB(reference) \
                                                ertb = reference;      \
                                                EnableMatchB();        \
                                                ClearMatchBLatch();

                                        /* These are ONLY useful for init. and if you know which TCR you want
                                           to use. Latches are cleared at the end so it can be combined with
                                           other latches. */

                                        #define ConfigMatch_AB() \
                                                WriteErtAToMatchAAndEnable(); \
                                                WriteErtBToMatchBAndEnable(); \
                                                EnableMatchA();        \
                                                EnableMatchB();        \
                                                EnableEventHandling();\
                                                ClearMatchALatch();\
                                                ClearMatchBLatch();

                                        #define SetupMatch_A(reference, timebase_comparator, pin_action) \
                                                erta = reference; \
                                                act_unitA = timebase_comparator; \
                                                opacA = pin_action; \
                                                EnableMatchA();        \
                                                ClearMatchALatch();\
                                                EnableEventHandling();

                                        #define SetupMatch_B(reference, timebase_comparator, pin_action) \
                                                ertb = reference; \
                                                act_unitB = timebase_comparator; \
                                                opacB = pin_action; \
                                                EnableMatchB();        \
                                                ClearMatchBLatch();\
                                                EnableEventHandling();

                                        #define SetupCaptureTrans_A(timebase, pin_trans) \
                                                act_unitA = timebase;\
                                                ipacA = pin_trans;\
                                                ClearTransLatch();\

ETPU "C" COMPILER 1.0.7.85                                              PAGE 58


                                                EnableEventHandling();

                                        #define SetupCaptureTrans_B(timebase, pin_trans) \
                                                act_unitB = timebase;\
                                                ipacB = pin_trans;\
                                                ClearTransLatch();\
                                                EnableEventHandling();


                                        /********************************************************************************/

                                        /* Action Units */

                                        /* Usage: ActionUnitA( MatchTCR1 | MatchTCR2,
                                                               CaptureTCR1 | CaptureTCR2,
                                                               GreaterEqual | EqualOnly ); */

                                        #define ActionUnitA( match, capture, compare)   (act_unitA=match##capture##compare)
                                        #define ActionUnitB( match, capture, compare)   (act_unitB=match##capture##compare)

                                        #define MatchTCR1    Mtcr1_
                                        #define MatchTCR2    Mtcr2_
                                        #define CaptureTCR1  Ctcr1_
                                        #define CaptureTCR2  Ctcr2_
                                        #define GreaterEqual ge
                                        #define EqualOnly    eq

                                        /* SYNONYMS */
                                        /* Action Unit A, Time Bases for match and capture */
                                        #define TimeBaseAMatchTcr1CaptureTcr1GreaterEqual()      channel.TBSA = Mtcr1_Ctcr1_ge
                                        #define TimeBaseAMatchTcr2CaptureTcr1GreaterEqual()      channel.TBSA = Mtcr2_Ctcr1_ge
                                        #define TimeBaseAMatchTcr1CaptureTcr2GreaterEqual()      channel.TBSA = Mtcr1_Ctcr2_ge
                                        #define TimeBaseAMatchTcr2CaptureTcr2GreaterEqual()      channel.TBSA = Mtcr2_Ctcr2_ge
                                        #define TimeBaseAMatchTcr1CaptureTcr1ExactlyEqual()      channel.TBSA = Mtcr1_Ctcr1_eq
                                        #define TimeBaseAMatchTcr2CaptureTcr1ExactlyEqual()      channel.TBSA = Mtcr2_Ctcr1_eq
                                        #define TimeBaseAMatchTcr1CaptureTcr2ExactlyEqual()      channel.TBSA = Mtcr1_Ctcr2_eq
                                        #define TimeBaseAMatchTcr2CaptureTcr2ExactlyEqual()      channel.TBSA = Mtcr2_Ctcr2_eq

                                        /* Action Unit B, Time Bases for match and capture */
                                        #define TimeBaseBMatchTcr1CaptureTcr1GreaterEqual()      channel.TBSB = Mtcr1_Ctcr1_ge
                                        #define TimeBaseBMatchTcr2CaptureTcr1GreaterEqual()      channel.TBSB = Mtcr2_Ctcr1_ge
                                        #define TimeBaseBMatchTcr1CaptureTcr2GreaterEqual()      channel.TBSB = Mtcr1_Ctcr2_ge
                                        #define TimeBaseBMatchTcr2CaptureTcr2GreaterEqual()      channel.TBSB = Mtcr2_Ctcr2_ge
                                        #define TimeBaseBMatchTcr1CaptureTcr1ExactlyEqual()      channel.TBSB = Mtcr1_Ctcr1_eq
                                        #define TimeBaseBMatchTcr2CaptureTcr1ExactlyEqual()      channel.TBSB = Mtcr2_Ctcr1_eq
                                        #define TimeBaseBMatchTcr1CaptureTcr2ExactlyEqual()      channel.TBSB = Mtcr1_Ctcr2_eq
                                        #define TimeBaseBMatchTcr2CaptureTcr2ExactlyEqual()      channel.TBSB = Mtcr2_Ctcr2_eq



                                        /********************************************************************************/

                                        /* Pin output buffer */

                                        #define EnableOutputBuffer()           (channel.TBSA = enable_output_buffer)

ETPU "C" COMPILER 1.0.7.85                                              PAGE 59


                                        #define DisableOutputBuffer()          (channel.TBSA = disable_output_buffer)


                                        /********************************************************************************/

                                        /* Pin control */

                                        /* Pin() definitions */
                                        #define SetHigh pin_high
                                        #define SetLow  pin_low
                                        #define PerPacA pin_opacA
                                        #define PerPacB pin_opacB

                                        /* Set Output Pin
                                           Usage: Pin( SetHigh | SetLow | PerPacA | PerPacB ); */
                                        #define Pin( state )          (channel.PIN=state)

                                        /* Immediate output pin */
                                        #define set_pin_per_opacA  pin_opacA
                                        #define set_pin_per_opacB  pin_opacB
                                        #define force_pin_high     pin_high
                                        #define force_pin_low      pin_low

                                        #define SetPinHigh()          (channel.PIN=force_pin_high)
                                        #define SetPinLow()           (channel.PIN=force_pin_low)
                                        #define SetPinPerPacA()       (channel.PIN=set_pin_per_opacA)
                                        #define SetPinPerPacB()       (channel.PIN=set_pin_per_opacB)

                                        /* Reading the pin states: branch conditions */

                                        #define SampledInputPin            channel.PSS
                                        #define IsLatchedInputPin()        (channel.PSS==1)
                                        #define IsInputPinHigh()           (channel.PSS==1)

                                        #define CurrentInputPin            channel.PSTI
                                        #define IsCurrentInputPin()        (channel.PSTI==1)

                                        #define CurrentOutputPin           channel.PSTO
                                        #define IsCurrentOutputPin()       (channel.PSTO==1)

                                        /* SYNONYMS */
                                        #define IsSampledInputPinHigh()    (channel.PSS==1)
                                        #define IsLatchedInputPinHigh()    (channel.PSS==1)
                                        #define IsCurrentInputPinHigh()    (channel.PSTI==1)
                                        #define IsCurrentOutputPinHigh()   (channel.PSTO==1)



                                        /********************************************************************************/

                                        /* Output Pin Action */

                                        #define NoChange    match_no_change
                                        #define PinHigh     match_high
                                        #define PinLow      match_low

ETPU "C" COMPILER 1.0.7.85                                              PAGE 60


                                        #define PinToggle   match_toggle

                                        /* Usage: OnMatchA( NoChange | PinHigh | PinLow | PinToggle ); */
                                        #define OnMatchA(action)      (opacA = action)
                                        #define OnMatchB(action)      (opacB = action)

                                        /* SYNONYMS */
                                        /* Action Unit A, Output Pin Actions */
                                        #define OnMatchAPinNoChange()      channel.OPACA = match_no_change
                                        #define OnMatchAPinHigh()          channel.OPACA = match_high
                                        #define OnMatchAPinLow()           channel.OPACA = match_low
                                        #define OnMatchAPinToggle()        channel.OPACA = match_toggle
                                        #define OnInputActionAPinLow()     channel.OPACA = transition_low
                                        #define OnInputActionAPinHigh()    channel.OPACA = transition_high
                                        #define OnInputActionAPinToggle()  channel.OPACA = transition_toggle

                                        /* Action Unit B, Output Pin Actions */
                                        #define OnMatchBPinNoChange()      channel.OPACB = match_no_change
                                        #define OnMatchBPinHigh()          channel.OPACB = match_high
                                        #define OnMatchBPinLow()           channel.OPACB = match_low
                                        #define OnMatchBPinToggle()        channel.OPACB = match_toggle
                                        #define OnInputActionBPinLow()     channel.OPACB = transition_low
                                        #define OnInputActionBPinHigh()    channel.OPACB = transition_high
                                        #define OnInputActionBPinToggle()  channel.OPACB = transition_toggle


                                        /********************************************************************************/

                                        /* Input Pin Action */

                                        #define NoDetect  no_detect
                                        #define LowHigh   low_high
                                        #define HighLow   high_low
                                        #define AnyTrans  any_trans

                                        /* Usage: DetectTransA( no_detect | low_high | high_low | any_trans | ...); */
                                        #define OnTransA(action)     (ipacA = action)
                                        #define OnTransB(action)     (ipacB = action)

                                        /* SYNONYMS */
                                        /* Action Unit A, Input Pin Edge Detection */
                                        #define DetectADisable()        channel.IPACA = no_detect
                                        #define DetectARisingEdge()     channel.IPACA = low_high
                                        #define DetectAFallingEdge()    channel.IPACA = high_low
                                        #define DetectAAnyEdge()        channel.IPACA = any_trans
                                        #define DetectALowOnMatchA()    channel.IPACA = detect_input_0_on_match
                                        #define DetectAHighOnMatchA()   channel.IPACA = detect_input_1_on_match

                                        /* Action Unit B, Input Pin Edge Detection */
                                        #define DetectBDisable()        channel.IPACB = no_detect
                                        #define DetectBRisingEdge()     channel.IPACB = low_high
                                        #define DetectBFallingEdge()    channel.IPACB = high_low
                                        #define DetectBAnyEdge()        channel.IPACB = any_trans
                                        #define DetectBLowOnMatchA()    channel.IPACB = detect_input_0_on_match
                                        #define DetectBHighOnMatchA()   channel.IPACB = detect_input_1_on_match

ETPU "C" COMPILER 1.0.7.85                                              PAGE 61




                                        /********************************************************************************/

                                        /* Intrinsics synonyms */

                                        /* Matches in Threads */
                                        #define DisableMatchesInThread()    match_disable()
                                        #define EnableMatchesInThread()     match_enable()



                                        #endif /* __ETPUC_COMMON_H */
                                        #include <etpuc.h>
                                        #ifndef __ETPUC_H
                                        #define __ETPUC_H

                                        /*
                                         *  eTPU C Code Development System
                                         *
                                         *  Processor register definitions
                                         *  for the eTPU C Code Development System.
                                         *
                                         *  This code may be adapted for any purpose
                                         *  when used with the eTPU C Code Development
                                         *  System.  No warranty is implied or given
                                         *  as to their usability for any purpose.
                                         *
                                         *  (c) Copyright 2002-2004 Byte Craft Limited
                                         *  421 King St.N., Waterloo, ON, Canada, N2J 4E4
                                         *  VOICE: 1 (519) 888 6911
                                         *  FAX  : 1 (519) 746 6751
                                         *  email: support@bytecraft.com
                                         *
                                         *  Byte Craft Limited
                                         *  Waterloo, Ontario
                                         *  Canada N2J 4E4
                                         *  (519) 888-6911
                                         *
                                         *  Walter Banks
                                         *
                                         * Revision history
                                         * ----------------
                                         * V0.90  WB    Nov 2003  First pre-release of etpuc.h based on V1.10 etpu.h with
                                         *                        changes to reflect eTPU naming conventions
                                         * V1.00  WB    Nov 2003  First release changes to the channel fields to reflect
                                         *                        naming conventions for eTPU
                                         * V1.01  WB    Dec 2003  Corrected definitions of pin_opacA and pin_opacB
                                         *
                                         *
                                         *
                                         *  All of the eTPU registers can be directly accessed from C
                                         *

                                             register_ac        ac   ;      // 24 bits

ETPU "C" COMPILER 1.0.7.85                                              PAGE 62


                                             register_b         b    ;      // 24 bits
                                             register_c         c    ;      // 24 bits
                                             register_d         d    ;      // 24 bits
                                             register_chan      chan ;      //  5 bits
                                             register_diob      diob ;      // 24 bits
                                             register_erta      erta ;      // 24 bits
                                             register_ertb      ertb ;      // 24 bits
                                             register_link      link ;      //  8 bits
                                             register_mach      mach ;      // 24 bits
                                             register_macl      macl ;      // 24 bits
                                             register_p         p    ;      // 24 bits
                                             register_rar       rar  ;      // 14 bits
                                             register_sr        sr   ;      // 24 bits
                                             register_tcr1      tcr1 ;      // 24 bits
                                             register_tcr2      tcr2 ;      // 24 bits
                                             register_tpr       tpr  ;      // 16 bits
                                             register_trr       trr  ;      // 24 bits
                                             register_chan_base chan_base;  // 24 bits
                                        */

                                        /* The following registers are defined for
                                           eTPU C application code */

                                             register_chan       chan ;       //  5 bits
                                             register_erta       erta ;       // 24 bits
                                             register_ertb       ertb ;       // 24 bits
                                             register_tcr1       tcr1 ;       // 24 bits
                                             register_tcr2       tcr2 ;       // 24 bits
                                             register_tpr        tpr  ;       // 16 bits
                                             register_trr        trr  ;       // 24 bits
                                             register_chan_base  chan_base;   // 24 bits
                                             register_link       link;        // 8 bits

                                        /*
                                           The link request can be set by copying the
                                           channel number into the link register. The
                                           following definition does this.
                                         */

                                        #define link_request(channel) link = channel

                                        /*
                                         *
                                         *
                                         *  All of the eTPU channel fields are predefined as a
                                         *  large C structure (chan_struct) by the eTPU C compiler.
                                         *
                                         *  struct chan {
                                         *               CIRC   int : 2 ;
                                         *               ERWA   int : 1 ;
                                         *               ERWB   int : 1 ;
                                         *               FLC    int : 3 ;
                                         *               IPACA  int : 3 ;
                                         *               IPACB  int : 3 ;
                                         *               LSR    int : 1 ;  // w test

ETPU "C" COMPILER 1.0.7.85                                              PAGE 63


                                         *               MRLA   int : 1 ;  // w test
                                         *               MRLB   int : 1 ;  // w test
                                         *               MRLE   int : 1 ;
                                         *               MTD    int : 2 ;
                                         *               OPACA  int : 3 ;
                                         *               OPACB  int : 3 ;
                                         *               PDCM   int : 4 ;
                                         *               PIN    int : 3 ;
                                         *               TBSA   int : 4 ;
                                         *               TBSB   int : 4 ;
                                         *               TDL    int : 1 ;
                                         *               SMPR   int : 2 ;
                                         * State Resolution
                                         *               FLAG0  int : 1 ;  // w only also defined in FLC
                                         *               FLAG1  int : 1 ;
                                         * Channel Flags
                                         *               FM0    int : 1 ;
                                         *               FM1    int : 1 ;
                                         *         //    LSR    int : 1 ;  // also channel fields
                                         *         //    MRLA   int : 1 ;  // also channel fields
                                         *         //    MRLB   int : 1 ;  // also channel fields
                                         *               PSS    int : 1 ;
                                         *               PSTI   int : 1 ;
                                         *               PSTO   int : 1 ;
                                         *               TDLA   int : 1 ;
                                         *               TDLB   int : 1 ;
                                         *              }
                                         ***/

                                        chan_struct channel;
                                        register_cc        CC;

                                        #define erwA       channel.ERWA
                                        #define erwB       channel.ERWB

                                        #define flc        channel.FLC
                                        #define ipacA      channel.IPACA
                                        #define ipacB      channel.IPACB
                                        #define lsr        channel.LSR

                                        #define mrlA       channel.MRLA
                                        #define mrlB       channel.MRLB
                                        #define mrle       channel.MRLE
                                        #define mtd        channel.MTD
                                        #define opacA      channel.OPACA
                                        #define opacB      channel.OPACB
                                        #define pdcm       channel.PDCM
                                        #define pin        channel.PIN
                                        #define act_unitA  channel.TBSA
                                        #define act_unitB  channel.TBSB
                                        #define tdl        channel.TDL
                                        #define flag0      channel.FLAG0
                                        #define flag1      channel.FLAG1
                                        #define fm0        channel.FM0
                                        #define fm1        channel.FM1

ETPU "C" COMPILER 1.0.7.85                                              PAGE 64


                                        #define pss        channel.PSS
                                        #define psti       channel.PSTI
                                        #define psto       channel.PSTO
                                        #define tdlA       channel.TDLA
                                        #define tdlB       channel.TDLB


                                        // IPAC 1,2
                                        #define no_detect                 0
                                        #define low_high                  1
                                        #define high_low                  2
                                        #define any_trans                 3
                                        #define detect_input_0_on_match   4
                                        #define detect_input_1_on_match   5
                                        #define no_change_ipac            7

                                        // OPAC 1,2  fields

                                        #define match_no_change   0
                                        #define match_high        1
                                        #define match_low         2
                                        #define match_toggle      3
                                        #define opac_high         1
                                        #define opac_low          2
                                        #define toggle            3
                                        #define opac_high_low     4
                                        #define opac_low_high     5
                                        #define transition_low    4
                                        #define transition_high   5
                                        #define transition_toggle 6

                                        // PDCM fields
                                        #define em_b_st  0              //Either Match, Blocking, Single Transition
                                        #define em_b_dt  1              //Either Match, Blocking, Double Transition
                                        #define em_nb_st 2              //Either Match, NonBlocking, Single Transition
                                        #define em_nb_dt 3              //Either Match, NonBlocking, Double Transition
                                        #define m2_st    4              //Match2, Single, Transition
                                        #define m2_dt    5              //Match2, Double, Transition
                                        #define bm_st    6              //Both Match, Single Transition
                                        #define bm_dt    7              //Both Match, Double Transition
                                        #define m2_o_st  8              //Match2, Ordered, Single Transition
                                        #define m2_o_dt  9              //Match2, Ordered, Double Transition
                                        #define sm_st_e  0xE                //Single Match, Single Transition, Enhanced
                                        #define sm_st    0xC                //Single Match, Single Transition
                                        #define sm_dt    0xD                //Single Match, Double Transition

                                        // Time Bases Selection for match and capture
                                        #define Mtcr1_Ctcr1_ge       0      //Match tcr1, Capture tcr1, greater than
                                        #define Mtcr2_Ctcr1_ge       1      //Match tcr2, Capture tcr1, greater than
                                        #define Mtcr1_Ctcr2_ge       2      //Match tcr1, Capture tcr2, greater than
                                        #define Mtcr2_Ctcr2_ge       3      //Match tcr2, Capture tcr2, greater than
                                        #define Mtcr1_Ctcr1_eq       4      //Match tcr1, Capture tcr1, equal
                                        #define Mtcr2_Ctcr1_eq       5      //Match tcr2, Capture tcr1, equal
                                        #define Mtcr1_Ctcr2_eq       6      //Match tcr1, Capture tcr2, equal
                                        #define Mtcr2_Ctcr2_eq       7      //Match tcr2, Capture tcr2, equal

ETPU "C" COMPILER 1.0.7.85                                              PAGE 65



                                        #define enable_output_buffer  8     // TBSx[3] = 1, TBSx[2:0] = 000
                                        #define disable_output_buffer 9     // TBSx[3] = 1, TBSx[2:0] = 001
                                        #define do_nothing       15     // TBSx[3] = 1, TBSx[2:0] = 111

                                        // Time Bases Selection for transition and capture
                                        #define Capture_tcr1        0       //TBSx[2] = 0
                                        #define Capture_tcr2        2       //TBSx[2] = 1

                                        // Tooth Program Register structure

                                        struct tpr_struct {
                                          int TICKS   : 10;
                                          int TPR10   : 1;
                                          int HOLD    : 1;
                                          int IPH     : 1;
                                          int MISSCNT : 2;
                                          int LAST    : 1;
                                          } ;

                                        // pin definitions
                                        //   pin = pin_high;
                                        #define pin_opacA  0
                                        #define pin_opacB  1
                                        #define pin_high   2
                                        #define pin_low    4

                                        #endif /* __ETPUC_H */


                                        #ifdef CAM_FUNCTION_NUMBER
0002                                    #pragma ETPU_function CamDetect, alternate @ CAM_FUNCTION_NUMBER;
                                        #else
                                        #pragma ETPU_function CamDetect, alternate;
                                        #endif

00E5                                    #define CAM_FLAGS_OTHER                 ((flag0 == 0) && (flag1 == 0))
00E6                                    #define CAM_FLAGS_COUNTING              ((flag0 == 0) && (flag1 == 1))
00E7                                    #define CAM_FLAGS_TOOTH_AFTER_MARK      ((flag0 == 1) && (flag1 == 0))
00E8                                    #define CAM_FLAGS_TOOTH_BEFORE_MARK     ((flag0 == 1) && (flag1 == 1))

00E9                                    #define SET_CAM_FLAGS_OTHER()             {flag0 = 0; flag1 = 0;}
00EA                                    #define SET_CAM_FLAGS_COUNTING()          {flag0 = 0; flag1 = 1;}
00EB                                    #define SET_CAM_FLAGS_TOOTH_AFTER_MARK()   {flag0 = 1; flag1 = 0;}
00EC                                    #define SET_CAM_FLAGS_TOOTH_BEFORE_MARK()  {flag0 = 1; flag1 = 1;}

                                        enum EM_CAM_STATES
                                        {
                                            CAM_FIRST_EDGE,
                                            CAM_SECOND_EDGE,
                                            CAM_TEST_POSSIBLE_MARK,
                                            CAM_VERIFY_MARK,
                                            CAM_MARK_VERIFIED,
                                            CAM_COUNTING,
                                            CAM_TOOTH_BEFORE_MARK,

ETPU "C" COMPILER 1.0.7.85                                              PAGE 66


                                            CAM_TOOTH_AFTER_MARK
                                        };

00000000                                #define CAM_NO_ERROR            0
00000001                                #define CAM_INVALID_M1          1
00000002                                #define CAM_INVALID_M2          2

00000007                                #define CAM_INIT    7

                                        #endif

                                        /*******************************************************************************
                                         * CamReinit
                                         *
                                         * 描述:凸轮检测重新初始化，用于未检测到凸轮或曲轴停车
                                         *
                                         * 参数：
                                         * 输入参数:
                                         *     crankChannel: 曲轴通道
                                         *     state: 调用该函数前凸轮的同步状态
                                         *
                                         * 输出参数:
                                         *
                                         * 备注:
                                         *
                                         * 遗留问题:
                                         ******************************************************************************/
                                        void CamReinit(unsigned int8 crankChannel,
                                                       unsigned int8 state)
0008 000C                               {
063C 3FFFAFF2   alu p31_24 = 0 .             gCamState = CAM_FIRST_EDGE;
0640 CFFFF101   ram 0004 = p31_24.         
0644 FFF8FCF9   Clear flag0.                SET_CAM_FLAGS_OTHER();

0648 CFEAF103   ram p31_24 = 000C;          if (state != gCamState)
                    Clear flag1.        
064C 3BF20FF4   alu a = p31_24 ,ccs.    
0650 CFEFF101   ram p31_24 = 0004.      
0654 3BF24FF4   alu diob = p31_24 ,ccs.    
0658 3879FFF4   alu nil = a - diob ,ccs.         
                                        
065C F0C8335F   if z==1 jump 0668,flush.    {
065C F0C8335F   if z==1 jump 0668,flush.         
                                        
0660 CFEFF102   ram p31_24 = 0008.              LinkToChannel(crankChannel);
                                            }

0664 3BF21FD4   alu link = p31_24 ,ccs.         
0668                                        ClearMatchALatch();
                                            ClearMatchBLatch();
                                            ClearTransLatch();
0668 7FEC2EBB   alu erta = tcr1 ,ccs;        SetupMatch_A(tcr1, Mtcr1_Ctcr1_ge, match_no_change);
                    chan clr_mrla,         
                    clr_mrlb,clr_tdl.         
066C 48F0FE7F   chan opaca = no_change,         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 67


                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
0670 FF3FFCFB   chan mtd = enable_mtsr.         
0674 59E0FFFF   chan ipaca = low_high,        SetupCaptureTrans_A(Capture_tcr1, low_high);
                    tbsa = mtcr1_ctcr1_ge         
                    ,clr_tdl.           
0678 FFFFCCF9   return,noflush.         }
067C FF3FFCFB   chan mtd = enable_mtsr.         

                                        /*******************************************************************************
                                         * CamDetect
                                         *
                                         * 描述:凸轮检测
                                         *
                                         * 参数：
                                         * 输入参数:
                                         *     errorStatus: 凸轮检测错误
                                         *     crankChannel: 曲轴通道
                                         *     firstTimeout: 首次的超时时间
                                         *     winRatioNormal: 正常齿的窗口系数，系数被乘数为正常齿周期
                                         *     winRatioACMark: 下一个齿是标记齿的窗口系数
                                         *     winRatioAFMark: 下一个齿是标记齿后的齿的窗口系数
                                         *     markRatio: 标记齿周期的判断系数
                                         *     camPeriodA: 凸轮齿的周期
                                         *     edgeAngle: 标记齿上升沿对应的角度计数
                                         *
                                         * 输出参数:
                                         *
                                         * 备注:
                                         *
                                         * 遗留问题:
                                         ******************************************************************************/
                                        void CamDetect(unsigned int8 errorStatus,
                                                       unsigned int8 crankChannel,
                                                       unsigned int24 firstTimeout,
                                                       unsigned fract24 winRatioNormal,
                                                       unsigned fract24 winRatioACMark,
                                                       unsigned fract24 winRatioAFMark,
                                                       unsigned fract24 markRatio,
                                                       unsigned int24 camPeriodA,
                                                       unsigned int24 edgeAngle)
0000 0001 0005 0009 000D 0011 0015 0019     {
0021                                        static unsigned int24 lastToothTime;
0025                                        static unsigned int24 toothTime;
0029                                        static unsigned int24 camPeriodB;
002D                                        static unsigned int24 halfWinWidth;
                                            
                                            /* 初始化线程 */
                                            if (HostServiceRequest == CAM_INIT)
                                            {
                                                DisableMatchesInThread();
                                                OnTransA(NoDetect);
                                                OnTransB(NoDetect);
                                                ClearLSRLatch();

ETPU "C" COMPILER 1.0.7.85                                              PAGE 68


                                                ClearTransLatch();
                                                ClearMatchAEvent();
                                                ClearMatchBEvent();

                                                /* 设置通道模式，窗口内捕获 */
                                                SetChannelMode(m2_o_st);

0680 580FF6B1   chan ipaca = no_detect,         
                    ipacb = no_detect,         
                    m2_o_st,clr_lsr,         
                    clr_mrla,clr_mrlb,         
                    clr_tdl.            
0684 FFF8FCF9   Clear flag0.                    SET_CAM_FLAGS_OTHER();
0688 0C0FAF1E   alu p31_24 = #0x00;             gCamState = CAM_FIRST_EDGE;
                    Clear flag1.         
068C CFFFF101   ram 0004 = p31_24.         
0690 CFFFFD00   ram PRAM0 = #0(8) .             errorStatus = CAM_NO_ERROR;

0694 39FC2FF4   alu erta = tcr1 + 1 ,ccs            SetupMatch_A(tcr1 + 1, Mtcr1_Ctcr1_ge, match_no_change);
                    .                   
0698 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
069C FF3FFCFB   chan mtd = enable_mtsr.         
06A0                                            DetectARisingEdge();
06A0 51FFFFFF   chan ipaca = low_high.        }
008A 01 A0        02 A05 P01 MD 0680  HSR 6/7   lsr x  m1 x  m2 x  pin x  flag1 x  flag0 x                             
                                         
0000             Thread Local RAM size                                   
                                            /* 凸轮正常齿 */
                                            else if (m1 == 1 && m2 == 1 && CAM_FLAGS_COUNTING)
                                            {
                                                DisableMatchesInThread();
                                                
                                                /* 若transA有效，则没有超时，正常 */
                                                if (IsTransALatched())
06A4 F200395F   if tdl1==0 jump 0728,    
                    flush.              
06A8 9FEFFB02   ram p23_0 = 0009.               {
06AC                                                gCamCount++;
06AC 9DF87A02   alu p = p + 1 ,ccs;         
                    ram 0009 = p23_0.         
06B0 BFEFFB89   ram p23_0 = PRAM37.                 lastToothTime = toothTime;
06B4 BFFFFB88   ram PRAM33 = p23_0.         
06B8 BFFE7A89   alu p = erta ,ccs;                  toothTime = erta;
                    ram PRAM37 = p23_0.         
06BC BFEFFB89   ram p23_0 = PRAM37.                 camPeriodA = toothTime - lastToothTime;
06C0 BFE80A88   alu a = p ,ccs;         
                    ram p23_0 = PRAM33.         
                                                    
                                                    /* 如果为标记前的齿，则下次转到缺齿前处理 */
06C4 BC197A86   alu p = a - p ,ccs;     
                    ram PRAM25 = p23_0.    
06C8 9FEFFB02   ram p23_0 = 0009.                   if (gCamCount == 6)

ETPU "C" COMPILER 1.0.7.85                                              PAGE 69


06CC 0818FBCA   alu nil = p ^ #0x000006,                {
                    ccs.                
06D0 F0C0373F   if z==0 jump 06E4,flush.         
                                        
06D4 1C1FAFDE   alu p31_24 = #0x06.                     gCamState = CAM_TOOTH_BEFORE_MARK;
06D8 CFFFF101   ram 0004 = p31_24.         
06DC FFF9FCF9   Set flag0.                              SET_CAM_FLAGS_TOOTH_BEFORE_MARK();
                                                    }
                                                    
06E0 FFFBFCF9   Set flag1.              
06E4 BFEFFB86   ram p23_0 = PRAM25.                 halfWinWidth = camPeriodA * winRatioNormal;
06E8 BFE80A82   alu a = p ,ccs;         
                    ram p23_0 = PRAM9.         
06EC 3B190FE9   mdu a multu p ,ccs.         
06F0 F348379F   if mb==1 jump 06F0,flush         
                    .                   

06F4 BFD77A8B   alu p = mach ,ccs;         
                    ram PRAM45 = p23_0.         
06F8                                                ClearTransLatch();
                                                    ClearMatchALatch();
                                                    ClearMatchBLatch();
                                                    SetupMatch_A(toothTime + camPeriodA - halfWinWidth,
06F8 DFE75A89   ram p23_0 = PRAM37;                              Mtcr1_Ctcr1_ge, match_no_change);
                    chan clr_mrla,         
                    clr_mrlb,clr_tdl.         
06FC BFE80A86   alu a = p ,ccs;         
                    ram p23_0 = PRAM25.         
0700 BF090A8B   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM45.         
0704 38192FF4   alu erta = a - p ,ccs.         
0708 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
                                                    SetupMatch_B(toothTime + camPeriodA + halfWinWidth,
070C DF2FFA89   ram p23_0 = PRAM37;                              Mtcr1_Ctcr2_ge, match_no_change);
                    chan mtd = enable_mtsr         
                    .                   
0710 BFE80A86   alu a = p ,ccs;         
                    ram p23_0 = PRAM25.         
0714 BF090A8B   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM45.         
0718 3B193FF4   alu ertb = a + p ,ccs.         
071C 4F1F2F9F   chan opacb = no_change,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
                                                }
                                                /* 若transA无效，则说明超时，重新检测 */
0720 F7E03A1F   jump 0740,noflush.                        else
0724 FF3FFCFB   chan mtd = enable_mtsr.         
                                                {
0728 BFEFFB80   ram p23_0 = PRAM1.                  CamReinit(crankChannel, gCamState);
072C 3BF7AFF4   alu p31_24 = p23_16 ,ccs         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 70


                    .                   
0730 CFFFF102   ram 0008 = p31_24.         
0734 CFEFF101   ram p31_24 = 0004.         
0738 CFFFF103   ram 000C = p31_24.         
073C FFC031FF   call 063C,flush.         
                                                }
0740 6FFFFFFF   end.                        }
00B4 01 A9        02 A1A P01 MD 06A4  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 1  flag0 0                             
00BC 01 A9        02 A1E P01 MD 06A4  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 1  flag0 0                             
                                         
0000             Thread Local RAM size                                   
                                            /* 标记前的齿，设置标记齿的窗口大小 */
                                            else if (m1 == 1 && m2 == 1 && CAM_FLAGS_TOOTH_BEFORE_MARK)
                                            {
                                                DisableMatchesInThread();

                                                if (IsTransALatched())
0744 F2003E3F   if tdl1==0 jump 07C4,    
                    flush.              
0748 9FEFFB02   ram p23_0 = 0009.               {
074C                                                gCamCount++;
074C 9DF87A02   alu p = p + 1 ,ccs;         
                    ram 0009 = p23_0.         
0750 BFEFFB89   ram p23_0 = PRAM37.                 lastToothTime = toothTime;
0754 BFFFFB88   ram PRAM33 = p23_0.         
0758 BFFE7A89   alu p = erta ,ccs;                  toothTime = erta;
                    ram PRAM37 = p23_0.         
075C BFEFFB89   ram p23_0 = PRAM37.                 camPeriodA = toothTime - lastToothTime;
0760 BFE80A88   alu a = p ,ccs;         
                    ram p23_0 = PRAM33.         
                                                    
0764 BC197A86   alu p = a - p ,ccs;         
                    ram PRAM25 = p23_0.         
0768 1C1FAFFE   alu p31_24 = #0x07.                 gCamState = CAM_TOOTH_AFTER_MARK;
076C CFFFF101   ram 0004 = p31_24.         
0770 FFF9FCF9   Set flag0.                          SET_CAM_FLAGS_TOOTH_AFTER_MARK();
0774 CFEAFA80   ram p23_0 = PRAM1;                  LinkToChannel(crankChannel);
                    Clear flag1.         
                                                    
0778 BFA71A86   alu link = p23_16 ,ccs;                halfWinWidth = camPeriodA * winRatioACMark;
                    ram p23_0 = PRAM25.         
077C BFE80A83   alu a = p ,ccs;         
                    ram p23_0 = PRAM13.         
0780 3B190FE9   mdu a multu p ,ccs.         
0784 F3483C3F   if mb==1 jump 0784,flush         
                    .                   
0788 BFD77A8B   alu p = mach ,ccs;         
                    ram PRAM45 = p23_0.         
078C                                                ClearTransLatch();
                                                    ClearMatchALatch();
                                                    ClearMatchBLatch();
                                                    SetupMatch_A(toothTime + camPeriodA / 4 - halfWinWidth,
078C DFE75A86   ram p23_0 = PRAM25;                              Mtcr1_Ctcr1_ge, match_no_change);
                    chan clr_mrla,         
                    clr_mrlb,clr_tdl.         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 71


0790 18080B92   alu a = p >>2,ccs.         
0794 BFEFFB89   ram p23_0 = PRAM37.         
0798 BF090A8B   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM45.         
079C 38192FF4   alu erta = a - p ,ccs.         
07A0 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
                                                    SetupMatch_B(toothTime + camPeriodA / 4 + halfWinWidth,
07A4 DF2FFA86   ram p23_0 = PRAM25;                              Mtcr1_Ctcr2_ge, match_no_change);
                    chan mtd = enable_mtsr         
                    .                   
07A8 18080B92   alu a = p >>2,ccs.         
07AC BFEFFB89   ram p23_0 = PRAM37.         
07B0 BF090A8B   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM45.         
07B4 3B193FF4   alu ertb = a + p ,ccs.         
07B8 4F1F2F9F   chan opacb = no_change,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
                                                }
07BC F7E03EFF   jump 07DC,noflush.                        else
07C0 FF3FFCFB   chan mtd = enable_mtsr.         
                                                {
07C4 BFEFFB80   ram p23_0 = PRAM1.                  CamReinit(crankChannel, gCamState);
07C8 3BF7AFF4   alu p31_24 = p23_16 ,ccs         
                    .                   
07CC CFFFF102   ram 0008 = p31_24.         
07D0 CFEFF101   ram p31_24 = 0004.         
07D4 CFFFF103   ram 000C = p31_24.         
07D8 FFC031FF   call 063C,flush.         
                                                }
07DC 6FFFFFFF   end.                        }
00B6 01 D1        02 A1B P01 MD 0744  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 1  flag0 1                             
00BE 01 D1        02 A1F P01 MD 0744  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 1  flag0 1                             
                                         
0000             Thread Local RAM size                                   
                                            /* 标记后的齿，对标记齿周期进行验证，并设置其窗口大小 */
                                            else if (m1 == 1 && m2 == 1 && CAM_FLAGS_TOOTH_AFTER_MARK)
                                            {
                                                DisableMatchesInThread();

                                                if (IsTransALatched())
07E0 F200457F   if tdl1==0 jump 08AC,    
                    flush.              
07E4                                            {
07E4 9DFF7B02   alu p = 1 ;             
                    ram 0009 = p23_0.    
07E8 BFEFFB89   ram p23_0 = PRAM37.                 gCamCount = 1;
07EC                                                lastToothTime = toothTime;
07EC BFFFFB88   ram PRAM33 = p23_0.         
07F0 BFFE7A89   alu p = erta ,ccs;                  toothTime = erta;
                    ram PRAM37 = p23_0.         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 72


07F4 BFF37A87   alu p = ertb ,ccs;                  edgeAngle = ertb;
                    ram PRAM29 = p23_0.         
07F8 BFEFFB87   ram p23_0 = PRAM29.                 gCamEdgeAngle = edgeAngle;

                                                    /* 计算标记齿周期 */
07FC 9FFFFB01   ram 0005 = p23_0.         
0800 BFEFFB89   ram p23_0 = PRAM37.                 camPeriodB = toothTime - lastToothTime;
0804 BFE80A88   alu a = p ,ccs;         
                    ram p23_0 = PRAM33.         
                                                    /* 验证标记齿周期 */
0808 BC197A8A   alu p = a - p ,ccs;     
                    ram PRAM41 = p23_0.    
080C BFEFFB86   ram p23_0 = PRAM25.                 if (camPeriodB < camPeriodA * markRatio)
0810 BFE80A85   alu a = p ,ccs;                     {
                    ram p23_0 = PRAM21.         
0814 3B190FE9   mdu a multu p ,ccs.         
0818 F34840DF   if mb==1 jump 0818,flush         
                    .                   
081C BFC70A8A   alu a = mach ,ccs;         
                    ram p23_0 = PRAM41.         
0820 3819FFF4   alu nil = a - p ,ccs.         
0824 F4C8449F   if ls jump 0890,flush.         
0828 1C1FAFBE   alu p31_24 = #0x05.                     gCamState = CAM_COUNTING;
082C CFFFF101   ram 0004 = p31_24.         
0830 FFF8FCF9   Clear flag0.                            SET_CAM_FLAGS_COUNTING();
0834 CFEBFA80   ram p23_0 = PRAM1;                      LinkToChannel(crankChannel);
                    Set flag1.          
                                                        
0838 BFA71A86   alu link = p23_16 ,ccs;                    halfWinWidth = camPeriodA * winRatioAFMark;
                    ram p23_0 = PRAM25.         
083C BFE80A84   alu a = p ,ccs;         
                    ram p23_0 = PRAM17.         
0840 3B190FE9   mdu a multu p ,ccs.         
0844 F348423F   if mb==1 jump 0844,flush         
                    .                   
0848 BFD77A8B   alu p = mach ,ccs;         
                    ram PRAM45 = p23_0.         
084C                                                    ClearTransLatch();
                                                        ClearMatchALatch();
                                                        ClearMatchBLatch();
                                                        SetupMatch_A(toothTime + camPeriodB * 3 - halfWinWidth,
084C DFE75A8A   ram p23_0 = PRAM41;                                  Mtcr1_Ctcr1_ge, match_no_change);
                    chan clr_mrla,         
                    clr_mrlb,clr_tdl.         
0850 0808F3EA   mdu p multu #0x03,ccs.         
0854 F34842BF   if mb==1 jump 0854,flush         
                    .                   
0858 BFC80A89   alu a = macl ,ccs;         
                    ram p23_0 = PRAM37.         
085C BF090A8B   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM45.         
0860 38192FF4   alu erta = a - p ,ccs.         
0864 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 73


                    .                   
                                                        SetupMatch_B(toothTime + camPeriodB * 3 + halfWinWidth,
0868 DF2FFA8A   ram p23_0 = PRAM41;                                  Mtcr1_Ctcr2_ge, match_no_change);
                    chan mtd = enable_mtsr         
                    .                   
086C 0808F3EA   mdu p multu #0x03,ccs.         
0870 F348439F   if mb==1 jump 0870,flush         
                    .                   
0874 BFC80A89   alu a = macl ,ccs;         
                    ram p23_0 = PRAM37.         
0878 BF090A8B   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM45.         
087C 3B193FF4   alu ertb = a + p ,ccs.         
0880 4F1F2F9F   chan opacb = no_change,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
0884 DF2FFA88   ram p23_0 = PRAM33;                     toothTime = lastToothTime;
                    chan mtd = enable_mtsr         
                    .                   
                                                    }
0888 F7E0463F   jump 08C4,noflush.                            else
088C BFFFFB89   ram PRAM37 = p23_0.         
                                                    {
0890 BFEFFB80   ram p23_0 = PRAM1.                      CamReinit(crankChannel, gCamState);
0894 3BF7AFF4   alu p31_24 = p23_16 ,ccs         
                    .                   
0898 CFFFF102   ram 0008 = p31_24.         
089C CFEFF101   ram p31_24 = 0004.         
08A0 CFFFF103   ram 000C = p31_24.         
08A4 FFC031FF   call 063C,flush.         
                                                    }
                                                }
08A8 F7C0463F   jump 08C4,flush.                        else
                                                {
08AC BFEFFB80   ram p23_0 = PRAM1.                  CamReinit(crankChannel, gCamState);
08B0 3BF7AFF4   alu p31_24 = p23_16 ,ccs         
                    .                   
08B4 CFFFF102   ram 0008 = p31_24.         
08B8 CFEFF101   ram p31_24 = 0004.         
08BC CFFFF103   ram 000C = p31_24.         
08C0 FFC031FF   call 063C,flush.         
                                                }
08C4 6FFFFFFF   end.                        }
00B2 01 F8        02 A19 P01 MD 07E0  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 0  flag0 1                             
00BA 01 F8        02 A1D P01 MD 07E0  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 0  flag0 1                             
                                         
0000             Thread Local RAM size                                   
                                            /* 初始化后还没有进入正常检测 */
                                            else if (m1 == 1 && m2 == 1 && CAM_FLAGS_OTHER)
                                            {
                                                DisableMatchesInThread();
                                                if (IsTransALatched())
08C8 F2005D1F   if tdl1==0 jump 0BA0,    
                    flush.              

ETPU "C" COMPILER 1.0.7.85                                              PAGE 74


08CC BFEFFB89   ram p23_0 = PRAM37.             {
08D0                                                lastToothTime = toothTime;
08D0 BFFFFB88   ram PRAM33 = p23_0.         
08D4 BFFE7A89   alu p = erta ,ccs;                  toothTime = erta;
                    ram PRAM37 = p23_0.         
                                                    ClearTransLatch();
                                                    
                                                    /* 根据凸轮状态机决定要执行的操作 */
08D8 F7E05B7F   jump 0B6C,noflush.                            switch (gCamState)
08DC 7FEFFFFF   chan clr_tdl.           
                                                    {
                                                        /* 首次检测 */
                                                        case CAM_FIRST_EDGE:
08E0 3DFFAFF4   alu p31_24 = 1 .                            gCamState = CAM_SECOND_EDGE;
08E4 CFFFF101   ram 0004 = p31_24.         
08E8 3BFC2FF4   alu erta = tcr1 ,ccs.                        SetupMatch_A(tcr1, Mtcr1_Ctcr1_ge, match_no_change);
08EC 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
                                                            SetupMatch_B(toothTime + firstTimeout,
08F0 DF2FFA89   ram p23_0 = PRAM37;                                      Mtcr1_Ctcr2_ge, match_no_change);
                    chan mtd = enable_mtsr         
                    .                   
08F4 BFE80A81   alu a = p ,ccs;         
                    ram p23_0 = PRAM5.         
08F8 3B193FF4   alu ertb = a + p ,ccs.         
08FC 4F1F2F9F   chan opacb = no_change,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
0900 F7E05DDF   jump 0BB8,noflush.                                    break;
0904 FF3FFCFB   chan mtd = enable_mtsr.         
                                                        /* 第二个跳变，即第一个周期 */
                                                        case CAM_SECOND_EDGE:
0908 BFEFFB89   ram p23_0 = PRAM37.                         camPeriodA = toothTime - lastToothTime;
090C BFE80A88   alu a = p ,ccs;         
                    ram p23_0 = PRAM33.         
0910 BC197A86   alu p = a - p ,ccs;         
                    ram PRAM25 = p23_0.         
0914 1C0FAFDE   alu p31_24 = #0x02.                         gCamState = CAM_TEST_POSSIBLE_MARK;
0918 CFFFF101   ram 0004 = p31_24.         

091C BFEFFB86   ram p23_0 = PRAM25.                         halfWinWidth = camPeriodA * winRatioACMark;
0920 BFE80A83   alu a = p ,ccs;         
                    ram p23_0 = PRAM13.         
0924 3B190FE9   mdu a multu p ,ccs.         
0928 F348495F   if mb==1 jump 0928,flush         
                    .                   
092C BFD77A8B   alu p = mach ,ccs;         
                    ram PRAM45 = p23_0.         
0930 3BFC2FF4   alu erta = tcr1 ,ccs.                        SetupMatch_A(tcr1, Mtcr1_Ctcr1_ge, match_no_change);
0934 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 75


                    .                   
                                                            SetupMatch_B(toothTime + camPeriodA * 4 + halfWinWidth,
0938 DF2FFA86   ram p23_0 = PRAM25;                                      Mtcr1_Ctcr2_ge, match_no_change);
                    chan mtd = enable_mtsr         
                    .                   
093C B3080A89   alu a = p + p <<1 ,ccs;         
                    ram p23_0 = PRAM37.         
0940 BF090A8B   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM45.         
0944 3B193FF4   alu ertb = a + p ,ccs.         
0948 4F1F2F9F   chan opacb = no_change,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
094C F7E05DDF   jump 0BB8,noflush.                                    break;
0950 FF3FFCFB   chan mtd = enable_mtsr.         
                                                        /* 检测标记齿 */
                                                        case CAM_TEST_POSSIBLE_MARK:
0954 BFEFFB89   ram p23_0 = PRAM37.                         camPeriodB = toothTime - lastToothTime;
0958 BFE80A88   alu a = p ,ccs;         
                    ram p23_0 = PRAM33.         
                                                            /* 标记齿周期理论上为正常周期的1/4，若小于正常周期乘比例
                                                             * 因子，则认为正确 */
095C BC197A8A   alu p = a - p ,ccs;     
                    ram PRAM41 = p23_0.    
0960 BFEFFB86   ram p23_0 = PRAM25.                         if (camPeriodB < camPeriodA * markRatio)
0964 BFE80A85   alu a = p ,ccs;                             {
                    ram p23_0 = PRAM21.         
0968 3B190FE9   mdu a multu p ,ccs.         
096C F3484B7F   if mb==1 jump 096C,flush         
                    .                   
0970 BFC70A8A   alu a = mach ,ccs;         
                    ram p23_0 = PRAM41.         
0974 3819FFF4   alu nil = a - p ,ccs.         
0978 F4C84EFF   if ls jump 09DC,flush.         
097C 1C0FAFFE   alu p31_24 = #0x03.                             gCamState = CAM_VERIFY_MARK;
0980 CFFFF101   ram 0004 = p31_24.         
0984 BFEFFB86   ram p23_0 = PRAM25.                             halfWinWidth = camPeriodA * winRatioAFMark;
0988 BFE80A84   alu a = p ,ccs;         
                    ram p23_0 = PRAM17.         
098C 3B190FE9   mdu a multu p ,ccs.         
0990 F3484C9F   if mb==1 jump 0990,flush         
                    .                   
0994 BFD77A8B   alu p = mach ,ccs;         
                    ram PRAM45 = p23_0.         
0998 BFF37A87   alu p = ertb ,ccs;                              edgeAngle = ertb;
                    ram PRAM29 = p23_0.         
                                                                
                                                                SetupMatch_A(toothTime + camPeriodB * 3 - halfWinWidth,
099C BFEFFB8A   ram p23_0 = PRAM41.                                          Mtcr1_Ctcr1_ge, match_no_change);
09A0 0808F3EA   mdu p multu #0x03,ccs.         
09A4 F3484D3F   if mb==1 jump 09A4,flush         
                    .                   
09A8 BFC80A89   alu a = macl ,ccs;         
                    ram p23_0 = PRAM37.         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 76


09AC BF090A8B   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM45.         
09B0 38192FF4   alu erta = a - p ,ccs.         
09B4 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
                                                                SetupMatch_B(toothTime + camPeriodB * 3 + halfWinWidth,
09B8 DF2FFA8A   ram p23_0 = PRAM41;                                          Mtcr1_Ctcr2_ge, match_no_change);
                    chan mtd = enable_mtsr         
                    .                   
09BC 0808F3EA   mdu p multu #0x03,ccs.         
09C0 F3484E1F   if mb==1 jump 09C0,flush         
                    .                   
09C4 BFC80A89   alu a = macl ,ccs;         
                    ram p23_0 = PRAM37.         
09C8 BF090A8B   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM45.         
09CC 3B193FF4   alu ertb = a + p ,ccs.         
09D0 4F1F2F9F   chan opacb = no_change,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
                                                            }
                                                            /* 若该齿周期不满足标记齿特性，则继续查找标记齿 */
09D4 F7E05DDF   jump 0BB8,noflush.                                    else
09D8 FF3FFCFB   chan mtd = enable_mtsr.         
                                                            {
09DC BFEFFB8A   ram p23_0 = PRAM41.                             camPeriodA = camPeriodB;
09E0 BFFFFB86   ram PRAM25 = p23_0.         
09E4 BFE80A83   alu a = p ,ccs;                                 halfWinWidth = camPeriodA * winRatioACMark;
                    ram p23_0 = PRAM13.         
09E8 3B190FE9   mdu a multu p ,ccs.         
09EC F3484F7F   if mb==1 jump 09EC,flush         
                    .                   
                                                                
                                                                SetupMatch_A(toothTime + camPeriodA / 4 - halfWinWidth,
09F0 BFD77A8B   alu p = mach ,ccs;         
                    ram PRAM45 = p23_0.         
09F4 BFEFFB86   ram p23_0 = PRAM25.                                          Mtcr1_Ctcr1_ge, match_no_change);
09F8 18080B92   alu a = p >>2,ccs.         
09FC BFEFFB89   ram p23_0 = PRAM37.         
0A00 BF090A8B   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM45.         
0A04 38192FF4   alu erta = a - p ,ccs.         
0A08 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
                                                                SetupMatch_B(toothTime + camPeriodA * 4 / 3 + halfWinWidth,
0A0C DF2FFA86   ram p23_0 = PRAM25;                                          Mtcr1_Ctcr2_ge, match_no_change);
                    chan mtd = enable_mtsr         
                    .                   
0A10 3B180FF5   alu a = p + p <<1,ccs.         
0A14 0809F7E2   mdu a div #0x03,ccs.         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 77


0A18 F34850DF   if mb==1 jump 0A18,flush         
                    .                   
0A1C BFC80A89   alu a = macl ,ccs;         
                    ram p23_0 = PRAM37.         
0A20 BF090A8B   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM45.         
0A24 3B193FF4   alu ertb = a + p ,ccs.         
0A28 4F1F2F9F   chan opacb = no_change,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
0A2C FF3FFCFB   chan mtd = enable_mtsr.         
0A30                                                        }
0A30 F7C05DDF   jump 0BB8,flush.                                    break;
                                                        /* 验证标记齿，根据标记齿周期和标记齿后的齿周期，验证标记齿是否
                                                         * 合法 */
                                                        case CAM_VERIFY_MARK:
0A34 BFEFFB8A   ram p23_0 = PRAM41.                         camPeriodA = camPeriodB + toothTime - lastToothTime;
0A38 BFE80A89   alu a = p ,ccs;         
                    ram p23_0 = PRAM37.         
0A3C BF090A88   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM33.         
0A40 BC197A86   alu p = a - p ,ccs;     
                    ram PRAM25 = p23_0.    
0A44 BFE80A85   alu a = p ,ccs;                             if (camPeriodB < camPeriodA * markRatio)
                    ram p23_0 = PRAM21.    
0A48 3B190FE9   mdu a multu p ,ccs.     
0A4C F348527F   if mb==1 jump 0A4C,flush    
                    .                   
0A50 BFC70A8A   alu a = mach ,ccs;                          {
                    ram p23_0 = PRAM41.         
0A54 3819FFF4   alu nil = a - p ,ccs.         
0A58 F4C8559F   if ls jump 0AB0,flush.         
0A5C 1C1FAF9E   alu p31_24 = #0x04.                             gCamState = CAM_MARK_VERIFIED;
0A60 CFFFF101   ram 0004 = p31_24.         
0A64 1C0F7FDE   alu p = #0x02.                                  gCamCount = 2;
                                                                
0A68 9FFFFB02   ram 0009 = p23_0.         
0A6C BFEFFB86   ram p23_0 = PRAM25.                             halfWinWidth = camPeriodA * winRatioNormal;
0A70 BFE80A82   alu a = p ,ccs;         
                    ram p23_0 = PRAM9.         
0A74 3B190FE9   mdu a multu p ,ccs.         
0A78 F34853DF   if mb==1 jump 0A78,flush         
                    .                   
                                                                SetupMatch_A(toothTime + camPeriodA - halfWinWidth,
0A7C BFD77A8B   alu p = mach ,ccs;         
                    ram PRAM45 = p23_0.         
0A80 BFEFFB89   ram p23_0 = PRAM37.                                          Mtcr1_Ctcr1_ge, match_no_change);
0A84 BFE80A86   alu a = p ,ccs;         
                    ram p23_0 = PRAM25.         
0A88 BF090A8B   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM45.         
0A8C 38192FF4   alu erta = a - p ,ccs.         
0A90 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 78


                    ,write_erta,clr_mrla         
                    .                   
                                                                SetupMatch_B(toothTime + camPeriodA + halfWinWidth,
0A94 DF2FFA89   ram p23_0 = PRAM37;                                          Mtcr1_Ctcr2_ge, match_no_change);
                    chan mtd = enable_mtsr         
                    .                   
0A98 BFE80A86   alu a = p ,ccs;         
                    ram p23_0 = PRAM25.         
0A9C BF090A8B   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM45.         
0AA0 3B193FF4   alu ertb = a + p ,ccs.         
0AA4 4F1F2F9F   chan opacb = no_change,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
                                                            }
0AA8 F7E05DDF   jump 0BB8,noflush.                                    else
0AAC FF3FFCFB   chan mtd = enable_mtsr.         
                                                            {
0AB0 1C0FAFDE   alu p31_24 = #0x02.                             gCamState = CAM_TEST_POSSIBLE_MARK;
0AB4 CFFFF101   ram 0004 = p31_24.         
                                                                
0AB8 BFEFFB86   ram p23_0 = PRAM25.                             halfWinWidth = camPeriodA * winRatioACMark;
0ABC BFE80A83   alu a = p ,ccs;         
                    ram p23_0 = PRAM13.         
0AC0 3B190FE9   mdu a multu p ,ccs.         
0AC4 F348563F   if mb==1 jump 0AC4,flush         
                    .                   
                                                                SetupMatch_A(toothTime + camPeriodA / 4 - halfWinWidth,
0AC8 BFD77A8B   alu p = mach ,ccs;         
                    ram PRAM45 = p23_0.         
0ACC BFEFFB86   ram p23_0 = PRAM25.                                          Mtcr1_Ctcr1_ge, match_no_change);
0AD0 18080B92   alu a = p >>2,ccs.         
0AD4 BFEFFB89   ram p23_0 = PRAM37.         
0AD8 BF090A8B   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM45.         
0ADC 38192FF4   alu erta = a - p ,ccs.         
0AE0 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
                                                                SetupMatch_B(toothTime + camPeriodA + halfWinWidth,
0AE4 DF2FFA89   ram p23_0 = PRAM37;                                          Mtcr1_Ctcr2_ge, match_no_change);
                    chan mtd = enable_mtsr         
                    .                   
0AE8 BFE80A86   alu a = p ,ccs;         
                    ram p23_0 = PRAM25.         
0AEC BF090A8B   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM45.         
0AF0 3B193FF4   alu ertb = a + p ,ccs.         
0AF4 4F1F2F9F   chan opacb = no_change,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
0AF8 FF3FFCFB   chan mtd = enable_mtsr.         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 79


0AFC                                                        }
0AFC F7C05DDF   jump 0BB8,flush.                                    break;
                                                        /* 标记齿已验证，可转入正常执行 */
                                                        case CAM_MARK_VERIFIED:
0B00 9FEFFB02   ram p23_0 = 0009.                           gCamCount++;
0B04 9DF87A02   alu p = p + 1 ,ccs;         
                    ram 0009 = p23_0.         
0B08 1C1FAFBE   alu p31_24 = #0x05.                         gCamState = CAM_COUNTING;
0B0C CFFFF101   ram 0004 = p31_24.         
0B10 FFF8FCF9   Clear flag0.                                SET_CAM_FLAGS_COUNTING();
0B14 CFEBFA80   ram p23_0 = PRAM1;                          LinkToChannel(crankChannel);
                    Set flag1.          

0B18 BFA71A89   alu link = p23_16 ,ccs;                        camPeriodA = toothTime - lastToothTime;
                    ram p23_0 = PRAM37.         
0B1C BFE80A88   alu a = p ,ccs;         
                    ram p23_0 = PRAM33.         
0B20 BC197A86   alu p = a - p ,ccs;         
                    ram PRAM25 = p23_0.         
0B24 BFE80A82   alu a = p ,ccs;                             halfWinWidth = camPeriodA * winRatioNormal;
                    ram p23_0 = PRAM9.         
0B28 3B190FE9   mdu a multu p ,ccs.         
0B2C F348597F   if mb==1 jump 0B2C,flush         
                    .                   
                                                            SetupMatch_A(toothTime + camPeriodA - halfWinWidth,
0B30 BFD77A8B   alu p = mach ,ccs;         
                    ram PRAM45 = p23_0.         
0B34 BFEFFB89   ram p23_0 = PRAM37.                                      Mtcr1_Ctcr1_ge, match_no_change);
0B38 BFE80A86   alu a = p ,ccs;         
                    ram p23_0 = PRAM25.         
0B3C BF090A8B   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM45.         
0B40 38192FF4   alu erta = a - p ,ccs.         
0B44 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
                                                            SetupMatch_B(toothTime + camPeriodA + halfWinWidth,
0B48 DF2FFA89   ram p23_0 = PRAM37;                                      Mtcr1_Ctcr2_ge, match_no_change);
                    chan mtd = enable_mtsr         
                    .                   
0B4C BFE80A86   alu a = p ,ccs;         
                    ram p23_0 = PRAM25.         
0B50 BF090A8B   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM45.         
0B54 3B193FF4   alu ertb = a + p ,ccs.         
0B58 4F1F2F9F   chan opacb = no_change,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
0B5C F7E05DDF   jump 0BB8,noflush.                                    break;
0B60 FF3FFCFB   chan mtd = enable_mtsr.         
                                                        default:
0B64 F7C05DDF   jump 0BB8,flush.                                    break;
0B68 F7C05DDF   jump 0BB8,flush.                            }

ETPU "C" COMPILER 1.0.7.85                                              PAGE 80


0B6C CFEFF101   ram p31_24 = 0004.         
0B70 3BF27FF4   alu p = p31_24 ,ccs.         
0B74 1C1F0F9E   alu a = #0x04.          
0B78 3838FFF4   alu nil = p - a ,ccs.         
0B7C F4E05B3F   if gt jump 0B64,noflush.         
                                        
0B80 3BF8AFF4   alu p31_24 = p ,ccs.         
0B84 FFDFDCF9   jump PC+p31_24,flush.         
0B88 F7C0471F   jump 08E0,flush.         
0B8C F7C0485F   jump 0908,flush.         
0B90 F7C04ABF   jump 0954,flush.         
0B94 F7C051BF   jump 0A34,flush.         
0B98 F7C0581F   jump 0B00,flush.         
                                                }
0B9C F7C05DDF   jump 0BB8,flush.                        else
                                                {
0BA0 BFEFFB80   ram p23_0 = PRAM1.                  CamReinit(crankChannel, gCamState);
0BA4 3BF7AFF4   alu p31_24 = p23_16 ,ccs         
                    .                   
0BA8 CFFFF102   ram 0008 = p31_24.         
0BAC CFEFF101   ram p31_24 = 0004.         
0BB0 CFFFF103   ram 000C = p31_24.         
0BB4 FFC031FF   call 063C,flush.         
                                                }
0BB8 6FFFFFFF   end.                        }
00B0 02 32        02 A18 P01 MD 08C8  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 0  flag0 0                             
00B8 02 32        02 A1C P01 MD 08C8  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 0  flag0 0                             
                                         
0000             Thread Local RAM size                                   
                                            else if (lsr == 1 && m1 == 0 && m2 == 0)
                                            {
                                                ClearLSRLatch();
0BBC 4FFFF7FF   chan clr_lsr.           
0BC0 BFEFFB80   ram p23_0 = PRAM1.              CamReinit(crankChannel, gCamState);
0BC4 3BF7AFF4   alu p31_24 = p23_16 ,ccs         
                    .                   
0BC8 CFFFF102   ram 0008 = p31_24.         
0BCC CFEFF101   ram p31_24 = 0004.         
0BD0 CFFFF103   ram 000C = p31_24.         
0BD4 FFC031FF   call 063C,flush.         
0BD8 6FFFFFFF   end.                        }
008C 42 EF        02 A06 P01 ME 0BBC  HSR 0     lsr 1  m1 0  m2 0  pin 0  flag1 x  flag0 x                             
008E 42 EF        02 A07 P01 ME 0BBC  HSR 0     lsr 1  m1 0  m2 0  pin 1  flag1 x  flag0 x                             
                                         
0000             Thread Local RAM size                                   
                                            else if (m1 == 1 && m2 == 0)
                                            {
                                                if (lsr == 1)
0BDC F300601F   if lsr==0 jump 0C00,    
                    flush.              
0BE0                                            {
0BE0 4FFFF7FF   chan clr_lsr.           
0BE4 BFEFFB80   ram p23_0 = PRAM1.                  ClearLSRLatch();
0BE8 3BF7AFF4   alu p31_24 = p23_16 ,ccs    
                    .                   

ETPU "C" COMPILER 1.0.7.85                                              PAGE 81


0BEC CFFFF102   ram 0008 = p31_24.      
0BF0 CFEFF101   ram p31_24 = 0004.                  CamReinit(crankChannel, gCamState);
0BF4 CFFFF103   ram 000C = p31_24.         
0BF8 FFC031FF   call 063C,flush.         
                                                }
0BFC F7C0607F   jump 0C0C,flush.                        else
                                                {
                                                    ClearTransLatch();
                                                    ClearMatchALatch();
0C00 DFE77880   ram p31_0 = PRAM0;                  errorStatus = errorStatus | CAM_INVALID_M1;
                    chan clr_mrla,         
                    clr_tdl.            
0C04 0802ABA2   alu p31_24 = p31_24 |          
                    #0x000001,ccs.         
                                                    SetGlobalException();
0C08 CFFFB980   ram PRAM0 = p31_24;         
                    chan excpr.         
0C0C                                            }
0C0C 6FFFFFFF   end.                        }
0090 42 F7        02 A08 P01 ME 0BDC  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 0  flag0 0                             
0092 42 F7        02 A09 P01 ME 0BDC  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 0  flag0 1                             
0094 42 F7        02 A0A P01 ME 0BDC  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 1  flag0 0                             
0096 42 F7        02 A0B P01 ME 0BDC  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 1  flag0 1                             
0098 42 F7        02 A0C P01 ME 0BDC  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 0  flag0 0                             
009A 42 F7        02 A0D P01 ME 0BDC  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 0  flag0 1                             
009C 42 F7        02 A0E P01 ME 0BDC  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 1  flag0 0                             
009E 42 F7        02 A0F P01 ME 0BDC  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 1  flag0 1                             
                                         
0000             Thread Local RAM size                                   
                                            else if (m1 == 0 && m2 == 1)
                                            {
                                                ClearTransLatch();
                                                ClearMatchBLatch();
0C10 DFE7D880   ram p31_0 = PRAM0;              errorStatus = errorStatus | CAM_INVALID_M2;
                    chan clr_mrlb,         
                    clr_tdl.            
0C14 0802ABC2   alu p31_24 = p31_24 |          
                    #0x000002,ccs.         
                                                SetGlobalException();
0C18 C7FFB980   ram PRAM0 = p31_24;         }
                    chan excpr;end.         
00A0 43 04        02 A10 P01 ME 0C10  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 0  flag0 0                             
00A2 43 04        02 A11 P01 ME 0C10  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 0  flag0 1                             
00A4 43 04        02 A12 P01 ME 0C10  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 1  flag0 0                             
00A6 43 04        02 A13 P01 ME 0C10  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 1  flag0 1                             
00A8 43 04        02 A14 P01 ME 0C10  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 0  flag0 0                             
00AA 43 04        02 A15 P01 ME 0C10  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 0  flag0 1                             
00AC 43 04        02 A16 P01 ME 0C10  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 1  flag0 0                             
00AE 43 04        02 A17 P01 ME 0C10  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 1  flag0 1                             
                                         
0000             Thread Local RAM size                                   
                                            else
                                            {
                                        #ifdef GLOBAL_ERROR_FUNC
0C1C FFC116BF   call 22D4,flush.                        Global_Error_Func();

ETPU "C" COMPILER 1.0.7.85                                              PAGE 82


                                        #else
                                                ClearAllLatches();
                                        #endif
0C20 6FFFFFFF   end.                        }
0080 C3 07        02 A00 P23 ME 0C1C  HSR 2/3   lsr x  m1 x  m2 x  pin 0  flag1 x  flag0 0                             
0082 C3 07        02 A01 P23 ME 0C1C  HSR 2/3   lsr x  m1 x  m2 x  pin 0  flag1 x  flag0 1                             
0084 C3 07        02 A02 P23 ME 0C1C  HSR 2/3   lsr x  m1 x  m2 x  pin 1  flag1 x  flag0 0                             
0086 C3 07        02 A03 P23 ME 0C1C  HSR 2/3   lsr x  m1 x  m2 x  pin 1  flag1 x  flag0 1                             
0088 C3 07        02 A04 P23 ME 0C1C  HSR 1/4/5 lsr x  m1 x  m2 x  pin x  flag1 x  flag0 x                             
                                         
0000             Thread Local RAM size                                   
0000             Local RAM requirements for eTPU Function CamDetect                                   
                                        }

                                        /* Information exported to Host CPU program */
0C24                                    #pragma write h, (::ETPUfilename (etpu_cam_auto.h));
0C24                                    #pragma write h, (/*******************************************************************************);
0C24                                    #pragma write h, ( * 版权 2015-2016 中国航空工业集团第六三一所第十八研究室                        );
0C24                                    #pragma write h, ( *                                                                              );
0C24                                    #pragma write h, ( * 对本文件的拷贝、发布、修改或者其他任何用途必须得到中国航空工业集团第六三一所 );
0C24                                    #pragma write h, ( * 的书面协议许可。                                                             );
0C24                                    #pragma write h, ( *                                                                              );
0C24                                    #pragma write h, ( * Copyrights (2015-2016) ACTRI                                                 );
0C24                                    #pragma write h, ( * All Right Reserved                                                           );
0C24                                    #pragma write h, ( *******************************************************************************);
0C24                                    #pragma write h, (                                                                                );
0C24                                    #pragma write h, ( *******************************************************************************);
0C24                                    #pragma write h, ( * Revision History                                                             );
0C24                                    #pragma write h, ( *------------------------------------------------------------------------------);
0C24                                    #pragma write h, ( * 2017-12-07, gbo, created                                                     );
0C24                                    #pragma write h, ( *******************************************************************************);
0C24                                    #pragma write h, ( );
0C24                                    #pragma write h, ( *******************************************************************************);
0C24                                    #pragma write h, ( * content                                                                      );
0C24                                    #pragma write h, ( *------------------------------------------------------------------------------);
0C24                                    #pragma write h, ( *  File            : etpuc_cam_auto.h                                          );
0C24                                    #pragma write h, ( *  Description     : 凸轮检测头文件                                          );
0C24                                    #pragma write h, ( *  Call            : 029-89186510                                              );
0C24                                    #pragma write h, ( *  该文件由ETPU自动生成，请勿修改！！！                                        );
0C24                                    #pragma write h, ( ******************************************************************************/);
0C24                                    #pragma write h, (#ifndef _ETPU_CAM_AUTO_H_ );
0C24                                    #pragma write h, (#define _ETPU_CAM_AUTO_H_ );
0C24                                    #pragma write h, ( );
0C24                                    #pragma write h, (/* Function Configuration Information */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_FUNCTION_NUMBER) CAM_FUNCTION_NUMBER );
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_TABLE_SELECT) ::ETPUentrytype(CamDetect) );
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_NUM_PARMS) ::ETPUram(CamDetect) );
0C24                                    #pragma write h, ( );
0C24                                    #pragma write h, (/* Host Service Request Definitions */);
0C24                                    #pragma write h, (/* 凸轮检测初始化 */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_INIT) CAM_INIT );
0C24                                    #pragma write h, ( );
0C24                                    #pragma write h, (/* Cam state definitions */);
0C24                                    #pragma write h, (/* 检测到了第一个齿 */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_FIRST_EDGE) CAM_FIRST_EDGE );

ETPU "C" COMPILER 1.0.7.85                                              PAGE 83


0C24                                    #pragma write h, (/* 检测到了第二个齿，即第一个周期 */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_SECOND_EDGE) CAM_SECOND_EDGE );
0C24                                    #pragma write h, (/* 正在测试可能的缺齿 */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_TEST_POSSIBLE_MARK) CAM_TEST_POSSIBLE_MARK );
0C24                                    #pragma write h, (/* 已满足缺齿的部分条件，正在验证 */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_VERIFY_NARK) CAM_VERIFY_MARK );
0C24                                    #pragma write h, (/* 缺齿已验证 */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_MARK_VERIFIED) CAM_MARK_VERIFIED );
0C24                                    #pragma write h, (/* 曲轴正常运行 */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_COUNTING) CAM_COUNTING );
0C24                                    #pragma write h, (/* 缺齿前的齿，用来调整检测缺齿的窗口位置和宽度 */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_TOOTH_BEFORE_MARK) CAM_TOOTH_BEFORE_MARK );
0C24                                    #pragma write h, (/* 缺齿后的齿，用来验证缺齿，调整缺齿后的窗口位置和宽度 */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_TOOTH_AFTER_GAP) CAM_TOOTH_AFTER_MARK );
0C24                                    #pragma write h, ( );
0C24                                    #pragma write h, (/* Error status */);
0C24                                    #pragma write h, (/* 凸轮检测无错误 */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_NO_ERROR) CAM_NO_ERROR );
0C24                                    #pragma write h, (/* 发生了错误的跳变TransB */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_INVALID_M1) CAM_INVALID_M1 );
0C24                                    #pragma write h, (/* 发生了错误的匹配MatchB和跳变TransA */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_INVALID_M2) CAM_INVALID_M2 );
0C24                                    #pragma write h, ( );
0C24                                    #pragma write h, (/* Global Parameter Definitions */);
0C24                                    #pragma write h, (/* 凸轮同步状态 */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_SYNC_STATE) ::ETPUlocation (gCamState) );
0C24                                    #pragma write h, (/* 凸轮标记齿上升沿对应的角度计数 */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_EDGE_ANGLE_GLOBAL) ::ETPUlocation (gCamEdgeAngle) );
0C24                                    #pragma write h, (/* 凸轮齿计数 */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_TOOTH_COUNT_GLOBAL_OFFSET) ::ETPUlocation (gCamCount) );
0C24                                    #pragma write h, ( );
0C24                                    #pragma write h, (/* Parameter Definitions */);
0C24                                    #pragma write h, (/* 错误状态 */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_ERROR_STATUS_OFFSET) ::ETPUlocation (CamDetect, errorStatus) );
0C24                                    #pragma write h, (/* 曲轴通道 */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_CRANK_CHN_OFFSET) ::ETPUlocation (CamDetect, crankChannel) );
0C24                                    #pragma write h, (/* 等待第一个齿的超时时间，以TCR1计数为单位 */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_FIRST_TIMEOUT_OFFSET) ::ETPUlocation (CamDetect, firstTimeout) );
0C24                                    #pragma write h, (/* 下一个齿为正常齿时的窗口系数 */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_WIN_RATIO_NORMAL_OFFSET) ::ETPUlocation (CamDetect, winRatioNormal) );
0C24                                    #pragma write h, (/* 下一个齿为标记齿的窗口系数 */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_WIN_RATIO_ACROSS_MARK_OFFSET) ::ETPUlocation (CamDetect, winRatioACMark) );
0C24                                    #pragma write h, (/* 下一个齿为标记齿后的齿的窗口系数 */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_WIN_RATIO_AFTER_MARK_OFFSET) ::ETPUlocation (CamDetect, winRatioAFMark) );
0C24                                    #pragma write h, (/* 检测标记齿周期合法性的系数，标记齿与它前一齿的时间差应为正常齿周期的1/4 */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_MARK_RATIO_OFFSET) ::ETPUlocation (CamDetect, markRatio) );
0C24                                    #pragma write h, (/* 正常齿周期，用来计算凸轮转速，值为TCR1计数 */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_TOOTH_PEROID_OFFSET) ::ETPUlocation (CamDetect, camPeriodA) );
0C24                                    #pragma write h, (/* 标记齿上升沿时的角度计数 */);
0C24                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CAM_EDGE_ANGLE_OFFSET) ::ETPUlocation (CamDetect, edgeAngle) );
0C24                                    #pragma write h, ( );
0C24                                    #pragma write h, (#endif);
0C24                                    #pragma write h, ( );

00000003                                #define CRANK_FUNCTION_NUMBER 3

ETPU "C" COMPILER 1.0.7.85                                              PAGE 84


                                        #include "etpuc_crank2.c"
                                        /*******************************************************************************
                                         * 版权 2015-2016 中国航空工业集团第六三一所第十八研究室
                                         *
                                         * 对本文件的拷贝、发布、修改或者其他任何用途必须得到中国航空工业集团第六三一所
                                         * 的书面协议许可。
                                         *
                                         * Copyrights (2015-2016) ACTRI
                                         * All Right Reserved
                                         *******************************************************************************

                                         *******************************************************************************
                                         * Revision History
                                         *------------------------------------------------------------------------------
                                         * 2017-12-07, gbo, created
                                         *******************************************************************************

                                         *******************************************************************************
                                         * content
                                         *------------------------------------------------------------------------------
                                         *  File            : etpuc_crank.c
                                         *  Description     : ETPU曲轴信号采集，同步
                                         *  Call            : 029-89186510
                                         ******************************************************************************/
                                        #include "etpuc_crank2.h"
                                        /*******************************************************************************
                                         * 版权 2015-2016 中国航空工业集团第六三一所第十八研究室
                                         *
                                         * 对本文件的拷贝、发布、修改或者其他任何用途必须得到中国航空工业集团第六三一所
                                         * 的书面协议许可。
                                         *
                                         * Copyrights (2015-2016) ACTRI
                                         * All Right Reserved
                                         *******************************************************************************

                                         *******************************************************************************
                                         * Revision History
                                         *------------------------------------------------------------------------------
                                         * 2017-12-07, gbo, created
                                         *******************************************************************************

                                         *******************************************************************************
                                         * content
                                         *------------------------------------------------------------------------------
                                         *  File            : etpuc_crank.h
                                         *  Description     : ETPU曲轴检测头文件
                                         *  Call            : 029-89186510
                                         ******************************************************************************/
                                        #ifndef _ETPUC_CRANK_H
00EF                                    #define _ETPUC_CRANK_H

                                        #include <eTPUc_common.h>
                                        #ifndef __ETPUC_COMMON_H
                                        #define __ETPUC_COMMON_H


ETPU "C" COMPILER 1.0.7.85                                              PAGE 85


                                        /********************************************************************************

                                         FILE NAME: etpuc_common.h

                                         COPYRIGHT (c) ASH WARE, Byte Craft Limited, Freescale 2002-2004.
                                         All Rights Reserved.

                                         VERSION:  1.0

                                         This file is maintained as part of the support for the eTPU_C
                                         development tools by Byte Craft Limited.

                                         This code may be adapted for any purpose when used with the eTPU_C
                                         Code Development System.  No warranty is implied or given as to their
                                         usability for any purpose.

                                         Portions of this file are governed by the following copyrights and
                                         terms:

                                         (c) Freescale 2002-2004 FREESCALE, INC. All Rights Reserved.
                                         *  You are hereby granted a copyright license to use, modify, and
                                         *  distribute the SOFTWARE so long as this entire notice is
                                         *  retained without alteration in any modified and/or redistributed
                                         *  versions, and that such modified versions are clearly identified
                                         *  as such. No licenses are granted by implication, estoppel or
                                         *  otherwise under any patents or trademarks of Freescale, Inc. This
                                         *  software is provided on an "AS IS" basis and without warranty.
                                         *
                                         *  To the maximum extent permitted by applicable law, FREESCALE
                                         *  DISCLAIMS ALL WARRANTIES WHETHER EXPRESS OR IMPLIED, INCLUDING
                                         *  IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
                                         *  PURPOSE AND ANY WARRANTY AGAINST INFRINGEMENT WITH REGARD TO THE
                                         *  SOFTWARE (INCLUDING ANY MODIFIED VERSIONS THEREOF) AND ANY
                                         *  ACCOMPANYING WRITTEN MATERIALS.
                                         *
                                         *  To the maximum extent permitted by applicable law, IN NO EVENT
                                         *  SHALL FREESCALE BE LIABLE FOR ANY DAMAGES WHATSOEVER (INCLUDING
                                         *  WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
                                         *  INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR OTHER PECUNIARY
                                         *  LOSS) ARISING OF THE USE OR INABILITY TO USE THE SOFTWARE.
                                         *
                                         *  Freescale assumes no responsibility for the maintenance and support
                                         *  of this software

                                         (c) Copyright 2002-2004 Byte Craft Limited
                                         421 King St.N., Waterloo, ON, Canada, N2J 4E4
                                         VOICE: 1 (519) 888 6911
                                         email: support@bytecraft.com

                                         (c) Copyright 2002-2004 ASH WARE

                                        ================================================================================

                                        DESCRIPTION: This file defines the application-friendly macros,
                                        functions for common tasks like channel set up and register control

ETPU "C" COMPILER 1.0.7.85                                              PAGE 86


                                        field access.

                                        ================================================================================

                                        SOURCES:

                                        etpuc_common.h is based on the following header files commonly used by
                                        the eTPU development community:

                                        AshWareETpu.h - developed by Andy Klumpp from ASH WARE
                                        Mike.h - developed by Mike Pauwels from Freescale
                                        etpu_common.h - developped by Ming Li from Freescale

                                        Jeff Loeliger from Freescale and Walter Banks from Byte Craft
                                        also made significant contibutions.

                                        ================================================================================
                                         UPDATE HISTORY
                                         REV      AUTHOR        DATE                DESCRIPTION OF CHANGE
                                         ---      -------      --------    ---------------------
                                         0.0      Ming Li      10/30/03    Initial creation
                                         0.1      Ming Li      11/12/03    Updated to incorporate comments from eTPU
                                                                           development community.
                                         0.2      Walter Banks 15 Dec 03   Made changes to be reflect definitions in
                                                                           eTPUc.h
                                                                           Corrected IsTransALatched()
                                                                                     IsTransBLatched()
                                                                           Added missing definitions
                                                                                     set_pin_per_opacA
                                                                                     set_pin_per_opacB
                                                                                     force_pin_high
                                                                                     force_pin_low
                                                                           Corrected opac1 to opacA
                                                                                     opac2 to opacB

                                         0.3      Walter Banks  5 Jan 04   Corrected opacB = pin_action; to
                                                                               opacA = pin_action;

                                         0.4     J. Loeliger    21/Jan/04  Cleared up reorganized and added more:
                                                                           -Moved TRUE & FALSE to top and added
                                                                              conditional
                                                                           -Moved entry conditions up and added macros
                                                                              for all conditions
                                                                           -Merged with AshWareETpu.h
                                                                              -Removed commet with of PDCM names.
                                                                           -Grouped latches and flags together.
                                                                             -added new set and clear for latches and
                                                                                flags
                                                                           -Merged output pin value to 1 set rather
                                                                              than 2
                                                                           -Added long channel mode names.
                                                                           -Added SetupMatch_AB for better
                                                                              optimization
                                                                           -Added match only conditions for output
                                                                              functions.

ETPU "C" COMPILER 1.0.7.85                                              PAGE 87


                                                                           -Added new ActionUnintA/B macros
                                                                           -Added new Pin macro
                                                                           -And more.
                                         0.5     J. Loeliger     12/Feb/04 -Changed DetectTrans to OnTrans.
                                         0.6     J. Loeliger     30/Mar/04 -Added SetupMatchB and fixed some old
                                                                             references to 1 & 2 -> A & B
                                         0.7     J. Loeliger     16/Apr/04 -Changed Disable match (MRLE) to =0
                                         0.8     J. Loeliger     27/Apr/04 -Fixed Disable/Enable match in thread,
                                                                              they were swapped.
                                         0.9     J. Loeliger     10/May/04 -Added support for OBE with new
                                                 M. Brejl                   EnableOutputBuffer()/DisableOutputBuffer()
                                                                            Removed all // comments. Changed Motorola
                                                                            to Freescale.
                                                                            Fixed spelling mistake in GetCurentChanNum

                                         0.4     Karen McMurray  19 May 04  Changed all ertA to erta
                                                                                        ertB to ertb.

                                         1.0     Kirk Zurell     11 Aug 04  Integrated etpuc_common.h from J. Loeliger
                                                                            and etpuc_common.h from Byte Craft Limited.
                                                                            Removed tabs & made comments more sustainable.
                                                                            Conditionalized some definitions to be more
                                                                            economical on symbols.

                                                                            Divider lines have 80 asterices.

                                        */



                                        /********************************************************************************/

                                        /* This file depends upon definitions from etpuc.h */

                                        #ifndef __ETPUC_H
                                        #include <etpuc.h>
                                        #endif /* __ETPUC_H */


                                        /********************************************************************************/

                                        /* Constant definitions */

                                        #ifndef TRUE
                                        #define TRUE        1
                                        #endif

                                        #ifndef FALSE
                                        #define FALSE       0
                                        #endif


                                        /********************************************************************************/

                                        /* State Resolution Flags, and other latches */

ETPU "C" COMPILER 1.0.7.85                                              PAGE 88



                                        /* Clear() definitions */
                                        #define LSRLatch      lsr
                                        #define LatchedMatchA mrlA
                                        #define LatchedMatchB mrlB
                                        #define TransLatch    tdl

                                        /* Macros */

                                        /* Set flag0 or flag1
                                           Usage: Set(flag0 | flag1);*/

                                        #define Set(cond)     (cond = 1)

                                        /* Clear a flag
                                           Usage: Clear(flag0 | flag1 | LSRLatch | lsr | MatchALatch | mrlA |
                                                         MatchBLatch | mrlB | TransLatch | tdl);         */

                                        #define Clear(cond)   (cond = 0)

                                        /* SYNONYMS */
                                        /* Flag 0 & flag 1 */
                                        #define ClrFlag0()  (channel.FLAG0 = 0)
                                        #define SetFlag0()  (channel.FLAG0 = 1)
                                        #define ClrFlag1()  (channel.FLAG1 = 0)
                                        #define SetFlag1()  (channel.FLAG1 = 1)


                                        #define FunctionMode0          channel.FM0
                                        #define IsFunctionMode0()     (channel.FM0==1)
                                        #define IsSampledFuncMode0()  (channel.FM0==1)
                                        #define IsLatchedFuncMode0()  (channel.FM0==1)

                                        #define FunctionMode1          channel.FM1
                                        #define IsFunctionMode1()     (channel.FM1==1)
                                        #define IsSampledFuncMode1()  (channel.FM1==1)
                                        #define IsLatchedFuncMode1()  (channel.FM1==1)


                                        /********************************************************************************/

                                        /* Writing the match registers and enabling/disabling the Match
                                           Recognition Latch Enable */

                                        #define EnableMatchA()                 (channel.ERWA = 0)
                                        #define EnableMatchB()                 (channel.ERWB = 0)
                                        #define DisableMatch()                 (channel.MRLE = 0)

                                        /* SYNONYMS */
                                        #define WriteErtAToMatchAAndEnable()   channel.ERWA = 0
                                        #define WriteErtBToMatchBAndEnable()   channel.ERWB = 0
                                        #define DisableMatchDetection();       channel.MRLE = 0


                                        /* Read capture register */

ETPU "C" COMPILER 1.0.7.85                                              PAGE 89


                                        #define GetCapRegA()  (erta)
                                        #define GetCapRegB()  (ertb)

                                        /* Clear Latch */
                                        #define ClearLSRLatch()       (channel.LSR  = 0)

                                        #define ClearMatchALatch()    (channel.MRLA = 0)
                                        #define ClearMatchBLatch()    (channel.MRLB = 0)

                                        #define ClearTransLatch()     (channel.TDL = 0)

                                        /* SYNONYMS */
                                        #define ClearLinkServiceRequestEvent() (lsr  = 0)

                                        #define ClearMatchAEvent()    (channel.MRLA = 0)
                                        #define ClearMatchBEvent()    (channel.MRLB = 0)

                                        #define ClearTransitionEvents() (channel.TDL = 0)



                                        /* Test latch conditions */

                                        #define TransitionALatch           channel.TDLA
                                        #define IsTransALatched()         (channel.TDLA==1)

                                        #define TransitionBLatch           channel.TDLB
                                        #define IsTransBLatched()         (channel.TDLB==1)

                                        #define MatchALatch            channel.MRLA
                                        #define IsMatchALatched()     (channel.MRLA==1)

                                        #define MatchBLatch            channel.MRLB
                                        #define IsMatchBLatched()     (channel.MRLB==1)

                                        /* SYNONYMS */
                                        #define IsLatchedTransitionA()    (channel.TDLA==1)
                                        #define IsLatchedTransitionB()    (channel.TDLB==1)
                                        #define IsLatchedMatchA()         (channel.MRLA==1)
                                        #define IsLatchedMatchB()         (channel.MRLB==1)



                                        /********************************************************************************/

                                        /* Enabling/Disabling Event Handling */

                                        #define EnableEventHandling()                   (channel.MTD = 0)
                                        #define DisableEventHandling()                  (channel.MTD = 1)

                                        /* SYNONYMS */
                                        #define EnableMatchAndTransitionEventHandling()  channel.MTD = 0
                                        #define DisableMatchAndTransitionEventHandling() channel.MTD = 1



ETPU "C" COMPILER 1.0.7.85                                              PAGE 90


                                        /********************************************************************************/

                                        /* Semaphore Operations */

                                        #define IsSemaphoreLocked()   (channel.SMPR == 1)
                                        #define LockSemaphore(num)    (channel.SMPR = num)
                                        #define FreeSemaphore()       (channel.SMPR = -1)


                                        /********************************************************************************/

                                        /* Exceptions */

                                        /* Channel control macros */
                                        #define SetChannelInterrupt()       (channel.CIRC = 0)
                                        #define SetChannelInterruptRequest()(channel.CIRC = 0)

                                        #define SetDataTransferInterrupt()        (channel.CIRC = 1)
                                        #define SetDataTransferInterruptRequest() (channel.CIRC = 1)

                                        #define SetGlobalException()  (channel.CIRC = 2)

                                        /* Channel control */

                                        /* Generate the link service request to channel[ChNum] */
                                        #define LinkToChannel(ChNum)            (link = ChNum)
                                        #define LinkTo(num)                 link = num;
                                        #define LinkToEngine1Chan(num)      link = (num | (1<<6))
                                        #define LinkToEngine2Chan(num)      link = (num | (2<<6))
                                        #define LinkToOtherEngineChan(num)  link = (num | (3<<6))

                                        /* switch to specified channel from current channel */
                                        #define SwitchToChannel(ChNum)      (chan = ChNum)

                                        /* return current channel number */
                                        #define GetCurrentChanNum()         (chan)

                                        /* branch condition */
                                        #define LinkServiceRequest     channel.LSR
                                        #define IsLinkReqActive()     (channel.LSR==1)
                                        #define IsSampledLink()       (channel.LSR==1)
                                        #define IsLatchedLink()       (channel.LSR==1)


                                        /********************************************************************************/

                                        /* Entry Conditions Definition */

                                        /* Usage: use these in the if()/else if()/else structure in an
                                           ETPU_function */

                                        #define HostServiceRequest               hsr
                                        #define IsHostServiceRequestEvent(num)   (hsr==num)

                                        #define MatchA_TransB                    (m1==1)

ETPU "C" COMPILER 1.0.7.85                                              PAGE 91


                                        #define matchA_transB                    (m1==1)
                                        #define IsMatchAOrTransitionBEvent()     (m1==1)

                                        #define MatchB_TransA                    (m2==1)
                                        #define matchB_transA                    (m2==1)
                                        #define IsMatchBOrTransitionAEvent()     (m2==1)

                                        #define linkRequest                      (lsr==1)
                                        #define IsLinkServiceRequestEvent()      (lsr==1)

                                        /* For output-only functions */
                                        #define MatchA                           (m1==1)
                                        #define MatchB                           (m2==1)


                                        /********************************************************************************/

                                        /* Predefined Channel Modes (PDCM) */

                                        #define SetChannelMode(mode)        (channel.PDCM = mode)
                                        #define channel_setup channel.PDCM

                                        /* Usage:       channel_setup = PDCM_constant

                                        PDCM_constants are taken from etpuc.h:
                                        em_b_st         Either Match, Blocking, Single Transition
                                        em_b_dt         Either Match, Blocking, Double Transition
                                        em_nb_st        Either Match, NonBlocking, Single Transition
                                        em_nb_dt        Either Match, NonBlocking, Double Transition
                                        m2_st           Match2, Single, Transition
                                        m2_dt           Match2, Double, Transition
                                        bm_st           Both Match, Single Transition
                                        bm_dt           Both Match, Double Transition
                                        m2_o_st         Match2, Ordered Single Blocking Transition
                                        m2_o_dt         Match2, Ordered Double Transition
                                        sm_st_e         Single Match, Single Transition Enhanced
                                        sm_st           Single Match, Single Transition
                                        sm_dt           Single Match, Double Transition
                                        */

                                        /* SYNONYMS */
                                        #define EitherMatchBlockingSingleTransition()     channel.PDCM = em_b_st
                                        #define EitherMatchBlockingDoubleTransition()     channel.PDCM = em_b_dt
                                        #define EitherMatchNonBlockingSingleTransition()  channel.PDCM = em_nb_st
                                        #define EitherMatchNonBlockingDoubleTransition()  channel.PDCM = em_nb_dt
                                        #define Match2SingleTransition()                  channel.PDCM = m2_st
                                        #define Match2DoubleTransition()                  channel.PDCM = m2_dt
                                        #define BothMatchSingleTransition()               channel.PDCM = bm_st
                                        #define BothMatchDoubleTransition()               channel.PDCM = bm_dt
                                        #define Match2OrderedSingleBlockingTransition()   channel.PDCM = m2_o_st
                                        #define Match2OrderedDoubleTransition()           channel.PDCM = m2_o_dt
                                        #define SingleMatchSingleTransitionEnhanced()     channel.PDCM = sm_st_e
                                        #define SingleMatchSingleTransition()             channel.PDCM = sm_st
                                        #define SingleMatchDoubleTransition()             channel.PDCM = sm_dt


ETPU "C" COMPILER 1.0.7.85                                              PAGE 92



                                        #define ClearAllLatches()         \
                                                (lsr = 0);(mrlA = 0);(mrlB = 0);(tdl = 0);


                                        /********************************************************************************/

                                        /* Complex Macros */

                                        /* These macros should provide the most optimized way of doing things.
                                           They should be in the best order for optimizing. The compiler might
                                           be able to identify this code for optimization. */

                                        #define SetupMatchA(reference) \
                                                erta = reference;      \
                                                EnableMatchA();        \
                                                ClearMatchALatch();

                                        #define SetupMatchB(reference) \
                                                ertb = reference;      \
                                                EnableMatchB();        \
                                                ClearMatchBLatch();

                                        /* These are ONLY useful for init. and if you know which TCR you want
                                           to use. Latches are cleared at the end so it can be combined with
                                           other latches. */

                                        #define ConfigMatch_AB() \
                                                WriteErtAToMatchAAndEnable(); \
                                                WriteErtBToMatchBAndEnable(); \
                                                EnableMatchA();        \
                                                EnableMatchB();        \
                                                EnableEventHandling();\
                                                ClearMatchALatch();\
                                                ClearMatchBLatch();

                                        #define SetupMatch_A(reference, timebase_comparator, pin_action) \
                                                erta = reference; \
                                                act_unitA = timebase_comparator; \
                                                opacA = pin_action; \
                                                EnableMatchA();        \
                                                ClearMatchALatch();\
                                                EnableEventHandling();

                                        #define SetupMatch_B(reference, timebase_comparator, pin_action) \
                                                ertb = reference; \
                                                act_unitB = timebase_comparator; \
                                                opacB = pin_action; \
                                                EnableMatchB();        \
                                                ClearMatchBLatch();\
                                                EnableEventHandling();

                                        #define SetupCaptureTrans_A(timebase, pin_trans) \
                                                act_unitA = timebase;\
                                                ipacA = pin_trans;\

ETPU "C" COMPILER 1.0.7.85                                              PAGE 93


                                                ClearTransLatch();\
                                                EnableEventHandling();

                                        #define SetupCaptureTrans_B(timebase, pin_trans) \
                                                act_unitB = timebase;\
                                                ipacB = pin_trans;\
                                                ClearTransLatch();\
                                                EnableEventHandling();


                                        /********************************************************************************/

                                        /* Action Units */

                                        /* Usage: ActionUnitA( MatchTCR1 | MatchTCR2,
                                                               CaptureTCR1 | CaptureTCR2,
                                                               GreaterEqual | EqualOnly ); */

                                        #define ActionUnitA( match, capture, compare)   (act_unitA=match##capture##compare)
                                        #define ActionUnitB( match, capture, compare)   (act_unitB=match##capture##compare)

                                        #define MatchTCR1    Mtcr1_
                                        #define MatchTCR2    Mtcr2_
                                        #define CaptureTCR1  Ctcr1_
                                        #define CaptureTCR2  Ctcr2_
                                        #define GreaterEqual ge
                                        #define EqualOnly    eq

                                        /* SYNONYMS */
                                        /* Action Unit A, Time Bases for match and capture */
                                        #define TimeBaseAMatchTcr1CaptureTcr1GreaterEqual()      channel.TBSA = Mtcr1_Ctcr1_ge
                                        #define TimeBaseAMatchTcr2CaptureTcr1GreaterEqual()      channel.TBSA = Mtcr2_Ctcr1_ge
                                        #define TimeBaseAMatchTcr1CaptureTcr2GreaterEqual()      channel.TBSA = Mtcr1_Ctcr2_ge
                                        #define TimeBaseAMatchTcr2CaptureTcr2GreaterEqual()      channel.TBSA = Mtcr2_Ctcr2_ge
                                        #define TimeBaseAMatchTcr1CaptureTcr1ExactlyEqual()      channel.TBSA = Mtcr1_Ctcr1_eq
                                        #define TimeBaseAMatchTcr2CaptureTcr1ExactlyEqual()      channel.TBSA = Mtcr2_Ctcr1_eq
                                        #define TimeBaseAMatchTcr1CaptureTcr2ExactlyEqual()      channel.TBSA = Mtcr1_Ctcr2_eq
                                        #define TimeBaseAMatchTcr2CaptureTcr2ExactlyEqual()      channel.TBSA = Mtcr2_Ctcr2_eq

                                        /* Action Unit B, Time Bases for match and capture */
                                        #define TimeBaseBMatchTcr1CaptureTcr1GreaterEqual()      channel.TBSB = Mtcr1_Ctcr1_ge
                                        #define TimeBaseBMatchTcr2CaptureTcr1GreaterEqual()      channel.TBSB = Mtcr2_Ctcr1_ge
                                        #define TimeBaseBMatchTcr1CaptureTcr2GreaterEqual()      channel.TBSB = Mtcr1_Ctcr2_ge
                                        #define TimeBaseBMatchTcr2CaptureTcr2GreaterEqual()      channel.TBSB = Mtcr2_Ctcr2_ge
                                        #define TimeBaseBMatchTcr1CaptureTcr1ExactlyEqual()      channel.TBSB = Mtcr1_Ctcr1_eq
                                        #define TimeBaseBMatchTcr2CaptureTcr1ExactlyEqual()      channel.TBSB = Mtcr2_Ctcr1_eq
                                        #define TimeBaseBMatchTcr1CaptureTcr2ExactlyEqual()      channel.TBSB = Mtcr1_Ctcr2_eq
                                        #define TimeBaseBMatchTcr2CaptureTcr2ExactlyEqual()      channel.TBSB = Mtcr2_Ctcr2_eq



                                        /********************************************************************************/

                                        /* Pin output buffer */


ETPU "C" COMPILER 1.0.7.85                                              PAGE 94


                                        #define EnableOutputBuffer()           (channel.TBSA = enable_output_buffer)
                                        #define DisableOutputBuffer()          (channel.TBSA = disable_output_buffer)


                                        /********************************************************************************/

                                        /* Pin control */

                                        /* Pin() definitions */
                                        #define SetHigh pin_high
                                        #define SetLow  pin_low
                                        #define PerPacA pin_opacA
                                        #define PerPacB pin_opacB

                                        /* Set Output Pin
                                           Usage: Pin( SetHigh | SetLow | PerPacA | PerPacB ); */
                                        #define Pin( state )          (channel.PIN=state)

                                        /* Immediate output pin */
                                        #define set_pin_per_opacA  pin_opacA
                                        #define set_pin_per_opacB  pin_opacB
                                        #define force_pin_high     pin_high
                                        #define force_pin_low      pin_low

                                        #define SetPinHigh()          (channel.PIN=force_pin_high)
                                        #define SetPinLow()           (channel.PIN=force_pin_low)
                                        #define SetPinPerPacA()       (channel.PIN=set_pin_per_opacA)
                                        #define SetPinPerPacB()       (channel.PIN=set_pin_per_opacB)

                                        /* Reading the pin states: branch conditions */

                                        #define SampledInputPin            channel.PSS
                                        #define IsLatchedInputPin()        (channel.PSS==1)
                                        #define IsInputPinHigh()           (channel.PSS==1)

                                        #define CurrentInputPin            channel.PSTI
                                        #define IsCurrentInputPin()        (channel.PSTI==1)

                                        #define CurrentOutputPin           channel.PSTO
                                        #define IsCurrentOutputPin()       (channel.PSTO==1)

                                        /* SYNONYMS */
                                        #define IsSampledInputPinHigh()    (channel.PSS==1)
                                        #define IsLatchedInputPinHigh()    (channel.PSS==1)
                                        #define IsCurrentInputPinHigh()    (channel.PSTI==1)
                                        #define IsCurrentOutputPinHigh()   (channel.PSTO==1)



                                        /********************************************************************************/

                                        /* Output Pin Action */

                                        #define NoChange    match_no_change
                                        #define PinHigh     match_high

ETPU "C" COMPILER 1.0.7.85                                              PAGE 95


                                        #define PinLow      match_low
                                        #define PinToggle   match_toggle

                                        /* Usage: OnMatchA( NoChange | PinHigh | PinLow | PinToggle ); */
                                        #define OnMatchA(action)      (opacA = action)
                                        #define OnMatchB(action)      (opacB = action)

                                        /* SYNONYMS */
                                        /* Action Unit A, Output Pin Actions */
                                        #define OnMatchAPinNoChange()      channel.OPACA = match_no_change
                                        #define OnMatchAPinHigh()          channel.OPACA = match_high
                                        #define OnMatchAPinLow()           channel.OPACA = match_low
                                        #define OnMatchAPinToggle()        channel.OPACA = match_toggle
                                        #define OnInputActionAPinLow()     channel.OPACA = transition_low
                                        #define OnInputActionAPinHigh()    channel.OPACA = transition_high
                                        #define OnInputActionAPinToggle()  channel.OPACA = transition_toggle

                                        /* Action Unit B, Output Pin Actions */
                                        #define OnMatchBPinNoChange()      channel.OPACB = match_no_change
                                        #define OnMatchBPinHigh()          channel.OPACB = match_high
                                        #define OnMatchBPinLow()           channel.OPACB = match_low
                                        #define OnMatchBPinToggle()        channel.OPACB = match_toggle
                                        #define OnInputActionBPinLow()     channel.OPACB = transition_low
                                        #define OnInputActionBPinHigh()    channel.OPACB = transition_high
                                        #define OnInputActionBPinToggle()  channel.OPACB = transition_toggle


                                        /********************************************************************************/

                                        /* Input Pin Action */

                                        #define NoDetect  no_detect
                                        #define LowHigh   low_high
                                        #define HighLow   high_low
                                        #define AnyTrans  any_trans

                                        /* Usage: DetectTransA( no_detect | low_high | high_low | any_trans | ...); */
                                        #define OnTransA(action)     (ipacA = action)
                                        #define OnTransB(action)     (ipacB = action)

                                        /* SYNONYMS */
                                        /* Action Unit A, Input Pin Edge Detection */
                                        #define DetectADisable()        channel.IPACA = no_detect
                                        #define DetectARisingEdge()     channel.IPACA = low_high
                                        #define DetectAFallingEdge()    channel.IPACA = high_low
                                        #define DetectAAnyEdge()        channel.IPACA = any_trans
                                        #define DetectALowOnMatchA()    channel.IPACA = detect_input_0_on_match
                                        #define DetectAHighOnMatchA()   channel.IPACA = detect_input_1_on_match

                                        /* Action Unit B, Input Pin Edge Detection */
                                        #define DetectBDisable()        channel.IPACB = no_detect
                                        #define DetectBRisingEdge()     channel.IPACB = low_high
                                        #define DetectBFallingEdge()    channel.IPACB = high_low
                                        #define DetectBAnyEdge()        channel.IPACB = any_trans
                                        #define DetectBLowOnMatchA()    channel.IPACB = detect_input_0_on_match

ETPU "C" COMPILER 1.0.7.85                                              PAGE 96


                                        #define DetectBHighOnMatchA()   channel.IPACB = detect_input_1_on_match


                                        /********************************************************************************/

                                        /* Intrinsics synonyms */

                                        /* Matches in Threads */
                                        #define DisableMatchesInThread()    match_disable()
                                        #define EnableMatchesInThread()     match_enable()



                                        #endif /* __ETPUC_COMMON_H */
                                        #include <etpuc.h>
                                        #ifndef __ETPUC_H
                                        #define __ETPUC_H

                                        /*
                                         *  eTPU C Code Development System
                                         *
                                         *  Processor register definitions
                                         *  for the eTPU C Code Development System.
                                         *
                                         *  This code may be adapted for any purpose
                                         *  when used with the eTPU C Code Development
                                         *  System.  No warranty is implied or given
                                         *  as to their usability for any purpose.
                                         *
                                         *  (c) Copyright 2002-2004 Byte Craft Limited
                                         *  421 King St.N., Waterloo, ON, Canada, N2J 4E4
                                         *  VOICE: 1 (519) 888 6911
                                         *  FAX  : 1 (519) 746 6751
                                         *  email: support@bytecraft.com
                                         *
                                         *  Byte Craft Limited
                                         *  Waterloo, Ontario
                                         *  Canada N2J 4E4
                                         *  (519) 888-6911
                                         *
                                         *  Walter Banks
                                         *
                                         * Revision history
                                         * ----------------
                                         * V0.90  WB    Nov 2003  First pre-release of etpuc.h based on V1.10 etpu.h with
                                         *                        changes to reflect eTPU naming conventions
                                         * V1.00  WB    Nov 2003  First release changes to the channel fields to reflect
                                         *                        naming conventions for eTPU
                                         * V1.01  WB    Dec 2003  Corrected definitions of pin_opacA and pin_opacB
                                         *
                                         *
                                         *
                                         *  All of the eTPU registers can be directly accessed from C
                                         *


ETPU "C" COMPILER 1.0.7.85                                              PAGE 97


                                             register_ac        ac   ;      // 24 bits
                                             register_b         b    ;      // 24 bits
                                             register_c         c    ;      // 24 bits
                                             register_d         d    ;      // 24 bits
                                             register_chan      chan ;      //  5 bits
                                             register_diob      diob ;      // 24 bits
                                             register_erta      erta ;      // 24 bits
                                             register_ertb      ertb ;      // 24 bits
                                             register_link      link ;      //  8 bits
                                             register_mach      mach ;      // 24 bits
                                             register_macl      macl ;      // 24 bits
                                             register_p         p    ;      // 24 bits
                                             register_rar       rar  ;      // 14 bits
                                             register_sr        sr   ;      // 24 bits
                                             register_tcr1      tcr1 ;      // 24 bits
                                             register_tcr2      tcr2 ;      // 24 bits
                                             register_tpr       tpr  ;      // 16 bits
                                             register_trr       trr  ;      // 24 bits
                                             register_chan_base chan_base;  // 24 bits
                                        */

                                        /* The following registers are defined for
                                           eTPU C application code */

                                             register_chan       chan ;       //  5 bits
                                             register_erta       erta ;       // 24 bits
                                             register_ertb       ertb ;       // 24 bits
                                             register_tcr1       tcr1 ;       // 24 bits
                                             register_tcr2       tcr2 ;       // 24 bits
                                             register_tpr        tpr  ;       // 16 bits
                                             register_trr        trr  ;       // 24 bits
                                             register_chan_base  chan_base;   // 24 bits
                                             register_link       link;        // 8 bits

                                        /*
                                           The link request can be set by copying the
                                           channel number into the link register. The
                                           following definition does this.
                                         */

                                        #define link_request(channel) link = channel

                                        /*
                                         *
                                         *
                                         *  All of the eTPU channel fields are predefined as a
                                         *  large C structure (chan_struct) by the eTPU C compiler.
                                         *
                                         *  struct chan {
                                         *               CIRC   int : 2 ;
                                         *               ERWA   int : 1 ;
                                         *               ERWB   int : 1 ;
                                         *               FLC    int : 3 ;
                                         *               IPACA  int : 3 ;
                                         *               IPACB  int : 3 ;

ETPU "C" COMPILER 1.0.7.85                                              PAGE 98


                                         *               LSR    int : 1 ;  // w test
                                         *               MRLA   int : 1 ;  // w test
                                         *               MRLB   int : 1 ;  // w test
                                         *               MRLE   int : 1 ;
                                         *               MTD    int : 2 ;
                                         *               OPACA  int : 3 ;
                                         *               OPACB  int : 3 ;
                                         *               PDCM   int : 4 ;
                                         *               PIN    int : 3 ;
                                         *               TBSA   int : 4 ;
                                         *               TBSB   int : 4 ;
                                         *               TDL    int : 1 ;
                                         *               SMPR   int : 2 ;
                                         * State Resolution
                                         *               FLAG0  int : 1 ;  // w only also defined in FLC
                                         *               FLAG1  int : 1 ;
                                         * Channel Flags
                                         *               FM0    int : 1 ;
                                         *               FM1    int : 1 ;
                                         *         //    LSR    int : 1 ;  // also channel fields
                                         *         //    MRLA   int : 1 ;  // also channel fields
                                         *         //    MRLB   int : 1 ;  // also channel fields
                                         *               PSS    int : 1 ;
                                         *               PSTI   int : 1 ;
                                         *               PSTO   int : 1 ;
                                         *               TDLA   int : 1 ;
                                         *               TDLB   int : 1 ;
                                         *              }
                                         ***/

                                        chan_struct channel;
                                        register_cc        CC;

                                        #define erwA       channel.ERWA
                                        #define erwB       channel.ERWB

                                        #define flc        channel.FLC
                                        #define ipacA      channel.IPACA
                                        #define ipacB      channel.IPACB
                                        #define lsr        channel.LSR

                                        #define mrlA       channel.MRLA
                                        #define mrlB       channel.MRLB
                                        #define mrle       channel.MRLE
                                        #define mtd        channel.MTD
                                        #define opacA      channel.OPACA
                                        #define opacB      channel.OPACB
                                        #define pdcm       channel.PDCM
                                        #define pin        channel.PIN
                                        #define act_unitA  channel.TBSA
                                        #define act_unitB  channel.TBSB
                                        #define tdl        channel.TDL
                                        #define flag0      channel.FLAG0
                                        #define flag1      channel.FLAG1
                                        #define fm0        channel.FM0

ETPU "C" COMPILER 1.0.7.85                                              PAGE 99


                                        #define fm1        channel.FM1
                                        #define pss        channel.PSS
                                        #define psti       channel.PSTI
                                        #define psto       channel.PSTO
                                        #define tdlA       channel.TDLA
                                        #define tdlB       channel.TDLB


                                        // IPAC 1,2
                                        #define no_detect                 0
                                        #define low_high                  1
                                        #define high_low                  2
                                        #define any_trans                 3
                                        #define detect_input_0_on_match   4
                                        #define detect_input_1_on_match   5
                                        #define no_change_ipac            7

                                        // OPAC 1,2  fields

                                        #define match_no_change   0
                                        #define match_high        1
                                        #define match_low         2
                                        #define match_toggle      3
                                        #define opac_high         1
                                        #define opac_low          2
                                        #define toggle            3
                                        #define opac_high_low     4
                                        #define opac_low_high     5
                                        #define transition_low    4
                                        #define transition_high   5
                                        #define transition_toggle 6

                                        // PDCM fields
                                        #define em_b_st  0              //Either Match, Blocking, Single Transition
                                        #define em_b_dt  1              //Either Match, Blocking, Double Transition
                                        #define em_nb_st 2              //Either Match, NonBlocking, Single Transition
                                        #define em_nb_dt 3              //Either Match, NonBlocking, Double Transition
                                        #define m2_st    4              //Match2, Single, Transition
                                        #define m2_dt    5              //Match2, Double, Transition
                                        #define bm_st    6              //Both Match, Single Transition
                                        #define bm_dt    7              //Both Match, Double Transition
                                        #define m2_o_st  8              //Match2, Ordered, Single Transition
                                        #define m2_o_dt  9              //Match2, Ordered, Double Transition
                                        #define sm_st_e  0xE                //Single Match, Single Transition, Enhanced
                                        #define sm_st    0xC                //Single Match, Single Transition
                                        #define sm_dt    0xD                //Single Match, Double Transition

                                        // Time Bases Selection for match and capture
                                        #define Mtcr1_Ctcr1_ge       0      //Match tcr1, Capture tcr1, greater than
                                        #define Mtcr2_Ctcr1_ge       1      //Match tcr2, Capture tcr1, greater than
                                        #define Mtcr1_Ctcr2_ge       2      //Match tcr1, Capture tcr2, greater than
                                        #define Mtcr2_Ctcr2_ge       3      //Match tcr2, Capture tcr2, greater than
                                        #define Mtcr1_Ctcr1_eq       4      //Match tcr1, Capture tcr1, equal
                                        #define Mtcr2_Ctcr1_eq       5      //Match tcr2, Capture tcr1, equal
                                        #define Mtcr1_Ctcr2_eq       6      //Match tcr1, Capture tcr2, equal

ETPU "C" COMPILER 1.0.7.85                                              PAGE 100


                                        #define Mtcr2_Ctcr2_eq       7      //Match tcr2, Capture tcr2, equal

                                        #define enable_output_buffer  8     // TBSx[3] = 1, TBSx[2:0] = 000
                                        #define disable_output_buffer 9     // TBSx[3] = 1, TBSx[2:0] = 001
                                        #define do_nothing       15     // TBSx[3] = 1, TBSx[2:0] = 111

                                        // Time Bases Selection for transition and capture
                                        #define Capture_tcr1        0       //TBSx[2] = 0
                                        #define Capture_tcr2        2       //TBSx[2] = 1

                                        // Tooth Program Register structure

                                        struct tpr_struct {
                                          int TICKS   : 10;
                                          int TPR10   : 1;
                                          int HOLD    : 1;
                                          int IPH     : 1;
                                          int MISSCNT : 2;
                                          int LAST    : 1;
                                          } ;

                                        // pin definitions
                                        //   pin = pin_high;
                                        #define pin_opacA  0
                                        #define pin_opacB  1
                                        #define pin_high   2
                                        #define pin_low    4

                                        #endif /* __ETPUC_H */


                                        /* 如果作为函数集，则放置在对应的位置，否则仅有一个函数 */
                                        #ifdef CRANK_FUNCTION_NUMBER
0003                                    #pragma ETPU_function CrankDetect, alternate @ CRANK_FUNCTION_NUMBER;
                                        #else
                                        #pragma ETPU_function CrankDetect, alternate;
                                        #endif

                                        /* 每个齿的TCR2计数 */
0000012C                                #define CRANK_ANGLE_PER_TOOTH            300

                                        /* 初始化后需要等待的齿数 */
                                        //#define CRANK_BLANK_TEETH_NUM            2
                                        /* 初始化后需要等待的时间 */
                                        //#define CRANK_BLANK_TIME_TICK            100
                                        /* 初始化后等待空齿数后，等待第一个齿的超时时间 */
                                        //#define CRANK_FIRST_TOOTH_TIME           100

                                        /* 曲轴错误标志，可能同时发生多个 */
00000000                                #define CRANK_NO_ERROR                   0
00000001                                #define CRANK_INVALID_M1                 1
00000002                                #define CRANK_INVALID_M2                 2
00000004                                #define CRANK_TIMEOUT                    4
00000008                                #define CRANK_STALL                      8
00000010                                #define CRANK_INTERNAL_ERROR             16

ETPU "C" COMPILER 1.0.7.85                                              PAGE 101



                                        /* 用于引导程序根据缺齿的不同进入不同的线程 */
00F0                                    #define CRANK_FLAGS_OTHER                ((flag0 == 0) && (flag1 == 0))
00F1                                    #define CRANK_FLAGS_COUNTING             ((flag0 == 0) && (flag1 == 1))
00F2                                    #define CRANK_FLAGS_TOOTH_AFTER_GAP      ((flag0 == 1) && (flag1 == 0))
00F3                                    #define CRANK_FLAGS_TOOTH_BEFORE_GAP     ((flag0 == 1) && (flag1 == 1))

00F4                                    #define SET_CRANK_FLAGS_OTHER()             {flag0 = 0; flag1 = 0;}
00F5                                    #define SET_CRANK_FLAGS_COUNTING()          {flag0 = 0; flag1 = 1;}
00F6                                    #define SET_CRANK_FLAGS_TOOTH_AFTER_GAP()   {flag0 = 1; flag1 = 0;}
00F7                                    #define SET_CRANK_FLAGS_TOOTH_BEFORE_GAP()  {flag0 = 1; flag1 = 1;}

                                        /* 曲轴状态机 */
                                        enum EM_CRANK_STATES
                                        {
                                            CRANK_SEEK,
                                            CRANK_BLANK_TIME,
                                            CRANK_BLANK_TEETH,
                                            CRANK_FIRST_EDGE,
                                            CRANK_SECOND_EDGE,
                                            CRANK_TEST_POSSIBLE_GAP,
                                            CRANK_VERIFY_GAP,
                                            CRANK_GAP_VERIFIED,
                                            CRANK_COUNTING,
                                            CRANK_TOOTH_BEFORE_GAP,
                                            CRANK_TOOTH_AFTER_GAP
                                        };

                                        /* 主服务请求 */
                                        /* 初始化 */
00000007                                #define CRANK_INIT                       7
                                        /* 进入高速模式 */
00000003                                #define CRANK_IPH                        3
                                        /* 调整角度计数 */
00000001                                #define CRANK_ANGLE_ADJUST               1

                                        /* 发动机位置状态，用于给主CPU反馈 */
00000000                                #define ENG_POS_SEEK                     0
00000001                                #define ENG_POS_FIRST_HALF_SYNC          1
00000002                                #define ENG_POS_PRE_FULL_SYNC            2
00000003                                #define ENG_POS_HALF_SYNC                3
00000004                                #define ENG_POS_FULL_SYNC                4

                                        #endif

00BD 0004                               struct tpr_struct tprReg @ tpr;

                                        /*******************************************************************************
                                         * CrankStall
                                         *
                                         * 描述:发动机停车处理，即曲轴信号检测满足超时条件
                                         *
                                         * 参数：
                                         * 输入参数:
                                         *     camChannel: 凸轮通道，用来向凸轮发出链接请求

ETPU "C" COMPILER 1.0.7.85                                              PAGE 102


                                         *     pTimeoutFlag: 保存超时标志
                                         *     pErrorStatus: 保存错误状态
                                         *     pCrankState: 保存曲轴状态机
                                         *
                                         * 输出参数:
                                         *
                                         * 备注:该函数内部调用，将所有值初始化，下次重新检测
                                         *
                                         * 遗留问题:
                                         ******************************************************************************/
                                        void CrankStall(unsigned int8 camChannel,
                                                        unsigned int32 linkGroup1,
                                                        unsigned int32 linkGroup2,
                                                        unsigned int8 *pTimeoutFlag,
                                                        unsigned int8 *pFirstRun,
                                                        unsigned int8 *pErrorStatus,
                                                        unsigned int8 *pCrankState)
000D 0010 0014 0019 001D 0021 0025      {
0C24 9FD67A0A   alu p = rar ,ccs;         
                    ram 0029 = p23_0.         
0C28                                        DisableMatch();
0C28 7FFFFFFD   chan neg_mrle.          
0C2C                                        OnTransA(NoDetect);
                                            OnTransB(NoDetect);
                                            ClearLSRLatch();
                                            ClearTransLatch();
                                            ClearMatchAEvent();
                                            ClearMatchBEvent();

                                            /* 清超时标志 */
0C2C 580FF6BF   chan ipaca = no_detect,         
                    ipacb = no_detect,         
                    clr_lsr,clr_mrla,         
                    clr_mrlb,clr_tdl.         
0C30 9FEFFF06   ram diob = 0019.            *pTimeoutFlag = 0;
0C34 FFEFF8D9   ram p31_0 = (diob).         
0C38 3FFF0FF2   alu a = 0 .             
0C3C 080BFBDA   alu nil = diob &          
                    #0x000002,ccs.         
0C40 F0E062BF   if z==0 jump 0C54,         
                    noflush.            
0C44 080BFBBA   alu nil = diob &          
                    #0x000001,ccs.         
0C48 3FF9AE74   alu_if z == 1 then          
                    p31_24 = a .         
0C4C 3FF9BEF4   alu_if z == 0 then          
                    p23_16 = a .         
0C50 F7C062FF   jump 0C5C,flush.         
0C54 3FF9CE74   alu_if z == 1 then          
                    p15_8 = a .         
0C58 3FF9DEF4   alu_if z == 0 then          
                    p7_0 = a .          
0C5C FFFFF8D9   ram (diob) = p31_0.         
                                            /* 设置错误标志 */
0C60 9FEFFF08   ram diob = 0021.            *pErrorStatus = *pErrorStatus | CRANK_STALL;

ETPU "C" COMPILER 1.0.7.85                                              PAGE 103


0C64 FFEFF8D9   ram p31_0 = (diob).         
0C68 080BFBDA   alu nil = diob &          
                    #0x000002,ccs.         
0C6C 3FF65E74   alu_if z == 1 then          
                    p15_0 = p31_16 .         
0C70 080BFBBA   alu nil = diob &          
                    #0x000001,ccs.         
0C74 3FF1AE74   alu_if z == 1 then          
                    p31_24 = p15_8 .         
0C78 3FF0AEF4   alu_if z == 0 then          
                    p31_24 = p7_0 .         
0C7C 3BF20FF4   alu a = p31_24 ,ccs.         
0C80 08290B82   alu a = a | #0x000008,         
                    ccs.                
0C84 9FEFFF08   ram diob = 0021.         
0C88 FFEFF8D9   ram p31_0 = (diob).         
0C8C 080BFBDA   alu nil = diob &          
                    #0x000002,ccs.         
0C90 F0E0653F   if z==0 jump 0CA4,         
                    noflush.            
0C94 080BFBBA   alu nil = diob &          
                    #0x000001,ccs.         
0C98 3FF9AE74   alu_if z == 1 then          
                    p31_24 = a .         
0C9C 3FF9BEF4   alu_if z == 0 then          
                    p23_16 = a .         
0CA0 F7C0657F   jump 0CAC,flush.         
0CA4 3FF9CE74   alu_if z == 1 then          
                    p15_8 = a .         
0CA8 3FF9DEF4   alu_if z == 0 then          
                    p7_0 = a .          
0CAC FFFFF8D9   ram (diob) = p31_0.         

                                            /* 清标志到初始状态，下次再有齿应当重新检测 */
                                            /* 设置状态机，因为已经初始化过发生的停车，所以下次从
                                             * 正时同步开始 */
0CB0 1C0F0FFE   alu a = #0x03.              *pCrankState = CRANK_FIRST_EDGE;
0CB4 9FEFFF09   ram diob = 0025.         
0CB8 FFEFF8D9   ram p31_0 = (diob).         
0CBC 080BFBDA   alu nil = diob &          
                    #0x000002,ccs.         
0CC0 F0E066BF   if z==0 jump 0CD4,         
                    noflush.            
0CC4 080BFBBA   alu nil = diob &          
                    #0x000001,ccs.         
0CC8 3FF9AE74   alu_if z == 1 then          
                    p31_24 = a .         
0CCC 3FF9BEF4   alu_if z == 0 then          
                    p23_16 = a .         
0CD0 F7C066FF   jump 0CDC,flush.         
0CD4 3FF9CE74   alu_if z == 1 then          
                    p15_8 = a .         
0CD8 3FF9DEF4   alu_if z == 0 then          
                    p7_0 = a .          
0CDC FFFFF8D9   ram (diob) = p31_0.         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 104


                                            /* 重置引擎同步状态标志 */
0CE0 3FFFAFF2   alu p31_24 = 0 .            gEngPosSyncState = ENG_POS_SEEK;
0CE4 CFFFF100   ram 0000 = p31_24.         
                                            /* 通知主CPU同步标志已改变 */
                                            SetChannelInterrupt();

0CE8 FFF83CF9   chan cir;Clear flag0.        SET_CRANK_FLAGS_OTHER();

                                            /* 清各寄存器 */
0CEC FFFAFCF9   Clear flag1.            
0CF0                                        trr = 0xffffff;
0CF0 7EFFEFFF   alu trr = -1 .          
0CF4                                        tpr = 0;
0CF4 3FFF2FD2   alu tpr = 0 .           
0CF8                                        tcr2 = 0;

                                            /* 发出链接请求，以通知其他通道，发动机已停车 */
                                            /*--------------------------------------------*/
0CF8 9FEF9B03   alu tcr2 = 0 ;              LinkToChannel(camChannel);
                    ram p23_0 = 000D.         
                                        #if 1
                                        #ifdef REGISTER_PASSING
0CFC 3BF71FD4   alu link = p23_16 ,ccs.         
0D00                                    #asm
0D00 CFEFF004                 ram p31_0 <- linkGroup1.
                                #endasm
0D04 FFC11A5F   call 2348,flush.                      Link4();
                                        #asm
0D08 CFEFF005                 ram p31_0 <- linkGroup2.
                                #endasm
0D0C FFC11A5F   call 2348,flush.                      Link4();
                                        #else
                                              Link4(linkGroup1);
                                              Link4(linkGroup2);
                                        #endif
                                        #endif

                                            SetChannelMode(sm_st);
0D10 4FFFFFF9   chan sm_st.             
0D14 9DEF0F07   alu a = 1 ;                 *pFirstRun = 1;
                    ram diob = 001D.         
0D18 FFEFF8D9   ram p31_0 = (diob).         
0D1C 080BFBDA   alu nil = diob &          
                    #0x000002,ccs.         
0D20 F0E069BF   if z==0 jump 0D34,         
                    noflush.            
0D24 080BFBBA   alu nil = diob &          
                    #0x000001,ccs.         
0D28 3FF9AE74   alu_if z == 1 then          
                    p31_24 = a .         
0D2C 3FF9BEF4   alu_if z == 0 then          
                    p23_16 = a .         
0D30 F7C069FF   jump 0D3C,flush.         
0D34 3FF9CE74   alu_if z == 1 then          
                    p15_8 = a .         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 105


0D38 3FF9DEF4   alu_if z == 0 then          
                    p7_0 = a .          
0D3C FFFFF8D9   ram (diob) = p31_0.         

                                            /* 立即开始新的匹配，以重新检测曲轴齿 */
0D40 5AE0FFFF   chan ipaca = high_low,        SetupCaptureTrans_A(Capture_tcr1, high_low);
                    tbsa = mtcr1_ctcr1_ge         
                    ,clr_tdl.           
0D44 DF2FF20A   ram p23_0 = 0029;       }
                    chan mtd = enable_mtsr         
                    .                   
0D48 3BF86FD4   alu rar = p ,ccs.         
0D4C FFDFCCF9   return,flush.           

                                        /*******************************************************************************
                                         * CrankLsrProcess
                                         *
                                         * 描述:链接请求处理函数
                                         *
                                         * 参数：
                                         * 输入参数:
                                         *
                                         * 输出参数:
                                         *
                                         * 备注:
                                         *
                                         * 遗留问题:
                                         ******************************************************************************/
                                        void CrankLsrProcess(void)
                                        {
                                            /* 凸轮信号已定位标记齿 */
0D50 CFEFF101   ram p31_24 = 0004.          if (gCamState >= CAM_MARK_VERIFIED)
0D54 1C1F0F9E   alu a = #0x04.          
0D58 3832FFF4   alu nil = p31_24 - a ,        {
                    ccs.                
                                                /* 若引擎同步状态为第一次半同步，此时出现了凸轮，则可以在线程
                                                 * TOOTH_AFTER_GAP中，根据此状态确定第一次运行是第一个缺齿周期还是
                                                 * 第二个缺齿周期，以确定最终的同步状态 */
0D5C F0886CFF   if c==1 jump 0D9C,flush.    
                                        
0D60 CFEFF100   ram p31_24 = 0000.              if (gEngPosSyncState == ENG_POS_FIRST_HALF_SYNC)
0D64 0802FBAA   alu nil = p31_24 ^              {
                    #0x000001,ccs.         
0D68 F0C06BFF   if z==0 jump 0D7C,flush.         
                                        
0D6C 1C0FAFDE   alu p31_24 = #0x02.                 gEngPosSyncState = ENG_POS_PRE_FULL_SYNC;
0D70 CFFFF100   ram 0000 = p31_24.         
                                                    SetChannelInterrupt();
                                                }
                                                /* 若同步状态为半同步，则更新为同步 */
0D74 F7E06D5F   jump 0DA8,noflush.                        else if (gEngPosSyncState == ENG_POS_HALF_SYNC)
0D78 FFFF3CF9   chan cir.               
0D7C CFEFF100   ram p31_24 = 0000.              {
0D80 0802FBEA   alu nil = p31_24 ^          
                    #0x000003,ccs.         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 106


                                                    //gEngPosSyncState = ENG_POS_FULL_SYNC;
0D84 F0C06D5F   if z==0 jump 0DA8,flush.         
                                        
0D88 1C0FAFDE   alu p31_24 = #0x02.                 gEngPosSyncState = ENG_POS_PRE_FULL_SYNC;
0D8C CFFFF100   ram 0000 = p31_24.         
                                                    SetChannelInterrupt();
                                                }
0D90 F7E06D5F   jump 0DA8,noflush.                        else
0D94 FFFF3CF9   chan cir.               
                                                {
                                                    gEngPosSyncState = gEngPosSyncState;
                                                }
                                            }
                                            /* 凸轮信号未定位标记齿 */
0D98 F7C06D5F   jump 0DA8,flush.                    else
                                            {
0D9C 1C0FAFFE   alu p31_24 = #0x03.             gEngPosSyncState = ENG_POS_HALF_SYNC;
0DA0 CFFFF100   ram 0000 = p31_24.         
                                                SetChannelInterrupt();
0DA4 FFFF3CF9   chan cir.               
0DA8                                        }
0DA8 FFDFCCF9   return,flush.           }

                                        /*******************************************************************************
                                         * CrankDetect
                                         *
                                         * 描述:曲轴检测，同步
                                         *
                                         * 参数：
                                         * 输入参数:
                                         *     errorStatus: 错误状态
                                         *     camChannel: 凸轮通道
                                         *     crankTeethRev: 曲轴每圈共多少个齿，包含缺齿
                                         *     crankNumMissing: 曲轴缺齿数
                                         *     blankTime: 初始化后空白的时间，以TCR1计数为单位
                                         *     blankTeeth: 空白时间后的空白齿个数
                                         *     winRatioNormal: 下一个齿为正常齿时的窗口系数
                                         *     winRatioACGap: 缺齿后第一个正常齿的窗口系数
                                         *     winRatioAFGap: 缺齿后第二个正常齿的窗口系数
                                         *     winRatioTimeout: 超时的窗口系数
                                         *     gapRatio: 用于缺齿的ABa检测系数
                                         *     linkGroup1: 曲轴停车后需要发出链接请求的通道组，32位数的每8位表示一个通道
                                         *     linkGroup2: 曲轴停车后需要发出链接请求的通道组，32位数的每8位表示一个通道
                                         *     hostAssertTeeth: 当移除齿时，主CPU需要插入的齿数
                                         *     angleAdjust: 直接调整TCR2的计数
                                         *     crankState: 保存曲轴状态机
                                         *     toothCount: 齿计数
                                         *     toothPeriodA: 保存齿周期，用来计算曲轴转速
                                         *
                                         * 输出参数:
                                         *
                                         * 备注:曲轴转2圈完成一个循环，角度为1到720度，对应的TCR2计数从0到36000，即1度
                                         * 细分为50份，一个齿对应300个TCR2，转完一圈后TCR2回到0
                                         *
                                         * 遗留问题:

ETPU "C" COMPILER 1.0.7.85                                              PAGE 107


                                         ******************************************************************************/
                                        void CrankDetect(unsigned int8 errorStatus, /*错误状态*/
                                                         unsigned int8 camChannel, /*凸轮通道*/
                                                         unsigned int24 crankTeethRev, /*曲轴每圈共多少个齿，包含缺齿*/
                                                         unsigned int24 crankNumMissing, /*曲轴缺齿数*/
                                                         unsigned int24 blankTime, /*初始化后空白的时间，以TCR1计数为单位*/
                                                         unsigned int8 blankTeeth, /*空白时间后的空白齿个数*/
                                                         unsigned int24 firstTimeout, /*空白齿后，等待第一个齿的超时时间，以TCR1计数为单位*/
                                                         unsigned fract24 winRatioNormal, /*下一个齿为正常齿时的窗口系数*/
                                                         unsigned fract24 winRatioACGap, /*缺齿后第一个正常齿的窗口系数*/
                                                         unsigned fract24 winRatioAFGap, /*缺齿后第二个正常齿的窗口系数*/
                                                         unsigned fract24 winRatioTimeout, /*超时的窗口系数*/
                                                         unsigned fract24 gapRatio, /*用于缺齿的ABa检测系数*/
                                                         unsigned int32 linkGroup1, /*曲轴停车后需要发出链接请求的通道组*/
                                                         unsigned int32 linkGroup2, /*曲轴停车后需要发出链接请求的通道组*/
                                                         unsigned int24 hostAssertTeeth, /*当移除齿时，主CPU需要插入的齿数*/
                                                         signed int24 angleAdjust, /*直接调整TCR2的计数*/
                                                         unsigned int8 crankState, /*保存曲轴状态机*/
                                                         unsigned int24 toothCount, /*齿计数*/
                                                         unsigned int24 toothPeriodA /* 保存第N-2和N-1齿的周期 */)
0000 0001 0005 0009 000D 0002 0011 0015     {
0019 001D 0021 0025 0028 002C 0031 0035          
0003 0039 003D                          
                                            /* 记录这个齿发生的TCR1时刻 */
0041                                        static unsigned int24 toothTime;
                                            /* 记录上个齿发生的TCR1时刻 */
0045                                        static unsigned int24 lastToothTime;
                                            /* 指示超时是否是预期的 */
0004                                        static unsigned int8 blankTimeout;
                                            /* 指示凸轮状态 */
0008                                        static unsigned int8 camState;
                                            /* 保存缺齿的周期 */
0049                                        static unsigned int24 toothPeriodB;
                                            /* 保存缺齿的平均齿周期 */
FFFF                                        unsigned int24 toothPeriodBAvg;
                                            /*窗口检测时半窗口宽度*/
004D                                        static unsigned int24 halfWinWidth;
                                            /* 超时标志 */
000C                                        static unsigned int8 timeoutFlag;
                                            /* 首次找到缺齿标志 */
0010                                        static unsigned int8 firstRun;
                                            /* 保存曲轴物理齿数，即每圈齿数减缺齿，仅初始化赋值 */
0051                                        static unsigned int24 crankPhyTeeth;
                                            /* 保存曲轴第一圈缺齿前最后一个齿计数值 */
0055                                        static unsigned int24 crankLastTooth1;
                                            /* 保存曲轴第二圈缺齿前最后一个齿计数值 */
0059                                        static unsigned int24 crankLastTooth2;

                                            /* 初始化线程 */
                                            if (HostServiceRequest == CRANK_INIT)
                                            {
                                                /* 禁止通道的所有工作 */
                                                DisableMatchesInThread();
                                                    OnTransA(NoDetect);
                                                    OnTransB(NoDetect);

ETPU "C" COMPILER 1.0.7.85                                              PAGE 108


                                                    ClearLSRLatch();
                                                ClearTransLatch();
                                                ClearMatchAEvent();
                                                ClearMatchBEvent();

                                                /* 先设为sm_st，检测到第一个跳变后改为m2_o_st，实现窗口内捕获 */
                                                SetChannelMode(sm_st);
                                                /* 初始化FLAG */
0DAC 580FF6B9   chan ipaca = no_detect,         
                    ipacb = no_detect,         
                    sm_st,clr_lsr,         
                    clr_mrla,clr_mrlb,         
                    clr_tdl.            
0DB0 FFF8FCF9   Clear flag0.                    SET_CRANK_FLAGS_OTHER();

                                                /* 重置TPR，TRR和TCR2 */
0DB4 FFFAFCF9   Clear flag1.            
0DB8                                            trr = 0xFFFFFF;
0DB8 7EFFEFFF   alu trr = -1 .          
0DBC                                            tpr = 0;
0DBC 3FFF2FD2   alu tpr = 0 .           
0DC0                                            tcr2 = 0;

                                                /* 局部变量初始化 */
0DC0 BFEF9B80   alu tcr2 = 0 ;                  crankState = CRANK_BLANK_TIME;
                    ram p23_0 = PRAM1.         
0DC4 BDFFDB80   alu p7_0 = 1 ;          
                    ram PRAM1 = p23_0.         
0DC8 3FFFAFF2   alu p31_24 = 0 .                gEngPosSyncState = ENG_POS_SEEK;
0DCC CFFFF100   ram 0000 = p31_24.         
0DD0 CFFFFD02   ram PRAM8 = #0(8) .             camState = 0;
0DD4 CFFFFD03   ram PRAM12 = #0(8) .            timeoutFlag = 0;
0DD8 3DFFAFF4   alu p31_24 = 1 .                firstRun = 1;
0DDC CFFFF984   ram PRAM16 = p31_24.         
0DE0 BFFFFF0E   ram PRAM57 = #0(24) .            toothCount = 0;
0DE4 CFFFFD01   ram PRAM4 = #0(8) .             blankTimeout = 0;
0DE8 CFFFFD00   ram PRAM0 = #0(8) .             errorStatus = 0;

                                                /* 计算齿数相关参数 */
0DEC BFEFFB81   ram p23_0 = PRAM5.              crankPhyTeeth = crankTeethRev - crankNumMissing;
0DF0 BFE80A82   alu a = p ,ccs;         
                    ram p23_0 = PRAM9.         
0DF4 BC197A94   alu p = a - p ,ccs;         
                    ram PRAM81 = p23_0.         
0DF8 BFEFFB81   ram p23_0 = PRAM5.              crankLastTooth1 = crankTeethRev - crankNumMissing;
0DFC BFE80A82   alu a = p ,ccs;         
                    ram p23_0 = PRAM9.         
0E00 BC197A95   alu p = a - p ,ccs;         
                    ram PRAM85 = p23_0.         
0E04 BFEFFB81   ram p23_0 = PRAM5.              crankLastTooth2 = (crankTeethRev << 1) - crankNumMissing;
0E08 B3E80A82   alu a = p <<1 ,ccs;         
                    ram p23_0 = PRAM9.         

                                                /* 只开MatchA，初始化时窗口一直打开 */
0E0C BC197A96   alu p = a - p ,ccs;         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 109


                    ram PRAM89 = p23_0.         
0E10 5AE0FFFF   chan ipaca = high_low,            SetupCaptureTrans_A(Capture_tcr1, high_low);
                    tbsa = mtcr1_ctcr1_ge         
                    ,clr_tdl.           
0E14 F73FFCFB   chan mtd = enable_mtsr;        }
                    end.                
00CA 03 6B        03 A05 P01 MD 0DAC  HSR 6/7   lsr x  m1 x  m2 x  pin x  flag1 x  flag0 x                             
                                         
0000             Thread Local RAM size                                   
                                            /* 直接调整角度计数的服务请求 */
                                            else if (HostServiceRequest == CRANK_ANGLE_ADJUST)
                                            {
                                                DisableMatchesInThread();
0E18 BFEFFB8D   ram p23_0 = PRAM53.             tcr2 = tcr2 + angleAdjust;
0E1C 6F1D9FFB   alu tcr2 = tcr2 + p ,ccs        }
                    ,end.               
00C8 03 86        03 A04 P01 MD 0E18  HSR 1/4/5 lsr x  m1 x  m2 x  pin x  flag1 x  flag0 x                             
                                         
0000             Thread Local RAM size                                   
                                            /* 主CPU插入齿时的服务请求 */
                                            else if (HostServiceRequest == CRANK_IPH)
                                            {
                                                DisableMatchesInThread();
0E20 3BF20FB4   alu a = tpr ,ccs.               tprReg.IPH = 1;
0E24 08490F82   alu a = a | #0x001000,         
                    ccs.                
0E28 BFA92A8C   alu tpr = a ,ccs;               toothCount = hostAssertTeeth;
                    ram p23_0 = PRAM49.         
0E2C AFFFFB8E   ram PRAM57 = p23_0,end.        }
00C0 03 88        03 A00 P01 MD 0E20  HSR 2/3   lsr x  m1 x  m2 x  pin 0  flag1 x  flag0 0                             
00C2 03 88        03 A01 P01 MD 0E20  HSR 2/3   lsr x  m1 x  m2 x  pin 0  flag1 x  flag0 1                             
00C4 03 88        03 A02 P01 MD 0E20  HSR 2/3   lsr x  m1 x  m2 x  pin 1  flag1 x  flag0 0                             
00C6 03 88        03 A03 P01 MD 0E20  HSR 2/3   lsr x  m1 x  m2 x  pin 1  flag1 x  flag0 1                             
                                         
0000             Thread Local RAM size                                   
                                            /* MRLA发生，且MRLB或TDLA发生，且处于正常计数模式，此时
                                             * 若MRLA和TDLA发生，则说明齿出现在窗口中，需要进行trr校正，并计算下个窗口，
                                                   若此时齿计数为缺齿前的2个齿，则使下次齿跳转到缺齿前的处理流程；
                                               若TDLA未发生，则说明发生了MRLB，说明超时，有可能是正常缺齿或异常缺齿，
                                                   也有可能发生了停车，需要分别处理 */
                                            else if (m1 == 1 && m2 == 1 && CRANK_FLAGS_COUNTING)
                                            {
                                                DisableMatchesInThread();
0E30 BFEFFB8E   ram p23_0 = PRAM57.             toothCount++;

                                                /* 正常情况，在窗口内捕获到跳变 */
0E34 F220775F   if tdl1==0 jump 0EE8,                        if (IsTransALatched())
                    noflush.            
0E38 BDF87A8E   alu p = p + 1 ,ccs;     
                    ram PRAM57 = p23_0.    
0E3C                                            {
                                                    /* 保存上次齿时刻 */
0E3C BFEFFB90   ram p23_0 = PRAM65.                 lastToothTime = toothTime;
                                                    /* 告知下次线程：上次未发生超时 */
0E40 BFFFFB91   ram PRAM69 = p23_0.         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 110


0E44 CFFFFD03   ram PRAM12 = #0(8) .                timeoutFlag = 0;
                                                    /* 保存本次齿时刻 */
0E48 BFFE7A90   alu p = erta ,ccs;                  toothTime = erta;
                    ram PRAM65 = p23_0.         
                                                    /* 计算本次周期 */
0E4C BFEFFB90   ram p23_0 = PRAM65.                 toothPeriodA = toothTime - lastToothTime;
0E50 BFE80A91   alu a = p ,ccs;         
                    ram p23_0 = PRAM69.         
0E54 BC197A8F   alu p = a - p ,ccs;         
                    ram PRAM61 = p23_0.         
0E58 3B180FF5   alu a = p + p <<1,ccs.                trr = ((toothPeriodA << 3) / (CRANK_ANGLE_PER_TOOTH)) << 6;
0E5C 3BF90FF5   alu a = a <<1,ccs.         
0E60 00BF741D   alu p = #0x012C.         
0E64 3B190FEE   mdu a div p ,ccs.         
0E68 F348735F   if mb==1 jump 0E68,flush         
                    .                   
0E6C 3BF80FB4   alu a = macl ,ccs.         
0E70 18090BAA   alu a = a <<4,ccs.         

                                                    /* 若本次为缺齿前的第2个齿，则下次应跳转到缺齿前处理 */
                                                    if ((toothCount == crankLastTooth1 - 1) || 
0E74 B329EA95   alu trr = a + a <<1 ,ccs                    (toothCount == crankLastTooth2 - 1))
                    ;ram p23_0 = PRAM85.    
                                        
0E78 BEE80A8E   alu a = p -1 ,ccs;                  {
                    ram p23_0 = PRAM57.         
0E7C 3819FFF4   alu nil = a - p ,ccs.         
0E80 F0C874BF   if z==1 jump 0E94,flush.                
                                        
0E84 BFEFFB96   ram p23_0 = PRAM89.         
0E88 BEE80A8E   alu a = p -1 ,ccs;         
                    ram p23_0 = PRAM57.         
0E8C 3819FFF4   alu nil = a - p ,ccs.         
0E90 F0C0753F   if z==0 jump 0EA4,flush.                
                                        
                                                        /* 切换状态机 */
0E94 BFEFFB80   ram p23_0 = PRAM1.                      crankState = CRANK_TOOTH_BEFORE_GAP;
0E98 1C2FDFBE   alu p7_0 = #0x09.         
                                                        /* 设置标志，以便下次跳入指定线程 */
0E9C CFF9FA80   ram PRAM1 = p23_0;                      SET_CRANK_FLAGS_TOOTH_BEFORE_GAP();
                    Set flag0.          
                                                    }

                                                    /* 计算窗口 */
0EA0 FFFBFCF9   Set flag1.              
0EA4 BFEFFB8F   ram p23_0 = PRAM61.                 halfWinWidth = toothPeriodA * winRatioNormal;
0EA8 BFE80A85   alu a = p ,ccs;         
                    ram p23_0 = PRAM21.         
0EAC 3B190FE9   mdu a multu p ,ccs.         
0EB0 F348759F   if mb==1 jump 0EB0,flush         
                    .                   

0EB4 BFD77A93   alu p = mach ,ccs;         
                    ram PRAM77 = p23_0.         
0EB8                                                ClearTransLatch();

ETPU "C" COMPILER 1.0.7.85                                              PAGE 111


                                                    ClearMatchALatch();
                                                    ClearMatchBLatch();
                                                    SetupMatch_A(toothTime + toothPeriodA - halfWinWidth,
0EB8 DFE75A90   ram p23_0 = PRAM65;                              Mtcr1_Ctcr1_ge, match_no_change);
                    chan clr_mrla,         
                    clr_mrlb,clr_tdl.         
0EBC BFE80A8F   alu a = p ,ccs;         
                    ram p23_0 = PRAM61.         
0EC0 BF090A93   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM77.         
0EC4 38192FF4   alu erta = a - p ,ccs.         
0EC8 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
                                                    SetupMatch_B(toothTime + toothPeriodA + halfWinWidth,
0ECC DF2FFA90   ram p23_0 = PRAM65;                              Mtcr1_Ctcr2_ge, match_no_change);
                    chan mtd = enable_mtsr         
                    .                   
0ED0 BFE80A8F   alu a = p ,ccs;         
                    ram p23_0 = PRAM61.         
0ED4 BF090A93   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM77.         
0ED8 3B193FF4   alu ertb = a + p ,ccs.         
0EDC 4F1F2F9F   chan opacb = no_change,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
                                                }
                                                /* MRLB发生，说明超时 */
0EE0 F7E07E7F   jump 0FCC,noflush.                        else
0EE4 FF3FFCFB   chan mtd = enable_mtsr.         
                                                {
                                                    /* 若本次为缺齿前2齿，则下次跳转到缺齿 */
                                                    if ((toothCount == crankLastTooth1 - 1) || 
0EE8 BFEFFB95   ram p23_0 = PRAM85.                     (toothCount == crankLastTooth2 - 1))
0EEC BEE80A8E   alu a = p -1 ,ccs;                  {
                    ram p23_0 = PRAM57.         
0EF0 3819FFF4   alu nil = a - p ,ccs.         
0EF4 F0C8785F   if z==1 jump 0F08,flush.                
                                        
0EF8 BFEFFB96   ram p23_0 = PRAM89.         
0EFC BEE80A8E   alu a = p -1 ,ccs;         
                    ram p23_0 = PRAM57.         
0F00 3819FFF4   alu nil = a - p ,ccs.         
0F04 F0C078DF   if z==0 jump 0F18,flush.                
                                        
                                                        /* 切换状态机 */
0F08 BFEFFB80   ram p23_0 = PRAM1.                      crankState = CRANK_TOOTH_BEFORE_GAP;
0F0C 1C2FDFBE   alu p7_0 = #0x09.         
                                                        /* 设置标志，以便下次跳入指定线程 */
0F10 CFF9FA80   ram PRAM1 = p23_0;                      SET_CRANK_FLAGS_TOOTH_BEFORE_GAP();
                    Set flag0.          
                                                    }


ETPU "C" COMPILER 1.0.7.85                                              PAGE 112


                                                    /* 之前没有超时过，则漏检了齿信号，需要进入高速模式以追赶 */
0F14 FFFBFCF9   Set flag1.              
0F18 CFEFF883   ram p31_0 = PRAM12.                 if (timeoutFlag == 0)
0F1C 3BF20FF4   alu a = p31_24 ,ccs.                {
                                                        /* 假设物理齿 */
0F20 F0C07C9F   if z==0 jump 0F90,flush.         
                                        
0F24 BFEFFB93   ram p23_0 = PRAM77.                     toothTime = erta + halfWinWidth;
                                                        /* 设置错误标志 */
0F28 BF1E7A90   alu p = erta + p ,ccs;         
                    ram PRAM65 = p23_0.         
0F2C CFEFF880   ram p31_0 = PRAM0.                      errorStatus = errorStatus | CRANK_TIMEOUT;
0F30 0812AB82   alu p31_24 = p31_24 |          
                    #0x000004,ccs.         
                                                        /* 给出超时标志，供下周期使用 */
0F34 CFFFF980   ram PRAM0 = p31_24.         
0F38 3DFFAFF4   alu p31_24 = 1 .                        timeoutFlag = 1;
                                                        /* 进入高速模式（从正常模式）或正常模式（从挂起模式） */
0F3C CFFFF983   ram PRAM12 = p31_24.         
0F40 3BF20FB4   alu a = tpr ,ccs.                       tprReg.IPH = 1;
0F44 08490F82   alu a = a | #0x001000,         
                    ccs.                
                                                        /* 通知主CPU */
0F48 3BF92FD4   alu tpr = a ,ccs.         
0F4C                                                    SetChannelInterrupt();

                                                        /*基于超时前的周期计算窗口大小*/
0F4C CFEF3A8F   ram p23_0 = PRAM61;                     halfWinWidth = toothPeriodA * winRatioTimeout;
                    chan cir.           
0F50 BFE80A88   alu a = p ,ccs;         
                    ram p23_0 = PRAM33.         
0F54 3B190FE9   mdu a multu p ,ccs.         
0F58 F3487ADF   if mb==1 jump 0F58,flush         
                    .                   

0F5C BFD77A93   alu p = mach ,ccs;         
                    ram PRAM77 = p23_0.         
0F60                                                    ClearMatchALatch();
                                                        ClearMatchBLatch();
                                                        SetupMatch_A(toothTime + toothPeriodA - halfWinWidth,
0F60 DFEF5A90   ram p23_0 = PRAM65;                                  Mtcr1_Ctcr1_ge, match_no_change);
                    chan clr_mrla,         
                    clr_mrlb.           
0F64 BFE80A8F   alu a = p ,ccs;         
                    ram p23_0 = PRAM61.         
0F68 BF090A93   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM77.         
0F6C 38192FF4   alu erta = a - p ,ccs.         
0F70 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
                                                        SetupMatch_B(toothTime + toothPeriodA + halfWinWidth,
0F74 DF2FFA90   ram p23_0 = PRAM65;                                  Mtcr1_Ctcr2_ge, match_no_change);
                    chan mtd = enable_mtsr         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 113


                    .                   
0F78 BFE80A8F   alu a = p ,ccs;         
                    ram p23_0 = PRAM61.         
0F7C BF090A93   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM77.         
0F80 3B193FF4   alu ertb = a + p ,ccs.         
0F84 4F1F2F9F   chan opacb = no_change,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
                                                    }
                                                    /* 之前已经超时过，则认为彻底丢失齿信号，进入停车状态 */
0F88 F7E07E7F   jump 0FCC,noflush.                            else
0F8C FF3FFCFB   chan mtd = enable_mtsr.         
                                                    {
0F90 BFEFFB80   ram p23_0 = PRAM1.                      CrankStall(camChannel, linkGroup1, linkGroup2,
0F94 9FE70A03   alu a = p23_16 ,ccs;         
                    ram p23_0 = 000D.         
0F98 9FF9BA03   alu p23_16 = a ,ccs;         
                    ram 000D = p23_0.         
0F9C CFEFF88A   ram p31_0 = PRAM40.         
0FA0 CFFFF004   ram 0010 = p31_0.         
0FA4 CFEFF88B   ram p31_0 = PRAM44.         
0FA8 CFFFF005   ram 0014 = p31_0.         
0FAC 1C3A7B8E                                                      &timeoutFlag, &firstRun, &errorStatus, &crankState);
                    alu p = chan_base + #0x0C         
                    ,ccs.               
0FB0 9FFFFB06   ram 0019 = p23_0.         
0FB4 1C4A7B8E                           
                    alu p = chan_base + #0x10         
                    ,ccs.               
0FB8 9FFFFB07   ram 001D = p23_0.         
0FBC 9FDA7A08   alu p = chan_base ,ccs;         
                    ram 0021 = p23_0.         
0FC0 1C0A7BEE                           
                    alu p = chan_base + #0x03         
                    ,ccs.               
0FC4 FFE0613F   call 0C24,noflush.         
0FC8 9FFFFB09   ram 0025 = p23_0.         
                                                    } /* end of if (timeoutFlag == 0) */
                                                } /* end of if (IsTransALatched()) */
0FCC 6FFFFFFF   end.                        }
00F4 03 8C        03 A1A P01 MD 0E30  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 1  flag0 0                             
00FC 03 8C        03 A1E P01 MD 0E30  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 1  flag0 0                             
                                         
0000             Thread Local RAM size                                   
                                            /* 缺齿前的齿，应在本周期准备能够接纳缺齿的窗口 */
                                            else if (m1 == 1 && m2 == 1 && CRANK_FLAGS_TOOTH_BEFORE_GAP)
                                            {
                                                DisableMatchesInThread();

                                                /* 在窗口内检测到了缺齿前的齿，说明正常，需要更新trr，设置缺齿需要的
                                                 * 窗口，同时通知角度模式插入虚拟齿 */
                                                if (IsTransALatched())
0FD0 F200857F   if tdl1==0 jump 10AC,    

ETPU "C" COMPILER 1.0.7.85                                              PAGE 114


                    flush.              
0FD4 BFEFFB8E   ram p23_0 = PRAM57.             {
0FD8                                                toothCount++;
                                                    /* 保存上次齿时刻 */
0FD8 BDF87A8E   alu p = p + 1 ,ccs;         
                    ram PRAM57 = p23_0.         
0FDC BFEFFB90   ram p23_0 = PRAM65.                 lastToothTime = toothTime;
                                                    /* 告知下次线程：上次未发生超时 */
0FE0 BFFFFB91   ram PRAM69 = p23_0.         
0FE4 CFFFFD03   ram PRAM12 = #0(8) .                timeoutFlag = 0;
                                                    /* 保存本次齿时刻 */
0FE8 BFFE7A90   alu p = erta ,ccs;                  toothTime = erta;
                    ram PRAM65 = p23_0.         
                                                    /* 计算本次周期 */
0FEC BFEFFB90   ram p23_0 = PRAM65.                 toothPeriodA = toothTime - lastToothTime;
0FF0 BFE80A91   alu a = p ,ccs;         
                    ram p23_0 = PRAM69.         
0FF4 BC197A8F   alu p = a - p ,ccs;         
                    ram PRAM61 = p23_0.         
0FF8 3B180FF5   alu a = p + p <<1,ccs.                trr = ((toothPeriodA << 3) / (CRANK_ANGLE_PER_TOOTH)) << 6;
0FFC 3BF90FF5   alu a = a <<1,ccs.         
1000 00BF741D   alu p = #0x012C.         
1004 3B190FEE   mdu a div p ,ccs.         
1008 F348805F   if mb==1 jump 1008,flush         
                    .                   
100C 3BF80FB4   alu a = macl ,ccs.         
1010 18090BAA   alu a = a <<4,ccs.         

                                                    /* 切换状态机，下次进入缺齿后的线程 */
1014 B329EA80   alu trr = a + a <<1 ,ccs                crankState = CRANK_TOOTH_AFTER_GAP;
                    ;ram p23_0 = PRAM1.         
1018 1C2FDFDE   alu p7_0 = #0x0A.         
101C CFF9FA80   ram PRAM1 = p23_0;                  SET_CRANK_FLAGS_TOOTH_AFTER_GAP();
                    Set flag0.          
                                                    /* 设置MISSCNT，以通知角度模式插入虚拟齿 */
1020 CFEAFA82   ram p23_0 = PRAM9;                  tprReg.MISSCNT = crankNumMissing;
                    Clear flag1.         
1024 08080BFA   alu a = p & #0x000003,         
                    ccs.                
1028 18090BCA   alu a = a <<8,ccs.         
102C 18090BAA   alu a = a <<4,ccs.         
1030 3BF90FF5   alu a = a <<1,ccs.         
1034 3FF93FD4   alu b = a .             
1038 13FFFFE4   alu p = #0xFF9FFF.         
103C 3B120FB2   alu a = tpr & p ,ccs.         
                                                    /* 若为第二圈缺齿前最后一个齿，则清零 */
1040 3B332F90   alu tpr = b | a ,ccs.    
1044 BFEFFB8E   ram p23_0 = PRAM57.                 if (toothCount == crankLastTooth2)
1048 BFE80A96   alu a = p ,ccs;         
                    ram p23_0 = PRAM89.    
104C 3819FFF4   alu nil = a - p ,ccs.                {
1050 F0C0831F   if z==0 jump 1060,flush.         
                                        
1054 3BF20FB4   alu a = tpr ,ccs.                       tprReg.LAST = 1;
1058 0A090F82   alu a = a | #0x008000,         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 115


                    ccs.                
                                                    }

                                                    /*计算窗口宽度，应使用缺齿中的窗口*/
105C 3BF92FD4   alu tpr = a ,ccs.         
1060 BFEFFB8F   ram p23_0 = PRAM61.                 halfWinWidth = toothPeriodA * winRatioACGap;
1064 BFE80A86   alu a = p ,ccs;         
                    ram p23_0 = PRAM25.         
1068 3B190FE9   mdu a multu p ,ccs.         
106C F348837F   if mb==1 jump 106C,flush         
                    .                   

1070 BFD77A93   alu p = mach ,ccs;         
                    ram PRAM77 = p23_0.         
1074                                                ClearTransLatch();
                                                    ClearMatchALatch();
                                                    ClearMatchBLatch();
                                                    /* 窗口开启提前，以提高可能的加速情况下的稳定性 */
                                                    SetupMatch_A(toothTime + toothPeriodA / 2,
1074 DFE75A8F   ram p23_0 = PRAM61;                              Mtcr1_Ctcr1_ge, match_no_change);
                    chan clr_mrla,         
                    clr_mrlb,clr_tdl.         
1078 B7E80A90   alu a = p >>1 ,ccs;         
                    ram p23_0 = PRAM65.         
107C 3B192FF4   alu erta = a + p ,ccs.         
1080 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
                                                    /* 窗口关闭时间要考虑缺齿的影响 */
                                                    SetupMatch_B(toothTime + toothPeriodA * (crankNumMissing + 1) + halfWinWidth,
1084 DF2FFA82   ram p23_0 = PRAM9;                               Mtcr1_Ctcr2_ge, match_no_change);
                    chan mtd = enable_mtsr         
                    .                   
1088 BDE80A8F   alu a = p + 1 ,ccs;         
                    ram p23_0 = PRAM61.         
108C 3B190FE9   mdu a multu p ,ccs.         
1090 F348849F   if mb==1 jump 1090,flush         
                    .                   
1094 BFC80A90   alu a = macl ,ccs;         
                    ram p23_0 = PRAM65.         
1098 BF090A93   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM77.         
109C 3B193FF4   alu ertb = a + p ,ccs.         
10A0 4F1F2F9F   chan opacb = no_change,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
                                                }
                                                /* 缺齿前超时直接停车，下次动作已无法预测 */
10A4 F7E0875F   jump 10E8,noflush.                        else
10A8 FF3FFCFB   chan mtd = enable_mtsr.         
                                                {
10AC BFEFFB80   ram p23_0 = PRAM1.                  CrankStall(camChannel, linkGroup1, linkGroup2,
10B0 9FE70A03   alu a = p23_16 ,ccs;         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 116


                    ram p23_0 = 000D.         
10B4 9FF9BA03   alu p23_16 = a ,ccs;         
                    ram 000D = p23_0.         
10B8 CFEFF88A   ram p31_0 = PRAM40.         
10BC CFFFF004   ram 0010 = p31_0.         
10C0 CFEFF88B   ram p31_0 = PRAM44.         
10C4 CFFFF005   ram 0014 = p31_0.         
10C8 1C3A7B8E                                                  &timeoutFlag, &firstRun, &errorStatus, &crankState);
                    alu p = chan_base + #0x0C         
                    ,ccs.               
10CC 9FFFFB06   ram 0019 = p23_0.         
10D0 1C4A7B8E                           
                    alu p = chan_base + #0x10         
                    ,ccs.               
10D4 9FFFFB07   ram 001D = p23_0.         
10D8 9FDA7A08   alu p = chan_base ,ccs;         
                    ram 0021 = p23_0.         
10DC 1C0A7BEE                           
                    alu p = chan_base + #0x03         
                    ,ccs.               
10E0 FFE0613F   call 0C24,noflush.         
10E4 9FFFFB09   ram 0025 = p23_0.         
                                                }
10E8 6FFFFFFF   end.                        }
00F6 03 F4        03 A1B P01 MD 0FD0  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 1  flag0 1                             
00FE 03 F4        03 A1F P01 MD 0FD0  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 1  flag0 1                             
                                         
0000             Thread Local RAM size                                   
                                            /* 缺齿后的第一个齿，说明当前周期为缺齿周期，需要验证缺齿 */
                                            else if (m1 == 1 && m2 == 1 && CRANK_FLAGS_TOOTH_AFTER_GAP)
                                            {
                                                DisableMatchesInThread();
                                                /* 修正齿计数 */
10EC BFEFFB8E   ram p23_0 = PRAM57.             if (toothCount == crankLastTooth1)
10F0 BFE80A95   alu a = p ,ccs;         
                    ram p23_0 = PRAM85.    
10F4 3819FFF4   alu nil = a - p ,ccs.            {
10F8 F0C0887F   if z==0 jump 110C,flush.         
                                        
10FC BFEFFB8E   ram p23_0 = PRAM57.                 toothCount = toothCount + crankNumMissing + 1;
1100 BFE80A82   alu a = p ,ccs;         
                    ram p23_0 = PRAM9.         
                                                }
1104 F7E0897F   jump 112C,noflush.                        else if (toothCount == crankLastTooth2)
1108 BD197A8E   alu p = a + p + 1 ,ccs;         
                    ram PRAM57 = p23_0.         
110C BFEFFB8E   ram p23_0 = PRAM57.             {
1110 BFE80A96   alu a = p ,ccs;         
                    ram p23_0 = PRAM89.         
1114 3819FFF4   alu nil = a - p ,ccs.         
1118 F0C0893F   if z==0 jump 1124,flush.         
                                        
111C                                                toothCount = 1;
                                                }
111C F7E0897F   jump 112C,noflush.                        else

ETPU "C" COMPILER 1.0.7.85                                              PAGE 117


1120 BDFF7B8E   alu p = 1 ;             
                    ram PRAM57 = p23_0.         
                                                {
1124 BFEFFB8E   ram p23_0 = PRAM57.                 toothCount++;
1128 BDF87A8E   alu p = p + 1 ,ccs;         
                    ram PRAM57 = p23_0.         
112C                                            }

                                                /* 在窗口内检测到了缺齿后的齿，说明正常，设置下一个齿需要的
                                                 * 窗口，还需考虑第一次缺齿后的情况，第一次缺齿后，需要根据凸轮同步状态
                                                 * 判断TCR2的计数值 */
                                                if (IsTransALatched())
                                                {
112C F200925F   if tdl1==0 jump 1248,    
                    flush.              
1130 CFEFF100   ram p31_24 = 0000.                  if (gEngPosSyncState == ENG_POS_PRE_FULL_SYNC)
1134 0802FBCA   alu nil = p31_24 ^                  {
                    #0x000002,ccs.         
1138 F0C08BDF   if z==0 jump 1178,flush.    
                                        
113C 9FEFFB02   ram p23_0 = 0009.                       if (gCamCount < 4)
1140 1C1F0F9E   alu a = #0x04.          
1144 3838FFF4   alu nil = p - a ,ccs.                    {
1148 F0808B29   if c==0 jump 1164,flush;                        tcr2 = crankTeethRev * CRANK_ANGLE_PER_TOOTH;
                    ram p23_0 = PRAM5.         
114C 00BF441D   alu diob = #0x012C.         
1150 3B1B9FE9   mdu diob multu p ,ccs.         
1154 F3488ABF   if mb==1 jump 1154,flush         
                    .                   
1158 BFC89A81   alu tcr2 = macl ,ccs;                        toothCount = crankTeethRev + 1;
                    ram p23_0 = PRAM5.         
                                                        }
115C F7E08B7F   jump 116C,noflush.                                else
1160 BDF87A8E   alu p = p + 1 ,ccs;         
                    ram PRAM57 = p23_0.         
                                                        {
                                                            tcr2 = 0;
1164 3FFF9FF2   alu tcr2 = 0 .          
1168                                                        toothCount = 1;
1168 BDFF7B8E   alu p = 1 ;             
                    ram PRAM57 = p23_0.         
116C                                                    }

116C 1C1FAF9E   alu p31_24 = #0x04.                     gEngPosSyncState = ENG_POS_FULL_SYNC;
1170 CFFFF100   ram 0000 = p31_24.         
                                                        SetChannelInterrupt();
                                                    }

                                                    /* 更新齿时间 */
1174 FFFF3CF9   chan cir.               
1178 BFEFFB90   ram p23_0 = PRAM65.                 lastToothTime = toothTime;
117C BFFFFB91   ram PRAM69 = p23_0.         
1180 BFFE7A90   alu p = erta ,ccs;                  toothTime = erta;
                    ram PRAM65 = p23_0.         


ETPU "C" COMPILER 1.0.7.85                                              PAGE 118


                                                    /* 此处设置超时标志可以限制缺齿后的齿，若缺齿后的第一个齿超时，则
                                                     * 直接重新开始新的同步 */
1184 3DFFAFF4   alu p31_24 = 1 .                    timeoutFlag = 1;
                                                    /* 准备AB测试，此时周期A是缺齿前的周期，周期B是缺齿周期 */
1188 CFFFF983   ram PRAM12 = p31_24.         
118C BFEFFB90   ram p23_0 = PRAM65.                 toothPeriodB = toothTime - lastToothTime;
1190 BFE80A91   alu a = p ,ccs;         
                    ram p23_0 = PRAM69.         
                                                    /* AB测试失败 */
1194 BC197A92   alu p = a - p ,ccs;     
                    ram PRAM73 = p23_0.    
1198 BFE80A89   alu a = p ,ccs;                     if (toothPeriodB * gapRatio <= toothPeriodA)
                    ram p23_0 = PRAM37.    
119C 3B190FE9   mdu a multu p ,ccs.     
11A0 F3488D1F   if mb==1 jump 11A0,flush    
                    .                   
11A4 BFC70A8F   alu a = mach ,ccs;                  {
                    ram p23_0 = PRAM61.         
11A8 3819FFF4   alu nil = a - p ,ccs.         
11AC F4C08F68   if gt jump 11EC,flush;                    CrankStall(camChannel, linkGroup1, linkGroup2,
                    ram p23_0 = PRAM1.         
11B0 9FE70A03   alu a = p23_16 ,ccs;         
                    ram p23_0 = 000D.         
11B4 9FF9BA03   alu p23_16 = a ,ccs;         
                    ram 000D = p23_0.         
11B8 CFEFF88A   ram p31_0 = PRAM40.         
11BC CFFFF004   ram 0010 = p31_0.         
11C0 CFEFF88B   ram p31_0 = PRAM44.         
11C4 CFFFF005   ram 0014 = p31_0.         
11C8 1C3A7B8E                                                      &timeoutFlag, &firstRun, &errorStatus, &crankState);
                    alu p = chan_base + #0x0C         
                    ,ccs.               
11CC 9FFFFB06   ram 0019 = p23_0.         
11D0 1C4A7B8E                           
                    alu p = chan_base + #0x10         
                    ,ccs.               
11D4 9FFFFB07   ram 001D = p23_0.         
11D8 9FDA7A08   alu p = chan_base ,ccs;         
                    ram 0021 = p23_0.         
11DC 1C0A7BEE                           
                    alu p = chan_base + #0x03         
                    ,ccs.               
11E0 FFE0613F   call 0C24,noflush.         
11E4 9FFFFB09   ram 0025 = p23_0.         
                                                    }
                                                    /* AB测试成功 */
11E8 F7C0943F   jump 1284,flush.                            else
                                                    {
                                                        /* 测试成功，继续计数 */
11EC BFEFFB80   ram p23_0 = PRAM1.                      crankState = CRANK_COUNTING;
11F0 1C2FDF9E   alu p7_0 = #0x08.         
11F4 CFF8FA80   ram PRAM1 = p23_0;                      SET_CRANK_FLAGS_COUNTING();
                    Clear flag0.         
                                            
                                                        /* 根据本次得到的缺齿周期计算窗口 */

ETPU "C" COMPILER 1.0.7.85                                              PAGE 119


11F8 CFEBFA82   ram p23_0 = PRAM9;                      toothPeriodBAvg = toothPeriodB / (crankNumMissing + 1);
                    Set flag1.          
11FC BDE84A92   alu diob = p + 1 ,ccs;         
                    ram p23_0 = PRAM73.         
1200 3BF80FF4   alu a = p ,ccs.         
1204 3B790FEE   mdu a div diob ,ccs.         
1208 F348905F   if mb==1 jump 1208,flush         
                    .                   
120C 3BF85F94   alu d = macl ,ccs.         
1210 BFE40A87   alu a = d ,ccs;                         halfWinWidth = toothPeriodBAvg * winRatioAFGap;
                    ram p23_0 = PRAM29.         
1214 3B190FE9   mdu a multu p ,ccs.         
1218 F34890DF   if mb==1 jump 1218,flush         
                    .                   
                                            
121C BFD77A93   alu p = mach ,ccs;         
                    ram PRAM77 = p23_0.         
1220                                                    ClearTransLatch();
                                                        ClearMatchALatch();
                                                        ClearMatchBLatch();
                                                        SetupMatch_A(toothTime + toothPeriodBAvg - halfWinWidth,
1220 DFE75A90   ram p23_0 = PRAM65;                                  Mtcr1_Ctcr1_ge, match_no_change);
                    chan clr_mrla,         
                    clr_mrlb,clr_tdl.         
1224 BF040A93   alu a = d + p ,ccs;         
                    ram p23_0 = PRAM77.         
1228 38192FF4   alu erta = a - p ,ccs.         
122C 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
                                                        SetupMatch_B(toothTime + toothPeriodBAvg + halfWinWidth,
1230 DF2FFA90   ram p23_0 = PRAM65;                                  Mtcr1_Ctcr2_ge, match_no_change);
                    chan mtd = enable_mtsr         
                    .                   
1234 BF040A93   alu a = d + p ,ccs;         
                    ram p23_0 = PRAM77.         
1238 3B193FF4   alu ertb = a + p ,ccs.         
123C 4F1F2F9F   chan opacb = no_change,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
1240 FF3FFCFB   chan mtd = enable_mtsr.         
1244                                                }
                                                }
                                                /* 窗口内未检测到缺齿后的齿，说明丢失缺齿，直接停车 */
1244 F7C0943F   jump 1284,flush.                        else
                                                {
1248 BFEFFB80   ram p23_0 = PRAM1.                  CrankStall(camChannel, linkGroup1, linkGroup2,
124C 9FE70A03   alu a = p23_16 ,ccs;         
                    ram p23_0 = 000D.         
1250 9FF9BA03   alu p23_16 = a ,ccs;         
                    ram 000D = p23_0.         
1254 CFEFF88A   ram p31_0 = PRAM40.         
1258 CFFFF004   ram 0010 = p31_0.         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 120


125C CFEFF88B   ram p31_0 = PRAM44.         
1260 CFFFF005   ram 0014 = p31_0.         
1264 1C3A7B8E                                                  &timeoutFlag, &firstRun, &errorStatus, &crankState);
                    alu p = chan_base + #0x0C         
                    ,ccs.               
1268 9FFFFB06   ram 0019 = p23_0.         
126C 1C4A7B8E                           
                    alu p = chan_base + #0x10         
                    ,ccs.               
1270 9FFFFB07   ram 001D = p23_0.         
1274 9FDA7A08   alu p = chan_base ,ccs;         
                    ram 0021 = p23_0.         
1278 1C0A7BEE                           
                    alu p = chan_base + #0x03         
                    ,ccs.               
127C FFE0613F   call 0C24,noflush.         
1280 9FFFFB09   ram 0025 = p23_0.         
                                                }
1284 6FFFFFFF   end.                        }
00F2 04 3B        03 A19 P01 MD 10EC  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 0  flag0 1                             
00FA 04 3B        03 A1D P01 MD 10EC  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 0  flag0 1                             
                                         
0000             Thread Local RAM size                                   
                                            /* 既不是正常模式、缺齿前的齿或缺齿后的齿，用于紧跟初始化，直到检测到首个
                                             * 缺齿的检测 */
                                            else if (m1 == 1 && m2 == 1 && CRANK_FLAGS_OTHER)
                                            {
                                                DisableMatchesInThread();
                                                /* 跳变出现在窗口内 */
                                                if (IsTransALatched())
1288 F200B41F   if tdl1==0 jump 1680,    
                    flush.              
128C BFEFFB90   ram p23_0 = PRAM65.             {
1290                                                lastToothTime = toothTime;
1290 BFFFFB91   ram PRAM69 = p23_0.         
1294 BFFE7A90   alu p = erta ,ccs;                  toothTime = erta;
                    ram PRAM65 = p23_0.         
                                                    ClearTransLatch();
1298 F7E0B21F   jump 1640,noflush.                            switch (crankState)
129C 7FEFFFFF   chan clr_tdl.           
                                                    {
                                                        /* 1 初始化后，检测到第一个跳变后，空一段时间，该时间内什么事都
                                                         * 不做，让信号稳定 */
                                                        case CRANK_BLANK_TIME:
12A0 3DFFAFF4   alu p31_24 = 1 .                            blankTimeout = 1;
                                                            ClearMatchALatch();
                                                            ClearMatchBLatch();
12A4 DFFF5981   ram PRAM4 = p31_24;         
                    chan clr_mrla,         
                    clr_mrlb.           
12A8 3BFC2FF4   alu erta = tcr1 ,ccs.                        SetupMatch_A(tcr1, Mtcr1_Ctcr1_ge, match_no_change);
12AC 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   

ETPU "C" COMPILER 1.0.7.85                                              PAGE 121


                                                            SetupMatch_B(toothTime + blankTime, Mtcr1_Ctcr2_ge,
12B0 DF2FFA90   ram p23_0 = PRAM65;                                      match_no_change);
                    chan mtd = enable_mtsr         
                    .                   
12B4 BFE80A83   alu a = p ,ccs;         
                    ram p23_0 = PRAM13.         
12B8 3B193FF4   alu ertb = a + p ,ccs.         
12BC 4F1F2F9F   chan opacb = no_change,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
12C0 FF3FFCFB   chan mtd = enable_mtsr.         
12C4 58E0FFFF   chan ipaca = no_detect,                        SetupCaptureTrans_A(Capture_tcr1, no_detect);
                    tbsa = mtcr1_ctcr1_ge         
                    ,clr_tdl.           
12C8 FF3FFCFB   chan mtd = enable_mtsr.         
12CC                                                        tcr2 = 0;
12CC F7E0B87F   jump 170C,noflush.                                    break;
12D0 3FFF9FF2   alu tcr2 = 0 .          
                                                        /* 2 空白时间过后，再检测一段空白的齿，检测到后什么都不做，此处的
                                                         * MatchA在else里开，且不设置MatchB，直到检测到指定的空齿数量的
                                                         * 齿 */
                                                        case CRANK_BLANK_TEETH:
12D4 BFEFFB8E   ram p23_0 = PRAM57.                         toothCount++;
12D8 BDF87A8E   alu p = p + 1 ,ccs;     
                    ram PRAM57 = p23_0.    
12DC BFE80A80   alu a = p ,ccs;                             if (toothCount >= blankTeeth)
                    ram p23_0 = PRAM1.    
12E0 3BF14FF4   alu diob = p15_8 ,ccs.    
12E4 3879FFF4   alu nil = a - diob ,ccs.                        {
                                        
12E8 F088981F   if c==1 jump 1300,flush.         
                                        
12EC CFFFFD01   ram PRAM4 = #0(8) .                             blankTimeout = 0;
                                                                toothCount = 1;
12F0 BDFF7B8E   alu p = 1 ;             
                    ram PRAM57 = p23_0.         
12F4 BFEFFB80   ram p23_0 = PRAM1.                              crankState = CRANK_FIRST_EDGE;
12F8 1C0FDFFE   alu p7_0 = #0x03.         
                                                            }
12FC BFFFFB80   ram PRAM1 = p23_0.         
1300                                                        tcr2 = 0;

                                                            ClearMatchALatch();
                                                            ClearMatchBLatch();
1300 7FFF9EBF   alu tcr2 = 0 ;          
                    chan clr_mrla,         
                    clr_mrlb.           
1304 3BFC2FF4   alu erta = tcr1 ,ccs.                        SetupMatch_A(tcr1, Mtcr1_Ctcr1_ge, match_no_change);
1308 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
130C FF3FFCFB   chan mtd = enable_mtsr.         
1310 5AE0FFFF   chan ipaca = high_low,                        SetupCaptureTrans_A(Capture_tcr1, high_low);

ETPU "C" COMPILER 1.0.7.85                                              PAGE 122


                    tbsa = mtcr1_ctcr1_ge         
                    ,clr_tdl.           
1314 F7E0B87F   jump 170C,noflush.                                    break;
1318 FF3FFCFB   chan mtd = enable_mtsr.         
                                                        /* 3 第一个沿，检测到后开始设置超时 */
                                                        case CRANK_FIRST_EDGE:
131C BFEFFB80   ram p23_0 = PRAM1.                          crankState = CRANK_SECOND_EDGE;
1320 1C1FDF9E   alu p7_0 = #0x04.         
                                                            tcr2 = 0;

1324 BFFF9B80   alu tcr2 = 0 ;          
                    ram PRAM1 = p23_0.         
1328                                                        ClearMatchALatch();
                                                            ClearMatchBLatch();
1328 7FFC2EBB   alu erta = tcr1 ,ccs;                        SetupMatch_A(tcr1, Mtcr1_Ctcr1_ge, match_no_change);
                    chan clr_mrla,         
                    clr_mrlb.           
132C 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
                                                            /* 设置MatchB，以配置超时 */
                                                            SetupMatch_B(toothTime + firstTimeout,
1330 DF2FFA90   ram p23_0 = PRAM65;                                      Mtcr1_Ctcr2_ge, match_no_change);
                    chan mtd = enable_mtsr         
                    .                   
1334 BFE80A84   alu a = p ,ccs;         
                    ram p23_0 = PRAM17.         
1338 3B193FF4   alu ertb = a + p ,ccs.         
133C 4F1F2F9F   chan opacb = no_change,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
1340 FF3FFCFB   chan mtd = enable_mtsr.         
1344 5AE0FFFF   chan ipaca = high_low,                        SetupCaptureTrans_A(Capture_tcr1, high_low);
                    tbsa = mtcr1_ctcr1_ge         
                    ,clr_tdl.           
1348 F7E0B87F   jump 170C,noflush.                                    break;
134C FF3FFCFB   chan mtd = enable_mtsr.         
                                                        /* 4 第二个沿，表示已经有一个完整周期，应准备开始检测缺齿 */
                                                        case CRANK_SECOND_EDGE:
                                                            /* 计算周期 */
1350 BFEFFB90   ram p23_0 = PRAM65.                         toothPeriodA = toothTime - lastToothTime;
1354 BFE80A91   alu a = p ,ccs;         
                    ram p23_0 = PRAM69.         
                                                            /* 设置状态机为检测缺齿 */
1358 BC197A8F   alu p = a - p ,ccs;         
                    ram PRAM61 = p23_0.         
135C BFEFFB80   ram p23_0 = PRAM1.                          crankState = CRANK_TEST_POSSIBLE_GAP;
1360 1C1FDFBE   alu p7_0 = #0x05.         
                                                            tcr2 = 0;

                                                            /* 计算窗口宽度 */
1364 BFFF9B80   alu tcr2 = 0 ;          
                    ram PRAM1 = p23_0.         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 123


1368 BFEFFB8F   ram p23_0 = PRAM61.                         halfWinWidth = toothPeriodA * winRatioACGap;
136C BFE80A86   alu a = p ,ccs;         
                    ram p23_0 = PRAM25.         
1370 3B190FE9   mdu a multu p ,ccs.         
1374 F3489BBF   if mb==1 jump 1374,flush         
                    .                   
1378 BFD77A93   alu p = mach ,ccs;         
                    ram PRAM77 = p23_0.         
137C                                                        ClearMatchALatch();
                                                            ClearMatchBLatch();
137C 7FFC2EBB   alu erta = tcr1 ,ccs;                        SetupMatch_A(tcr1, Mtcr1_Ctcr1_ge, match_no_change);
                    chan clr_mrla,         
                    clr_mrlb.           
1380 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
                                                            /* 结束窗口要给缺齿留出足够的时间 */
                                                            SetupMatch_B(toothTime + toothPeriodA * (crankNumMissing + 1) + halfWinWidth,
1384 DF2FFA82   ram p23_0 = PRAM9;                                       Mtcr1_Ctcr2_ge, match_no_change);
                    chan mtd = enable_mtsr         
                    .                   
1388 BDE80A8F   alu a = p + 1 ,ccs;         
                    ram p23_0 = PRAM61.         
138C 3B190FE9   mdu a multu p ,ccs.         
1390 F3489C9F   if mb==1 jump 1390,flush         
                    .                   
1394 BFC80A90   alu a = macl ,ccs;         
                    ram p23_0 = PRAM65.         
1398 BF090A93   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM77.         
139C 3B193FF4   alu ertb = a + p ,ccs.         
13A0 4F1F2F9F   chan opacb = no_change,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
13A4 FF3FFCFB   chan mtd = enable_mtsr.         
13A8 5AE0FFFF   chan ipaca = high_low,                        SetupCaptureTrans_A(Capture_tcr1, high_low);
                    tbsa = mtcr1_ctcr1_ge         
                    ,clr_tdl.           
13AC F7E0B87F   jump 170C,noflush.                                    break;
13B0 FF3FFCFB   chan mtd = enable_mtsr.         
                                                        /* 5 检测第一个缺齿，执行ABa测试，直到测试成功 */
                                                        case CRANK_TEST_POSSIBLE_GAP:
13B4 BFEFFB90   ram p23_0 = PRAM65.                         toothPeriodB = toothTime - lastToothTime;
13B8 BFE80A91   alu a = p ,ccs;         
                    ram p23_0 = PRAM69.         
                                                            /* 通过AB测试，可能是缺齿，下次执行缺齿验证 */
13BC BC197A92   alu p = a - p ,ccs;     
                    ram PRAM73 = p23_0.    
13C0 BFE80A89   alu a = p ,ccs;                             if (toothPeriodB * gapRatio > toothPeriodA)
                    ram p23_0 = PRAM37.    
13C4 3B190FE9   mdu a multu p ,ccs.     
13C8 F3489E5F   if mb==1 jump 13C8,flush    
                    .                   

ETPU "C" COMPILER 1.0.7.85                                              PAGE 124


13CC BFC70A8F   alu a = mach ,ccs;                          {
                    ram p23_0 = PRAM61.         
13D0 3819FFF4   alu nil = a - p ,ccs.         
13D4 F4C8A1A8   if ls jump 1434,flush;                            crankState = CRANK_VERIFY_GAP;
                    ram p23_0 = PRAM1.         
13D8 1C1FDFDE   alu p7_0 = #0x06.         
13DC BFFFFB80   ram PRAM1 = p23_0.         
13E0 BFEFFB82   ram p23_0 = PRAM9.                              toothPeriodBAvg = toothPeriodB / (crankNumMissing + 1);
13E4 BDE84A92   alu diob = p + 1 ,ccs;         
                    ram p23_0 = PRAM73.         
13E8 3BF80FF4   alu a = p ,ccs.         
13EC 3B790FEE   mdu a div diob ,ccs.         
13F0 F3489F9F   if mb==1 jump 13F0,flush         
                    .                   
13F4 3BF85F94   alu d = macl ,ccs.         
13F8 BFE40A87   alu a = d ,ccs;                                 halfWinWidth = toothPeriodBAvg * winRatioAFGap;
                    ram p23_0 = PRAM29.         
13FC 3B190FE9   mdu a multu p ,ccs.         
1400 F348A01F   if mb==1 jump 1400,flush         
                    .                   
1404 BFD77A93   alu p = mach ,ccs;         
                    ram PRAM77 = p23_0.         
1408                                                            tcr2 = 0;

                                                                ClearMatchALatch();
                                                                ClearMatchBLatch();
                                                                SetupMatch_A(toothTime + toothPeriodBAvg - halfWinWidth,
1408 7FFF9EBF   alu tcr2 = 0 ;          
                    chan clr_mrla,         
                    clr_mrlb.           
140C BFEFFB90   ram p23_0 = PRAM65.                                          Mtcr1_Ctcr1_ge, match_no_change);
1410 BF040A93   alu a = d + p ,ccs;         
                    ram p23_0 = PRAM77.         
1414 38192FF4   alu erta = a - p ,ccs.         
1418 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
                                                                SetupMatch_B(toothTime + toothPeriodBAvg + halfWinWidth,
141C DF2FFA90   ram p23_0 = PRAM65;                                          Mtcr1_Ctcr2_ge, match_no_change);
                    chan mtd = enable_mtsr         
                    .                   
1420 BF040A93   alu a = d + p ,ccs;         
                    ram p23_0 = PRAM77.         
1424 3B193FF4   alu ertb = a + p ,ccs.         
1428 4F1F2F9F   chan opacb = no_change,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
                                                            }
142C F7E0B87F   jump 170C,noflush.                                    else
1430 FF3FFCFB   chan mtd = enable_mtsr.         
                                                            {
                                                                /* 不是缺齿，继续检测 */
1434 BFEFFB92   ram p23_0 = PRAM73.                             toothPeriodA = toothPeriodB;

ETPU "C" COMPILER 1.0.7.85                                              PAGE 125


1438 BFFFFB8F   ram PRAM61 = p23_0.         
143C BFEFFB92   ram p23_0 = PRAM73.                             halfWinWidth = toothPeriodB * winRatioACGap;
1440 BFE80A86   alu a = p ,ccs;         
                    ram p23_0 = PRAM25.         
1444 3B190FE9   mdu a multu p ,ccs.         
1448 F348A25F   if mb==1 jump 1448,flush         
                    .                   
144C BFD77A93   alu p = mach ,ccs;         
                    ram PRAM77 = p23_0.         
1450                                                            tcr2 = 0;
                                                                ClearMatchALatch();
                                                                ClearMatchBLatch();
                                                                SetupMatch_A(toothTime + toothPeriodB - halfWinWidth,
1450 7FFF9EBF   alu tcr2 = 0 ;          
                    chan clr_mrla,         
                    clr_mrlb.           
1454 BFEFFB90   ram p23_0 = PRAM65.                                          Mtcr1_Ctcr1_ge, match_no_change);
1458 BFE80A92   alu a = p ,ccs;         
                    ram p23_0 = PRAM73.         
145C BF090A93   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM77.         
1460 38192FF4   alu erta = a - p ,ccs.         
1464 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
                                                                /* 结束窗口要给缺齿留出足够的时间 */
                                                                SetupMatch_B(toothTime + toothPeriodB * (crankNumMissing + 1) + halfWinWidth,
1468 DF2FFA82   ram p23_0 = PRAM9;                                           Mtcr1_Ctcr2_ge, match_no_change);
                    chan mtd = enable_mtsr         
                    .                   
146C BDE80A92   alu a = p + 1 ,ccs;         
                    ram p23_0 = PRAM73.         
1470 3B190FE9   mdu a multu p ,ccs.         
1474 F348A3BF   if mb==1 jump 1474,flush         
                    .                   
1478 BFC80A90   alu a = macl ,ccs;         
                    ram p23_0 = PRAM65.         
147C BF090A93   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM77.         
1480 3B193FF4   alu ertb = a + p ,ccs.         
1484 4F1F2F9F   chan opacb = no_change,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
1488 FF3FFCFB   chan mtd = enable_mtsr.         
148C                                                        }
148C F7C0B87F   jump 170C,flush.                                    break;
                                                        /* 缺齿验证，执行Ba测试，此处为缺齿后的第二个齿，即缺齿周期后的
                                                         * 第一个周期 */
                                                        case CRANK_VERIFY_GAP:
1490 BFEFFB90   ram p23_0 = PRAM65.                         toothPeriodA = toothTime - lastToothTime;
1494 BFE80A91   alu a = p ,ccs;         
                    ram p23_0 = PRAM69.         
                                                            /* 满足Ba验证，缺齿已验证 */

ETPU "C" COMPILER 1.0.7.85                                              PAGE 126


1498 BC197A8F   alu p = a - p ,ccs;     
                    ram PRAM61 = p23_0.    
149C BFEFFB92   ram p23_0 = PRAM73.                         if (toothPeriodB * gapRatio > toothPeriodA)
14A0 BFE80A89   alu a = p ,ccs;                             {
                    ram p23_0 = PRAM37.         
14A4 3B190FE9   mdu a multu p ,ccs.         
14A8 F348A55F   if mb==1 jump 14A8,flush         
                    .                   
14AC BFC70A8F   alu a = mach ,ccs;         
                    ram p23_0 = PRAM61.         
14B0 3819FFF4   alu nil = a - p ,ccs.         
14B4 F4C8AA28   if ls jump 1544,flush;                            crankState = CRANK_GAP_VERIFIED;
                    ram p23_0 = PRAM1.         
14B8 1C1FDFFE   alu p7_0 = #0x07.         
14BC BFFFFB80   ram PRAM1 = p23_0.         
14C0 1C0F7FDE   alu p = #0x02.                                  toothCount = 2;

14C4 BFFFFB8E   ram PRAM57 = p23_0.         
14C8 1C0FFF00   alu p = #0xFFFC00.                              tprReg.TICKS = CRANK_ANGLE_PER_TOOTH - 1;
14CC 3B120FB2   alu a = tpr & p ,ccs.         
14D0 00AF747D   alu p = #0x012B.         
14D4 3B192FD0   alu tpr = a | p ,ccs.         
14D8 BFEFFB8F   ram p23_0 = PRAM61.                             trr = ((toothPeriodA << 3) / (CRANK_ANGLE_PER_TOOTH)) << 6;
14DC 3B180FF5   alu a = p + p <<1,ccs.         
14E0 3BF90FF5   alu a = a <<1,ccs.         
14E4 00BF741D   alu p = #0x012C.         
14E8 3B190FEE   mdu a div p ,ccs.         
14EC F348A77F   if mb==1 jump 14EC,flush         
                    .                   
14F0 3BF80FB4   alu a = macl ,ccs.         
14F4 18090BAA   alu a = a <<4,ccs.         
                                                                /* 已经有一个齿了，这是缺齿后的第二个齿，所以TCR2需要
                                                                 * 略过第一个齿的计数 */
14F8 3B39EFF5   alu trr = a + a <<1,ccs.         
                                        
14FC                                                            tcr2 = CRANK_ANGLE_PER_TOOTH;

14FC 00BF941D   alu tcr2 = #0x012C.         
1500 BFEFFB8F   ram p23_0 = PRAM61.                             halfWinWidth = toothPeriodA * winRatioNormal;
1504 BFE80A85   alu a = p ,ccs;         
                    ram p23_0 = PRAM21.         
1508 3B190FE9   mdu a multu p ,ccs.         
150C F348A87F   if mb==1 jump 150C,flush         
                    .                   
1510 BFD77A93   alu p = mach ,ccs;         
                    ram PRAM77 = p23_0.         
1514                                                            ClearMatchALatch();
                                                                ClearMatchBLatch();
                                                                SetupMatch_A(toothTime + toothPeriodA - halfWinWidth,
1514 DFEF5A90   ram p23_0 = PRAM65;                                          Mtcr1_Ctcr1_ge, match_no_change);
                    chan clr_mrla,         
                    clr_mrlb.           
1518 BFE80A8F   alu a = p ,ccs;         
                    ram p23_0 = PRAM61.         
151C BF090A93   alu a = a + p ,ccs;         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 127


                    ram p23_0 = PRAM77.         
1520 38192FF4   alu erta = a - p ,ccs.         
1524 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
                                                                SetupMatch_B(toothTime + toothPeriodA + halfWinWidth,
1528 DF2FFA90   ram p23_0 = PRAM65;                                          Mtcr1_Ctcr2_ge, match_no_change);
                    chan mtd = enable_mtsr         
                    .                   
152C BFE80A8F   alu a = p ,ccs;         
                    ram p23_0 = PRAM61.         
1530 BF090A93   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM77.         
1534 3B193FF4   alu ertb = a + p ,ccs.         
1538 4F1F2F9F   chan opacb = no_change,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
                                                            }
                                                            /* Ba测试失败，重新退回寻找缺齿 */
153C F7E0B87F   jump 170C,noflush.                                    else
1540 FF3FFCFB   chan mtd = enable_mtsr.         
                                                            {
1544 BFEFFB80   ram p23_0 = PRAM1.                              crankState = CRANK_TEST_POSSIBLE_GAP;
1548 1C1FDFBE   alu p7_0 = #0x05.         
                                                                /* 计算窗口宽度 */
154C BFFFFB80   ram PRAM1 = p23_0.         
1550 BFEFFB8F   ram p23_0 = PRAM61.                             halfWinWidth = toothPeriodA * winRatioACGap;
1554 BFE80A86   alu a = p ,ccs;         
                    ram p23_0 = PRAM25.         
1558 3B190FE9   mdu a multu p ,ccs.         
155C F348AAFF   if mb==1 jump 155C,flush         
                    .                   
1560 BFD77A93   alu p = mach ,ccs;         
                    ram PRAM77 = p23_0.         
1564                                                            ClearMatchALatch();
                                                                ClearMatchBLatch();
                                                                SetupMatch_A(toothTime + toothPeriodA - halfWinWidth,
1564 DFEF5A90   ram p23_0 = PRAM65;                                          Mtcr1_Ctcr1_ge, match_no_change);
                    chan clr_mrla,         
                    clr_mrlb.           
1568 BFE80A8F   alu a = p ,ccs;         
                    ram p23_0 = PRAM61.         
156C BF090A93   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM77.         
1570 38192FF4   alu erta = a - p ,ccs.         
1574 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
                                                                /* 结束窗口要给缺齿留出足够的时间 */
                                                                SetupMatch_B(toothTime + toothPeriodA * (crankNumMissing + 1) + halfWinWidth,
1578 DF2FFA82   ram p23_0 = PRAM9;                                           Mtcr1_Ctcr2_ge, match_no_change);
                    chan mtd = enable_mtsr         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 128


                    .                   
157C BDE80A8F   alu a = p + 1 ,ccs;         
                    ram p23_0 = PRAM61.         
1580 3B190FE9   mdu a multu p ,ccs.         
1584 F348AC3F   if mb==1 jump 1584,flush         
                    .                   
1588 BFC80A90   alu a = macl ,ccs;         
                    ram p23_0 = PRAM65.         
158C BF090A93   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM77.         
1590 3B193FF4   alu ertb = a + p ,ccs.         
1594 4F1F2F9F   chan opacb = no_change,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
1598 FF3FFCFB   chan mtd = enable_mtsr.         
159C                                                        }
159C F7C0B87F   jump 170C,flush.                                    break;
                                                        /* 缺齿已通过ABa验证，下次转入正常线程执行 */
                                                        case CRANK_GAP_VERIFIED:
15A0 BFEFFB8E   ram p23_0 = PRAM57.                         toothCount++;
15A4 BDF87A8E   alu p = p + 1 ,ccs;         
                    ram PRAM57 = p23_0.         
15A8 BFEFFB80   ram p23_0 = PRAM1.                          crankState = CRANK_COUNTING;
15AC 1C2FDF9E   alu p7_0 = #0x08.         
15B0 CFF8FA80   ram PRAM1 = p23_0;                          SET_CRANK_FLAGS_COUNTING();
                    Clear flag0.         

15B4 CFEBFA90   ram p23_0 = PRAM65;                         toothPeriodA = toothTime - lastToothTime;
                    Set flag1.          
15B8 BFE80A91   alu a = p ,ccs;         
                    ram p23_0 = PRAM69.         
15BC BC197A8F   alu p = a - p ,ccs;         
                    ram PRAM61 = p23_0.         
15C0 3B180FF5   alu a = p + p <<1,ccs.                        trr = ((toothPeriodA << 3) / (CRANK_ANGLE_PER_TOOTH)) << 6;
15C4 3BF90FF5   alu a = a <<1,ccs.         
15C8 00BF741D   alu p = #0x012C.         
15CC 3B190FEE   mdu a div p ,ccs.         
15D0 F348AE9F   if mb==1 jump 15D0,flush         
                    .                   
15D4 3BF80FB4   alu a = macl ,ccs.         
15D8 18090BAA   alu a = a <<4,ccs.         
                                                            /* 第一个缺齿已验证，引擎同步状态为半同步 */
15DC 3B39EFF5   alu trr = a + a <<1,ccs.         
                                        
15E0 3DFFAFF4   alu p31_24 = 1 .                            gEngPosSyncState = ENG_POS_FIRST_HALF_SYNC;
15E4 CFFFF100   ram 0000 = p31_24.         
                                                            SetChannelInterrupt();

15E8 CFEF3A8F   ram p23_0 = PRAM61;                         halfWinWidth = toothPeriodA * winRatioNormal;
                    chan cir.           
15EC BFE80A85   alu a = p ,ccs;         
                    ram p23_0 = PRAM21.         
15F0 3B190FE9   mdu a multu p ,ccs.         
15F4 F348AFBF   if mb==1 jump 15F4,flush         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 129


                    .                   
15F8 BFD77A93   alu p = mach ,ccs;         
                    ram PRAM77 = p23_0.         
15FC                                                        ClearMatchALatch();
                                                            ClearMatchBLatch();
                                                            SetupMatch_A(toothTime + toothPeriodA - halfWinWidth,
15FC DFEF5A90   ram p23_0 = PRAM65;                                      Mtcr1_Ctcr1_ge, match_no_change);
                    chan clr_mrla,         
                    clr_mrlb.           
1600 BFE80A8F   alu a = p ,ccs;         
                    ram p23_0 = PRAM61.         
1604 BF090A93   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM77.         
1608 38192FF4   alu erta = a - p ,ccs.         
160C 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
                                                            SetupMatch_B(toothTime + toothPeriodA + halfWinWidth,
1610 DF2FFA90   ram p23_0 = PRAM65;                                      Mtcr1_Ctcr2_ge, match_no_change);
                    chan mtd = enable_mtsr         
                    .                   
1614 BFE80A8F   alu a = p ,ccs;         
                    ram p23_0 = PRAM61.         
1618 BF090A93   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM77.         
161C 3B193FF4   alu ertb = a + p ,ccs.         
1620 4F1F2F9F   chan opacb = no_change,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
1624 F7E0B87F   jump 170C,noflush.                                    break;
1628 FF3FFCFB   chan mtd = enable_mtsr.         
                                                        default:
162C CFEFF880   ram p31_0 = PRAM0.                          errorStatus = errorStatus | CRANK_INTERNAL_ERROR;
1630 0842AB82   alu p31_24 = p31_24 |          
                    #0x000010,ccs.         
1634 F7E0B87F   jump 170C,noflush.                                    break;
1638 CFFFF980   ram PRAM0 = p31_24.         
163C F7C0B87F   jump 170C,flush.                            } /*switch (crankState)*/
1640 BFEFFB80   ram p23_0 = PRAM1.         
1644 3BF07FF4   alu p = p7_0 ,ccs.         
1648 1C2F0F9E   alu a = #0x08.          
164C 3838FFF4   alu nil = p - a ,ccs.         
1650 F060B17F   if n==0 jump 162C,         
                    noflush.            
1654 32F8AFF4   alu p31_24 = p -1 ,ccs8.         
                                        
1658 F048B17F   if n==1 jump 162C,flush.         
                                        
165C FFDFDCF9   jump PC+p31_24,flush.         
1660 F7C0951F   jump 12A0,flush.         
1664 F7C096BF   jump 12D4,flush.         
1668 F7C098FF   jump 131C,flush.         
166C F7C09A9F   jump 1350,flush.         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 130


1670 F7C09DBF   jump 13B4,flush.         
1674 F7C0A49F   jump 1490,flush.         
1678 F7C0AD1F   jump 15A0,flush.         
                                                }
                                                /* matchB到来，关闭窗口超时，如果是blankTime造成的，则重开窗口给
                                                 * blackTeeth用，否则重新从首次沿开始检测 */
167C F7C0B87F   jump 170C,flush.                        else
                                                {
                                                    /* 超时由于空白时间造成 */
1680 CFEFF881   ram p31_0 = PRAM4.                  if (blankTimeout == 1)
1684 0802FBAA   alu nil = p31_24 ^                  {
                    #0x000001,ccs.         
1688 F0C0B69F   if z==0 jump 16D0,flush.         
                                        
168C CFFFFD01   ram PRAM4 = #0(8) .                     blankTimeout = 0;
1690 BFEFFB80   ram p23_0 = PRAM1.                      crankState = CRANK_BLANK_TEETH;
1694 1C0FDFDE   alu p7_0 = #0x02.         
1698 BFFFFB80   ram PRAM1 = p23_0.      
169C BFEFFB8E   ram p23_0 = PRAM57.                     if (toothCount >= blankTeeth)
16A0 BFE80A80   alu a = p ,ccs;         
                    ram p23_0 = PRAM1.    
16A4 3BF14FF4   alu diob = p15_8 ,ccs.    
16A8 3879FFF4   alu nil = a - diob ,ccs.                    {
                                        
16AC F088B5C8   if c==1 jump 16B8,flush;                        crankState = CRANK_FIRST_EDGE;
                    ram p23_0 = PRAM1.         
16B0 1C0FDFFE   alu p7_0 = #0x03.         
                                                        }
16B4 BFFFFB80   ram PRAM1 = p23_0.         
16B8                                                    ClearMatchALatch();
                                                        ClearMatchBLatch();
                                                        /* 设置捕获，开始找齿 */
16B8 5AE0FEBF   chan ipaca = high_low,                    SetupCaptureTrans_A(Capture_tcr1, high_low);
                    tbsa = mtcr1_ctcr1_ge         
                    ,clr_mrla,clr_mrlb,         
                    clr_tdl.            
                                                        /* 设置匹配，直接开窗口，不关闭 */
16BC FF3FFCFB   chan mtd = enable_mtsr.         
16C0 3BFC2FF4   alu erta = tcr1 ,ccs.                    SetupMatch_A(tcr1, Mtcr1_Ctcr1_ge, match_no_change);
16C4 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
                                                    }
                                                    /* 超时由于其他原因造成，说明确实超时，重置状态机 */
16C8 F7E0B87F   jump 170C,noflush.                            else
16CC FF3FFCFB   chan mtd = enable_mtsr.         
                                                    {
16D0 BFEFFB80   ram p23_0 = PRAM1.                      crankState = CRANK_FIRST_EDGE;
16D4 1C0FDFFE   alu p7_0 = #0x03.         
16D8 BFFFFB80   ram PRAM1 = p23_0.         
16DC CFEFF880   ram p31_0 = PRAM0.                      errorStatus = errorStatus | CRANK_TIMEOUT;
16E0 0812AB82   alu p31_24 = p31_24 |          
                    #0x000004,ccs.         


ETPU "C" COMPILER 1.0.7.85                                              PAGE 131


16E4 CFF8F980   ram PRAM0 = p31_24;                     SET_CRANK_FLAGS_OTHER();
                    Clear flag0.         
                                                        ClearMatchALatch();
                                                        ClearMatchBLatch();
16E8 FFFA5CFB   chan clr_mrla,clr_mrlb;         
                    Clear flag1.         
16EC 5AE0FFFF   chan ipaca = high_low,                    SetupCaptureTrans_A(Capture_tcr1, high_low);
                    tbsa = mtcr1_ctcr1_ge         
                    ,clr_tdl.           
16F0 FF3FFCFB   chan mtd = enable_mtsr.         
16F4 3BFC2FF4   alu erta = tcr1 ,ccs.                    SetupMatch_A(tcr1, Mtcr1_Ctcr1_ge, match_no_change);
16F8 48F0FE7F   chan opaca = no_change,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
                                                        /* 设置MatchB，以配置超时 */
                                                        SetupMatch_B(tcr1 + firstTimeout,
16FC DF2FFA84   ram p23_0 = PRAM17;                                  Mtcr1_Ctcr2_ge, match_no_change);
                    chan mtd = enable_mtsr         
                    .                   
1700 3B1C3FF4   alu ertb = tcr1 + p ,ccs         
                    .                   
1704 4F1F2F9F   chan opacb = no_change,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
1708 FF3FFCFB   chan mtd = enable_mtsr.         
170C                                                } /*if (blankTimeout == 1)*/
                                                } /*if (IsTransALatched())*/
170C 6FFFFFFF   end.                        }
00F0 04 A2        03 A18 P01 MD 1288  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 0  flag0 0                             
00F8 04 A2        03 A1C P01 MD 1288  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 0  flag0 0                             
                                         
0000             Thread Local RAM size                                   
                                            /* 有链接请求，表示已检测到凸轮信号，需更新引擎同步状态 */
                                            else if (lsr == 1 && m1 == 0 && m2 == 0)
                                            {
                                                ClearLSRLatch();
1710 FFE06A9F   call 0D50,noflush.              CrankLsrProcess();
1714 4FFFF7FF   chan clr_lsr.           
1718 6FFFFFFF   end.                        }
00CC 45 C4        03 A06 P01 ME 1710  HSR 0     lsr 1  m1 0  m2 0  pin 0  flag1 x  flag0 x                             
00CE 45 C4        03 A07 P01 ME 1710  HSR 0     lsr 1  m1 0  m2 0  pin 1  flag1 x  flag0 x                             
                                         
0000             Thread Local RAM size                                   
                                            /* m2_o_st时，matchA不可能产生服务请求，且lsr的情况已处理，所以能进一定是
                                             * transB，说明进入错误状态 */
                                            else if (m1 == 1 && m2 == 0)
                                            {
                                                /* 如果线程由LSR进入，则正常处理链接请求 */
                                                if (lsr == 1)
171C F300B97F   if lsr==0 jump 172C,    
                    flush.              
1720                                            {
1720 FFE06A9F   call 0D50,noflush.                  ClearLSRLatch();

ETPU "C" COMPILER 1.0.7.85                                              PAGE 132


1724 4FFFF7FF   chan clr_lsr.           
1728                                                CrankLsrProcess();
                                                }
1728 F7C0B9DF   jump 1738,flush.                        else
                                                {
                                                    ClearMatchALatch();
                                                    ClearTransLatch();
172C DFE77880   ram p31_0 = PRAM0;                  errorStatus = errorStatus | CRANK_INVALID_M1;
                    chan clr_mrla,         
                    clr_tdl.            
1730 0802ABA2   alu p31_24 = p31_24 |          
                    #0x000001,ccs.         
                                                    SetGlobalException();
1734 CFFFB980   ram PRAM0 = p31_24;         
                    chan excpr.         
1738                                            }
1738 6FFFFFFF   end.                        }
00D0 45 C7        03 A08 P01 ME 171C  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 0  flag0 0                             
00D2 45 C7        03 A09 P01 ME 171C  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 0  flag0 1                             
00D4 45 C7        03 A0A P01 ME 171C  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 1  flag0 0                             
00D6 45 C7        03 A0B P01 ME 171C  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 1  flag0 1                             
00D8 45 C7        03 A0C P01 ME 171C  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 0  flag0 0                             
00DA 45 C7        03 A0D P01 ME 171C  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 0  flag0 1                             
00DC 45 C7        03 A0E P01 ME 171C  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 1  flag0 0                             
00DE 45 C7        03 A0F P01 ME 171C  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 1  flag0 1                             
                                         
0000             Thread Local RAM size                                   
                                            /* 该线程可能由初始化时sm_st模式进入，此时需要判断首次运行标志，若确实为首次
                                             * 运行，则修改通道模式为m2_o_st，同时开始正式检测。当模式为m2_o_st时，说明
                                             * 进入错误状态 */
                                            else if (m1 == 0 && m2 == 1)
                                            {
173C CFEFF884   ram p31_0 = PRAM16.             if (firstRun == 1)
1740 0802FBAA   alu nil = p31_24 ^              {
                    #0x000001,ccs.         
1744 F0C0BB5F   if z==0 jump 1768,flush.         
                                        
1748                                                ClearTransLatch();

                                                    /* 设置通道模式，MatchBOrderedSingleTransition，产生服务请求的只有TDLA
                                                     * 和MRLB，但TDLA会被MRLA阻塞，且MRLB必须在MRLA发生后才使能，此时MRLA
                                                     * 用于开窗口，打开后才会检测信号跳变以触发TDLA，此后若发生MRLB，则认为
                                                     * 超时 */
                                                    SetChannelMode(m2_o_st);

1748 4FEFFFF1   chan m2_o_st,clr_tdl.         
174C CFFFFD04   ram PRAM16 = #0(8) .                firstRun = 0;

1750 5AE0FFFF   chan ipaca = high_low,                SetupCaptureTrans_A(Capture_tcr1, high_low);
                    tbsa = mtcr1_ctcr1_ge         
                    ,clr_tdl.           
1754 FF3FFCFB   chan mtd = enable_mtsr.         
1758 39FC2FF4   alu erta = tcr1 + 1 ,ccs                SetupMatch_A(tcr1 + 1, Mtcr1_Ctcr1_ge, match_no_change);
                    .                   
175C 48F0FE7F   chan opaca = no_change,         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 133


                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
                                                }
1760 F7E0BBBF   jump 1774,noflush.                        else
1764 FF3FFCFB   chan mtd = enable_mtsr.         
                                                {
                                                    ClearTransLatch();
                                                    ClearMatchBLatch();
1768 DFE7D880   ram p31_0 = PRAM0;                  errorStatus = errorStatus | CRANK_INVALID_M2;
                    chan clr_mrlb,         
                    clr_tdl.            
176C 0802ABC2   alu p31_24 = p31_24 |          
                    #0x000002,ccs.         
                                                    SetGlobalException();
1770 CFFFB980   ram PRAM0 = p31_24;         
                    chan excpr.         
1774                                            }
1774 6FFFFFFF   end.                        }
00E0 45 CF        03 A10 P01 ME 173C  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 0  flag0 0                             
00E2 45 CF        03 A11 P01 ME 173C  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 0  flag0 1                             
00E4 45 CF        03 A12 P01 ME 173C  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 1  flag0 0                             
00E6 45 CF        03 A13 P01 ME 173C  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 1  flag0 1                             
00E8 45 CF        03 A14 P01 ME 173C  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 0  flag0 0                             
00EA 45 CF        03 A15 P01 ME 173C  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 0  flag0 1                             
00EC 45 CF        03 A16 P01 ME 173C  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 1  flag0 0                             
00EE 45 CF        03 A17 P01 ME 173C  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 1  flag0 1                             
                                         
0000             Thread Local RAM size                                   
                                            /* 其他任何线程 */
                                            else
                                            {
                                        #ifdef GLOBAL_ERROR_FUNC
1778 FFC116BF   call 22D4,flush.                        Global_Error_Func();
                                        #else
                                                ClearAllLatches();
                                        #endif
177C 6FFFFFFF   end.                        }
1780                                     
0000             Thread Local RAM size                                   
0000             Local RAM requirements for eTPU Function CrankDetect                                   
                                        }

                                        /* Information exported to Host CPU program */
1780                                    #pragma write h, (::ETPUfilename (etpu_crank_auto.h));
1780                                    #pragma write h, (/*******************************************************************************);
1780                                    #pragma write h, ( * 版权 2015-2016 中国航空工业集团第六三一所第十八研究室                        );
1780                                    #pragma write h, ( *                                                                              );
1780                                    #pragma write h, ( * 对本文件的拷贝、发布、修改或者其他任何用途必须得到中国航空工业集团第六三一所 );
1780                                    #pragma write h, ( * 的书面协议许可。                                                             );
1780                                    #pragma write h, ( *                                                                              );
1780                                    #pragma write h, ( * Copyrights (2015-2016) ACTRI                                                 );
1780                                    #pragma write h, ( * All Right Reserved                                                           );
1780                                    #pragma write h, ( *******************************************************************************);
1780                                    #pragma write h, (                                                                                );

ETPU "C" COMPILER 1.0.7.85                                              PAGE 134


1780                                    #pragma write h, ( *******************************************************************************);
1780                                    #pragma write h, ( * Revision History                                                             );
1780                                    #pragma write h, ( *------------------------------------------------------------------------------);
1780                                    #pragma write h, ( * 2017-12-07, gbo, created                                                     );
1780                                    #pragma write h, ( *******************************************************************************);
1780                                    #pragma write h, ( );
1780                                    #pragma write h, ( *******************************************************************************);
1780                                    #pragma write h, ( * content                                                                      );
1780                                    #pragma write h, ( *------------------------------------------------------------------------------);
1780                                    #pragma write h, ( *  File            : etpuc_crank_auto.h                                          );
1780                                    #pragma write h, ( *  Description     : 曲轴同步头文件                                          );
1780                                    #pragma write h, ( *  Call            : 029-89186510                                              );
1780                                    #pragma write h, ( *  该文件由ETPU自动生成，请勿修改！！！                                        );
1780                                    #pragma write h, ( ******************************************************************************/);
1780                                    #pragma write h, (#ifndef _ETPU_CRANK_AUTO_H_ );
1780                                    #pragma write h, (#define _ETPU_CRANK_AUTO_H_ );
1780                                    #pragma write h, ( );
1780                                    #pragma write h, (/* Function Configuration Information */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_FUNCTION_NUMBER) CRANK_FUNCTION_NUMBER );
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_TABLE_SELECT) ::ETPUentrytype(CrankDetect) );
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_NUM_PARMS) ::ETPUram(CrankDetect) );
1780                                    #pragma write h, ( );
1780                                    #pragma write h, (/* Host Service Request Definitions */);
1780                                    #pragma write h, (/* 曲轴检测初始化 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_INIT) CRANK_INIT );
1780                                    #pragma write h, (/* 主CPU通过服务请求使角度计数加速 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_IPH) CRANK_IPH );
1780                                    #pragma write h, (/* 主CPU直接调整角度计数值，配合参数CRANK_ANGLE_ADJUST */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_ANGLE_ADJUST) CRANK_ANGLE_ADJUST );
1780                                    #pragma write h, ( );
1780                                    #pragma write h, (/* Crank error definitions */);
1780                                    #pragma write h, (/* 无错误 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_NO_ERROR) CRANK_NO_ERROR );
1780                                    #pragma write h, (/* 错误的TransB */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_INVALID_M1) CRANK_INVALID_M1 );
1780                                    #pragma write h, (/* 错误的MatchB或TransA */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_INVALID_M2) CRANK_INVALID_M2 );
1780                                    #pragma write h, (/* 曲轴同步超时 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_TIMEOUT) CRANK_TIMEOUT );
1780                                    #pragma write h, (/* 曲轴停车 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_STALL) CRANK_STALL );
1780                                    #pragma write h, (/* 内部错误 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_INTERNAL_ERROR) CRANK_INTERNAL_ERROR );
1780                                    #pragma write h, ( );
1780                                    #pragma write h, (/* Crank state definitions */);
1780                                    #pragma write h, (/* 曲轴同步的初始状态 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_SEEK) CRANK_SEEK );
1780                                    #pragma write h, (/* 初始化后空白的一段时间 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_BLANK_TIME) CRANK_BLANK_TIME );
1780                                    #pragma write h, (/* 空白时间后检测若干齿，仅检测不处理 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_BLANK_TEETH) CRANK_BLANK_TEETH );
1780                                    #pragma write h, (/* 检测到了第一个齿 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_FIRST_EDGE) CRANK_FIRST_EDGE );
1780                                    #pragma write h, (/* 检测到了第二个齿，即第一个周期 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_SECOND_EDGE) CRANK_SECOND_EDGE );

ETPU "C" COMPILER 1.0.7.85                                              PAGE 135


1780                                    #pragma write h, (/* 正在测试可能的缺齿 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_TEST_POSSIBLE_GAP) CRANK_TEST_POSSIBLE_GAP );
1780                                    #pragma write h, (/* 已满足缺齿的部分条件，正在验证 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_VERIFY_GAP) CRANK_VERIFY_GAP );
1780                                    #pragma write h, (/* 缺齿已验证 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_GAP_VERIFIED) CRANK_GAP_VERIFIED );
1780                                    #pragma write h, (/* 曲轴正常运行 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_COUNTING) CRANK_COUNTING );
1780                                    #pragma write h, (/* 缺齿前的齿，用来调整检测缺齿的窗口位置和宽度 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_TOOTH_BEFORE_GAP) CRANK_TOOTH_BEFORE_GAP );
1780                                    #pragma write h, (/* 缺齿后的齿，用来验证缺齿，调整缺齿后的窗口位置和宽度 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_TOOTH_AFTER_GAP) CRANK_TOOTH_AFTER_GAP );
1780                                    #pragma write h, ( );
1780                                    #pragma write h, (/* Engine position status definitions */);
1780                                    #pragma write h, (/* 发动机同步初始化 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_ENG_POS_SEEK) ENG_POS_SEEK );
1780                                    #pragma write h, (/* 发动机首次半同步，此时已验证了缺齿，但还没有凸轮信号 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_ENG_POS_FIRST_HALF_SYNC) ENG_POS_FIRST_HALF_SYNC );
1780                                    #pragma write h, (/* 发动机预同步，此时在当前曲轴圈中，检测到了凸轮信号，);
1780                                    #pragma write h, ( * 还需进一步确认当前曲轴是第1圈还是第2圈 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_ENG_POS_PRE_FULL_SYNC) ENG_POS_PRE_FULL_SYNC );
1780                                    #pragma write h, (/* 发动机半同步，正常运行后，若某次未在期望的位置检测到凸轮信号后进入 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_ENG_POS_HALF_SYNC) ENG_POS_HALF_SYNC );
1780                                    #pragma write h, (/* 发动机同步，一切正常 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_ENG_POS_FULL_SYNC) ENG_POS_FULL_SYNC );
1780                                    #pragma write h, ( );
1780                                    #pragma write h, (/* Global Parameter Definitions */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_GLOBAL_ERROR) ::ETPUlocation (Global_Error) );
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_ENG_POS_SYNC_STATE) ::ETPUlocation (gEngPosSyncState) );
1780                                    #pragma write h, ( );
1780                                    #pragma write h, (/* Parameter Definitions */);
1780                                    #pragma write h, (/* 错误状态 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_ERROR_STATUS_OFFSET) ::ETPUlocation (CrankDetect, errorStatus) );
1780                                    #pragma write h, (/* 凸轮通道 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_CAM_CHANNEL_OFFSET) ::ETPUlocation (CrankDetect, camChannel) );
1780                                    #pragma write h, (/* 曲轴每圈共多少个齿，包含缺齿 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_TEETH_PER_REV_OFFSET) ::ETPUlocation (CrankDetect, crankTeethRev) );
1780                                    #pragma write h, (/* 曲轴缺齿数 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_NUM_MISSING_OFFSET) ::ETPUlocation (CrankDetect, crankNumMissing) );
1780                                    #pragma write h, (/* 初始化后空白的时间，以TCR1计数为单位 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_BLANK_TIME_TICK_OFFSET) ::ETPUlocation (CrankDetect, blankTime) );
1780                                    #pragma write h, (/* 空白时间后的空白齿个数 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_BLANK_TEETH_NUM_OFFSET) ::ETPUlocation (CrankDetect, blankTeeth) );
1780                                    #pragma write h, (/* 空白齿后，等待第一个齿的超时时间，以TCR1计数为单位 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_FIRST_TIMEOUT_OFFSET) ::ETPUlocation (CrankDetect, firstTimeout) );
1780                                    #pragma write h, (/* 下一个齿为正常齿时的窗口系数 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_WIN_RATIO_NORMAL_OFFSET) ::ETPUlocation (CrankDetect, winRatioNormal) );
1780                                    #pragma write h, (/* 缺齿后第一个正常齿的窗口系数 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_WIN_RATIO_ACROSS_GAP_OFFSET) ::ETPUlocation (CrankDetect, winRatioACGap) );
1780                                    #pragma write h, (/* 缺齿后第二个正常齿的窗口系数 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_WIN_RATIO_AFTER_GAP_OFFSET) ::ETPUlocation (CrankDetect, winRatioAFGap) );
1780                                    #pragma write h, (/* 超时的窗口系数 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_WIN_RATIO_TIMEOUT_OFFSET) ::ETPUlocation (CrankDetect, winRatioTimeout) );
1780                                    #pragma write h, (/* 用于缺齿的ABa检测系数 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_GAP_RATIO_OFFSET) ::ETPUlocation (CrankDetect, gapRatio) );

ETPU "C" COMPILER 1.0.7.85                                              PAGE 136


1780                                    #pragma write h, (/* 链接通道组1 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_LINK_GROUP1_OFFSET) ::ETPUlocation (CrankDetect, linkGroup1) );
1780                                    #pragma write h, (/* 链接通道组2 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_LINK_GROUP2_OFFSET) ::ETPUlocation (CrankDetect, linkGroup2) );
1780                                    #pragma write h, (/* 当移除齿时，主CPU需要插入的齿数 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_HOST_ASSERT_TEETH_OFFSET) ::ETPUlocation (CrankDetect, hostAssertTeeth) );
1780                                    #pragma write h, (/* 直接调整TCR2的计数 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_ANGLE_ADJUST_OFFSET) ::ETPUlocation (CrankDetect, angleAdjust) );
1780                                    #pragma write h, (/* 保存曲轴状态机 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_CRANK_STATE_OFFSET) ::ETPUlocation (CrankDetect, crankState) );
1780                                    #pragma write h, (/* 齿计数 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_TOOTH_COUNT_OFFSET) ::ETPUlocation (CrankDetect, toothCount) );
1780                                    #pragma write h, (/* 正常齿周期，用来计算曲轴转速，值为TCR1计数 */);
1780                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_CRANK_TOOTH_PEROID_OFFSET) ::ETPUlocation (CrankDetect, toothPeriodA) );
1780                                    #pragma write h, ( );
1780                                    #pragma write h, (#endif);
1780                                    #pragma write h, ( );


00000004                                #define TOOTHGEN_FUNCTION_NUMBER 4
                                        #include "etpuc_toothgen2.c"
                                        /*******************************************************************************
                                        *
                                        *  FREESCALE SEMICONDUCTOR INC. 2006
                                        *  ALL RIGHTS RESERVED
                                        *  COPYRIGHT (c)
                                        *
                                        ********************************************************************************
                                        *
                                        *  DESCRIPTION:
                                        *   The ToothGen eTPU function generates crank and cam signals to simulate
                                        *   input signals to the automotive engine system.
                                        *
                                        ********************************************************************************
                                        *
                                        *  REVISION HISTORY:
                                        *
                                        * Revision 1.3  2009/06/30 15:03:43  r54529
                                        * added EnableOutputBuffer() needed for ColdFires
                                        *
                                        *
                                        *  REVISION    AUTHOR       DATE         DESCRIPTION OF CHANGE
                                        *  --------    -----------  ---------    ------------------------------------
                                        *  0.0         MAP          11/05/02     Original release
                                        *  0.1         MAP          01/03/03     Complete Rewrite
                                        *  0.2         Ming Li      11/17/03     Updated to use new eTPU header files
                                        *  1.0         M. Brejl     26/Jun/06    Updated to eTPU coding standards.
                                        *                                        New features: missing tooth, noise, ...
                                        *  1.1         M. Brejl     13/May/08    2nd missing tooth added, tooth in gap
                                        *  1.2         M. Brejl     30/Jun/09    added EnableOutputBuffer for ColdFires
                                        *******************************************************************************/
                                        #include <etpuc.h>
                                        #ifndef __ETPUC_H
                                        #define __ETPUC_H


ETPU "C" COMPILER 1.0.7.85                                              PAGE 137


                                        /*
                                         *  eTPU C Code Development System
                                         *
                                         *  Processor register definitions
                                         *  for the eTPU C Code Development System.
                                         *
                                         *  This code may be adapted for any purpose
                                         *  when used with the eTPU C Code Development
                                         *  System.  No warranty is implied or given
                                         *  as to their usability for any purpose.
                                         *
                                         *  (c) Copyright 2002-2004 Byte Craft Limited
                                         *  421 King St.N., Waterloo, ON, Canada, N2J 4E4
                                         *  VOICE: 1 (519) 888 6911
                                         *  FAX  : 1 (519) 746 6751
                                         *  email: support@bytecraft.com
                                         *
                                         *  Byte Craft Limited
                                         *  Waterloo, Ontario
                                         *  Canada N2J 4E4
                                         *  (519) 888-6911
                                         *
                                         *  Walter Banks
                                         *
                                         * Revision history
                                         * ----------------
                                         * V0.90  WB    Nov 2003  First pre-release of etpuc.h based on V1.10 etpu.h with
                                         *                        changes to reflect eTPU naming conventions
                                         * V1.00  WB    Nov 2003  First release changes to the channel fields to reflect
                                         *                        naming conventions for eTPU
                                         * V1.01  WB    Dec 2003  Corrected definitions of pin_opacA and pin_opacB
                                         *
                                         *
                                         *
                                         *  All of the eTPU registers can be directly accessed from C
                                         *

                                             register_ac        ac   ;      // 24 bits
                                             register_b         b    ;      // 24 bits
                                             register_c         c    ;      // 24 bits
                                             register_d         d    ;      // 24 bits
                                             register_chan      chan ;      //  5 bits
                                             register_diob      diob ;      // 24 bits
                                             register_erta      erta ;      // 24 bits
                                             register_ertb      ertb ;      // 24 bits
                                             register_link      link ;      //  8 bits
                                             register_mach      mach ;      // 24 bits
                                             register_macl      macl ;      // 24 bits
                                             register_p         p    ;      // 24 bits
                                             register_rar       rar  ;      // 14 bits
                                             register_sr        sr   ;      // 24 bits
                                             register_tcr1      tcr1 ;      // 24 bits
                                             register_tcr2      tcr2 ;      // 24 bits
                                             register_tpr       tpr  ;      // 16 bits
                                             register_trr       trr  ;      // 24 bits

ETPU "C" COMPILER 1.0.7.85                                              PAGE 138


                                             register_chan_base chan_base;  // 24 bits
                                        */

                                        /* The following registers are defined for
                                           eTPU C application code */

                                             register_chan       chan ;       //  5 bits
                                             register_erta       erta ;       // 24 bits
                                             register_ertb       ertb ;       // 24 bits
                                             register_tcr1       tcr1 ;       // 24 bits
                                             register_tcr2       tcr2 ;       // 24 bits
                                             register_tpr        tpr  ;       // 16 bits
                                             register_trr        trr  ;       // 24 bits
                                             register_chan_base  chan_base;   // 24 bits
                                             register_link       link;        // 8 bits

                                        /*
                                           The link request can be set by copying the
                                           channel number into the link register. The
                                           following definition does this.
                                         */

                                        #define link_request(channel) link = channel

                                        /*
                                         *
                                         *
                                         *  All of the eTPU channel fields are predefined as a
                                         *  large C structure (chan_struct) by the eTPU C compiler.
                                         *
                                         *  struct chan {
                                         *               CIRC   int : 2 ;
                                         *               ERWA   int : 1 ;
                                         *               ERWB   int : 1 ;
                                         *               FLC    int : 3 ;
                                         *               IPACA  int : 3 ;
                                         *               IPACB  int : 3 ;
                                         *               LSR    int : 1 ;  // w test
                                         *               MRLA   int : 1 ;  // w test
                                         *               MRLB   int : 1 ;  // w test
                                         *               MRLE   int : 1 ;
                                         *               MTD    int : 2 ;
                                         *               OPACA  int : 3 ;
                                         *               OPACB  int : 3 ;
                                         *               PDCM   int : 4 ;
                                         *               PIN    int : 3 ;
                                         *               TBSA   int : 4 ;
                                         *               TBSB   int : 4 ;
                                         *               TDL    int : 1 ;
                                         *               SMPR   int : 2 ;
                                         * State Resolution
                                         *               FLAG0  int : 1 ;  // w only also defined in FLC
                                         *               FLAG1  int : 1 ;
                                         * Channel Flags
                                         *               FM0    int : 1 ;

ETPU "C" COMPILER 1.0.7.85                                              PAGE 139


                                         *               FM1    int : 1 ;
                                         *         //    LSR    int : 1 ;  // also channel fields
                                         *         //    MRLA   int : 1 ;  // also channel fields
                                         *         //    MRLB   int : 1 ;  // also channel fields
                                         *               PSS    int : 1 ;
                                         *               PSTI   int : 1 ;
                                         *               PSTO   int : 1 ;
                                         *               TDLA   int : 1 ;
                                         *               TDLB   int : 1 ;
                                         *              }
                                         ***/

                                        chan_struct channel;
                                        register_cc        CC;

                                        #define erwA       channel.ERWA
                                        #define erwB       channel.ERWB

                                        #define flc        channel.FLC
                                        #define ipacA      channel.IPACA
                                        #define ipacB      channel.IPACB
                                        #define lsr        channel.LSR

                                        #define mrlA       channel.MRLA
                                        #define mrlB       channel.MRLB
                                        #define mrle       channel.MRLE
                                        #define mtd        channel.MTD
                                        #define opacA      channel.OPACA
                                        #define opacB      channel.OPACB
                                        #define pdcm       channel.PDCM
                                        #define pin        channel.PIN
                                        #define act_unitA  channel.TBSA
                                        #define act_unitB  channel.TBSB
                                        #define tdl        channel.TDL
                                        #define flag0      channel.FLAG0
                                        #define flag1      channel.FLAG1
                                        #define fm0        channel.FM0
                                        #define fm1        channel.FM1
                                        #define pss        channel.PSS
                                        #define psti       channel.PSTI
                                        #define psto       channel.PSTO
                                        #define tdlA       channel.TDLA
                                        #define tdlB       channel.TDLB


                                        // IPAC 1,2
                                        #define no_detect                 0
                                        #define low_high                  1
                                        #define high_low                  2
                                        #define any_trans                 3
                                        #define detect_input_0_on_match   4
                                        #define detect_input_1_on_match   5
                                        #define no_change_ipac            7

                                        // OPAC 1,2  fields

ETPU "C" COMPILER 1.0.7.85                                              PAGE 140



                                        #define match_no_change   0
                                        #define match_high        1
                                        #define match_low         2
                                        #define match_toggle      3
                                        #define opac_high         1
                                        #define opac_low          2
                                        #define toggle            3
                                        #define opac_high_low     4
                                        #define opac_low_high     5
                                        #define transition_low    4
                                        #define transition_high   5
                                        #define transition_toggle 6

                                        // PDCM fields
                                        #define em_b_st  0              //Either Match, Blocking, Single Transition
                                        #define em_b_dt  1              //Either Match, Blocking, Double Transition
                                        #define em_nb_st 2              //Either Match, NonBlocking, Single Transition
                                        #define em_nb_dt 3              //Either Match, NonBlocking, Double Transition
                                        #define m2_st    4              //Match2, Single, Transition
                                        #define m2_dt    5              //Match2, Double, Transition
                                        #define bm_st    6              //Both Match, Single Transition
                                        #define bm_dt    7              //Both Match, Double Transition
                                        #define m2_o_st  8              //Match2, Ordered, Single Transition
                                        #define m2_o_dt  9              //Match2, Ordered, Double Transition
                                        #define sm_st_e  0xE                //Single Match, Single Transition, Enhanced
                                        #define sm_st    0xC                //Single Match, Single Transition
                                        #define sm_dt    0xD                //Single Match, Double Transition

                                        // Time Bases Selection for match and capture
                                        #define Mtcr1_Ctcr1_ge       0      //Match tcr1, Capture tcr1, greater than
                                        #define Mtcr2_Ctcr1_ge       1      //Match tcr2, Capture tcr1, greater than
                                        #define Mtcr1_Ctcr2_ge       2      //Match tcr1, Capture tcr2, greater than
                                        #define Mtcr2_Ctcr2_ge       3      //Match tcr2, Capture tcr2, greater than
                                        #define Mtcr1_Ctcr1_eq       4      //Match tcr1, Capture tcr1, equal
                                        #define Mtcr2_Ctcr1_eq       5      //Match tcr2, Capture tcr1, equal
                                        #define Mtcr1_Ctcr2_eq       6      //Match tcr1, Capture tcr2, equal
                                        #define Mtcr2_Ctcr2_eq       7      //Match tcr2, Capture tcr2, equal

                                        #define enable_output_buffer  8     // TBSx[3] = 1, TBSx[2:0] = 000
                                        #define disable_output_buffer 9     // TBSx[3] = 1, TBSx[2:0] = 001
                                        #define do_nothing       15     // TBSx[3] = 1, TBSx[2:0] = 111

                                        // Time Bases Selection for transition and capture
                                        #define Capture_tcr1        0       //TBSx[2] = 0
                                        #define Capture_tcr2        2       //TBSx[2] = 1

                                        // Tooth Program Register structure

                                        struct tpr_struct {
                                          int TICKS   : 10;
                                          int TPR10   : 1;
                                          int HOLD    : 1;
                                          int IPH     : 1;
                                          int MISSCNT : 2;

ETPU "C" COMPILER 1.0.7.85                                              PAGE 141


                                          int LAST    : 1;
                                          } ;

                                        // pin definitions
                                        //   pin = pin_high;
                                        #define pin_opacA  0
                                        #define pin_opacB  1
                                        #define pin_high   2
                                        #define pin_low    4

                                        #endif /* __ETPUC_H */

                                        #include <eTPUc_common.h>
                                        #ifndef __ETPUC_COMMON_H
                                        #define __ETPUC_COMMON_H

                                        /********************************************************************************

                                         FILE NAME: etpuc_common.h

                                         COPYRIGHT (c) ASH WARE, Byte Craft Limited, Freescale 2002-2004.
                                         All Rights Reserved.

                                         VERSION:  1.0

                                         This file is maintained as part of the support for the eTPU_C
                                         development tools by Byte Craft Limited.

                                         This code may be adapted for any purpose when used with the eTPU_C
                                         Code Development System.  No warranty is implied or given as to their
                                         usability for any purpose.

                                         Portions of this file are governed by the following copyrights and
                                         terms:

                                         (c) Freescale 2002-2004 FREESCALE, INC. All Rights Reserved.
                                         *  You are hereby granted a copyright license to use, modify, and
                                         *  distribute the SOFTWARE so long as this entire notice is
                                         *  retained without alteration in any modified and/or redistributed
                                         *  versions, and that such modified versions are clearly identified
                                         *  as such. No licenses are granted by implication, estoppel or
                                         *  otherwise under any patents or trademarks of Freescale, Inc. This
                                         *  software is provided on an "AS IS" basis and without warranty.
                                         *
                                         *  To the maximum extent permitted by applicable law, FREESCALE
                                         *  DISCLAIMS ALL WARRANTIES WHETHER EXPRESS OR IMPLIED, INCLUDING
                                         *  IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
                                         *  PURPOSE AND ANY WARRANTY AGAINST INFRINGEMENT WITH REGARD TO THE
                                         *  SOFTWARE (INCLUDING ANY MODIFIED VERSIONS THEREOF) AND ANY
                                         *  ACCOMPANYING WRITTEN MATERIALS.
                                         *
                                         *  To the maximum extent permitted by applicable law, IN NO EVENT
                                         *  SHALL FREESCALE BE LIABLE FOR ANY DAMAGES WHATSOEVER (INCLUDING
                                         *  WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
                                         *  INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR OTHER PECUNIARY

ETPU "C" COMPILER 1.0.7.85                                              PAGE 142


                                         *  LOSS) ARISING OF THE USE OR INABILITY TO USE THE SOFTWARE.
                                         *
                                         *  Freescale assumes no responsibility for the maintenance and support
                                         *  of this software

                                         (c) Copyright 2002-2004 Byte Craft Limited
                                         421 King St.N., Waterloo, ON, Canada, N2J 4E4
                                         VOICE: 1 (519) 888 6911
                                         email: support@bytecraft.com

                                         (c) Copyright 2002-2004 ASH WARE

                                        ================================================================================

                                        DESCRIPTION: This file defines the application-friendly macros,
                                        functions for common tasks like channel set up and register control
                                        field access.

                                        ================================================================================

                                        SOURCES:

                                        etpuc_common.h is based on the following header files commonly used by
                                        the eTPU development community:

                                        AshWareETpu.h - developed by Andy Klumpp from ASH WARE
                                        Mike.h - developed by Mike Pauwels from Freescale
                                        etpu_common.h - developped by Ming Li from Freescale

                                        Jeff Loeliger from Freescale and Walter Banks from Byte Craft
                                        also made significant contibutions.

                                        ================================================================================
                                         UPDATE HISTORY
                                         REV      AUTHOR        DATE                DESCRIPTION OF CHANGE
                                         ---      -------      --------    ---------------------
                                         0.0      Ming Li      10/30/03    Initial creation
                                         0.1      Ming Li      11/12/03    Updated to incorporate comments from eTPU
                                                                           development community.
                                         0.2      Walter Banks 15 Dec 03   Made changes to be reflect definitions in
                                                                           eTPUc.h
                                                                           Corrected IsTransALatched()
                                                                                     IsTransBLatched()
                                                                           Added missing definitions
                                                                                     set_pin_per_opacA
                                                                                     set_pin_per_opacB
                                                                                     force_pin_high
                                                                                     force_pin_low
                                                                           Corrected opac1 to opacA
                                                                                     opac2 to opacB

                                         0.3      Walter Banks  5 Jan 04   Corrected opacB = pin_action; to
                                                                               opacA = pin_action;

                                         0.4     J. Loeliger    21/Jan/04  Cleared up reorganized and added more:

ETPU "C" COMPILER 1.0.7.85                                              PAGE 143


                                                                           -Moved TRUE & FALSE to top and added
                                                                              conditional
                                                                           -Moved entry conditions up and added macros
                                                                              for all conditions
                                                                           -Merged with AshWareETpu.h
                                                                              -Removed commet with of PDCM names.
                                                                           -Grouped latches and flags together.
                                                                             -added new set and clear for latches and
                                                                                flags
                                                                           -Merged output pin value to 1 set rather
                                                                              than 2
                                                                           -Added long channel mode names.
                                                                           -Added SetupMatch_AB for better
                                                                              optimization
                                                                           -Added match only conditions for output
                                                                              functions.
                                                                           -Added new ActionUnintA/B macros
                                                                           -Added new Pin macro
                                                                           -And more.
                                         0.5     J. Loeliger     12/Feb/04 -Changed DetectTrans to OnTrans.
                                         0.6     J. Loeliger     30/Mar/04 -Added SetupMatchB and fixed some old
                                                                             references to 1 & 2 -> A & B
                                         0.7     J. Loeliger     16/Apr/04 -Changed Disable match (MRLE) to =0
                                         0.8     J. Loeliger     27/Apr/04 -Fixed Disable/Enable match in thread,
                                                                              they were swapped.
                                         0.9     J. Loeliger     10/May/04 -Added support for OBE with new
                                                 M. Brejl                   EnableOutputBuffer()/DisableOutputBuffer()
                                                                            Removed all // comments. Changed Motorola
                                                                            to Freescale.
                                                                            Fixed spelling mistake in GetCurentChanNum

                                         0.4     Karen McMurray  19 May 04  Changed all ertA to erta
                                                                                        ertB to ertb.

                                         1.0     Kirk Zurell     11 Aug 04  Integrated etpuc_common.h from J. Loeliger
                                                                            and etpuc_common.h from Byte Craft Limited.
                                                                            Removed tabs & made comments more sustainable.
                                                                            Conditionalized some definitions to be more
                                                                            economical on symbols.

                                                                            Divider lines have 80 asterices.

                                        */



                                        /********************************************************************************/

                                        /* This file depends upon definitions from etpuc.h */

                                        #ifndef __ETPUC_H
                                        #include <etpuc.h>
                                        #endif /* __ETPUC_H */



ETPU "C" COMPILER 1.0.7.85                                              PAGE 144


                                        /********************************************************************************/

                                        /* Constant definitions */

                                        #ifndef TRUE
                                        #define TRUE        1
                                        #endif

                                        #ifndef FALSE
                                        #define FALSE       0
                                        #endif


                                        /********************************************************************************/

                                        /* State Resolution Flags, and other latches */

                                        /* Clear() definitions */
                                        #define LSRLatch      lsr
                                        #define LatchedMatchA mrlA
                                        #define LatchedMatchB mrlB
                                        #define TransLatch    tdl

                                        /* Macros */

                                        /* Set flag0 or flag1
                                           Usage: Set(flag0 | flag1);*/

                                        #define Set(cond)     (cond = 1)

                                        /* Clear a flag
                                           Usage: Clear(flag0 | flag1 | LSRLatch | lsr | MatchALatch | mrlA |
                                                         MatchBLatch | mrlB | TransLatch | tdl);         */

                                        #define Clear(cond)   (cond = 0)

                                        /* SYNONYMS */
                                        /* Flag 0 & flag 1 */
                                        #define ClrFlag0()  (channel.FLAG0 = 0)
                                        #define SetFlag0()  (channel.FLAG0 = 1)
                                        #define ClrFlag1()  (channel.FLAG1 = 0)
                                        #define SetFlag1()  (channel.FLAG1 = 1)


                                        #define FunctionMode0          channel.FM0
                                        #define IsFunctionMode0()     (channel.FM0==1)
                                        #define IsSampledFuncMode0()  (channel.FM0==1)
                                        #define IsLatchedFuncMode0()  (channel.FM0==1)

                                        #define FunctionMode1          channel.FM1
                                        #define IsFunctionMode1()     (channel.FM1==1)
                                        #define IsSampledFuncMode1()  (channel.FM1==1)
                                        #define IsLatchedFuncMode1()  (channel.FM1==1)



ETPU "C" COMPILER 1.0.7.85                                              PAGE 145


                                        /********************************************************************************/

                                        /* Writing the match registers and enabling/disabling the Match
                                           Recognition Latch Enable */

                                        #define EnableMatchA()                 (channel.ERWA = 0)
                                        #define EnableMatchB()                 (channel.ERWB = 0)
                                        #define DisableMatch()                 (channel.MRLE = 0)

                                        /* SYNONYMS */
                                        #define WriteErtAToMatchAAndEnable()   channel.ERWA = 0
                                        #define WriteErtBToMatchBAndEnable()   channel.ERWB = 0
                                        #define DisableMatchDetection();       channel.MRLE = 0


                                        /* Read capture register */
                                        #define GetCapRegA()  (erta)
                                        #define GetCapRegB()  (ertb)

                                        /* Clear Latch */
                                        #define ClearLSRLatch()       (channel.LSR  = 0)

                                        #define ClearMatchALatch()    (channel.MRLA = 0)
                                        #define ClearMatchBLatch()    (channel.MRLB = 0)

                                        #define ClearTransLatch()     (channel.TDL = 0)

                                        /* SYNONYMS */
                                        #define ClearLinkServiceRequestEvent() (lsr  = 0)

                                        #define ClearMatchAEvent()    (channel.MRLA = 0)
                                        #define ClearMatchBEvent()    (channel.MRLB = 0)

                                        #define ClearTransitionEvents() (channel.TDL = 0)



                                        /* Test latch conditions */

                                        #define TransitionALatch           channel.TDLA
                                        #define IsTransALatched()         (channel.TDLA==1)

                                        #define TransitionBLatch           channel.TDLB
                                        #define IsTransBLatched()         (channel.TDLB==1)

                                        #define MatchALatch            channel.MRLA
                                        #define IsMatchALatched()     (channel.MRLA==1)

                                        #define MatchBLatch            channel.MRLB
                                        #define IsMatchBLatched()     (channel.MRLB==1)

                                        /* SYNONYMS */
                                        #define IsLatchedTransitionA()    (channel.TDLA==1)
                                        #define IsLatchedTransitionB()    (channel.TDLB==1)
                                        #define IsLatchedMatchA()         (channel.MRLA==1)

ETPU "C" COMPILER 1.0.7.85                                              PAGE 146


                                        #define IsLatchedMatchB()         (channel.MRLB==1)



                                        /********************************************************************************/

                                        /* Enabling/Disabling Event Handling */

                                        #define EnableEventHandling()                   (channel.MTD = 0)
                                        #define DisableEventHandling()                  (channel.MTD = 1)

                                        /* SYNONYMS */
                                        #define EnableMatchAndTransitionEventHandling()  channel.MTD = 0
                                        #define DisableMatchAndTransitionEventHandling() channel.MTD = 1


                                        /********************************************************************************/

                                        /* Semaphore Operations */

                                        #define IsSemaphoreLocked()   (channel.SMPR == 1)
                                        #define LockSemaphore(num)    (channel.SMPR = num)
                                        #define FreeSemaphore()       (channel.SMPR = -1)


                                        /********************************************************************************/

                                        /* Exceptions */

                                        /* Channel control macros */
                                        #define SetChannelInterrupt()       (channel.CIRC = 0)
                                        #define SetChannelInterruptRequest()(channel.CIRC = 0)

                                        #define SetDataTransferInterrupt()        (channel.CIRC = 1)
                                        #define SetDataTransferInterruptRequest() (channel.CIRC = 1)

                                        #define SetGlobalException()  (channel.CIRC = 2)

                                        /* Channel control */

                                        /* Generate the link service request to channel[ChNum] */
                                        #define LinkToChannel(ChNum)            (link = ChNum)
                                        #define LinkTo(num)                 link = num;
                                        #define LinkToEngine1Chan(num)      link = (num | (1<<6))
                                        #define LinkToEngine2Chan(num)      link = (num | (2<<6))
                                        #define LinkToOtherEngineChan(num)  link = (num | (3<<6))

                                        /* switch to specified channel from current channel */
                                        #define SwitchToChannel(ChNum)      (chan = ChNum)

                                        /* return current channel number */
                                        #define GetCurrentChanNum()         (chan)

                                        /* branch condition */
                                        #define LinkServiceRequest     channel.LSR

ETPU "C" COMPILER 1.0.7.85                                              PAGE 147


                                        #define IsLinkReqActive()     (channel.LSR==1)
                                        #define IsSampledLink()       (channel.LSR==1)
                                        #define IsLatchedLink()       (channel.LSR==1)


                                        /********************************************************************************/

                                        /* Entry Conditions Definition */

                                        /* Usage: use these in the if()/else if()/else structure in an
                                           ETPU_function */

                                        #define HostServiceRequest               hsr
                                        #define IsHostServiceRequestEvent(num)   (hsr==num)

                                        #define MatchA_TransB                    (m1==1)
                                        #define matchA_transB                    (m1==1)
                                        #define IsMatchAOrTransitionBEvent()     (m1==1)

                                        #define MatchB_TransA                    (m2==1)
                                        #define matchB_transA                    (m2==1)
                                        #define IsMatchBOrTransitionAEvent()     (m2==1)

                                        #define linkRequest                      (lsr==1)
                                        #define IsLinkServiceRequestEvent()      (lsr==1)

                                        /* For output-only functions */
                                        #define MatchA                           (m1==1)
                                        #define MatchB                           (m2==1)


                                        /********************************************************************************/

                                        /* Predefined Channel Modes (PDCM) */

                                        #define SetChannelMode(mode)        (channel.PDCM = mode)
                                        #define channel_setup channel.PDCM

                                        /* Usage:       channel_setup = PDCM_constant

                                        PDCM_constants are taken from etpuc.h:
                                        em_b_st         Either Match, Blocking, Single Transition
                                        em_b_dt         Either Match, Blocking, Double Transition
                                        em_nb_st        Either Match, NonBlocking, Single Transition
                                        em_nb_dt        Either Match, NonBlocking, Double Transition
                                        m2_st           Match2, Single, Transition
                                        m2_dt           Match2, Double, Transition
                                        bm_st           Both Match, Single Transition
                                        bm_dt           Both Match, Double Transition
                                        m2_o_st         Match2, Ordered Single Blocking Transition
                                        m2_o_dt         Match2, Ordered Double Transition
                                        sm_st_e         Single Match, Single Transition Enhanced
                                        sm_st           Single Match, Single Transition
                                        sm_dt           Single Match, Double Transition
                                        */

ETPU "C" COMPILER 1.0.7.85                                              PAGE 148



                                        /* SYNONYMS */
                                        #define EitherMatchBlockingSingleTransition()     channel.PDCM = em_b_st
                                        #define EitherMatchBlockingDoubleTransition()     channel.PDCM = em_b_dt
                                        #define EitherMatchNonBlockingSingleTransition()  channel.PDCM = em_nb_st
                                        #define EitherMatchNonBlockingDoubleTransition()  channel.PDCM = em_nb_dt
                                        #define Match2SingleTransition()                  channel.PDCM = m2_st
                                        #define Match2DoubleTransition()                  channel.PDCM = m2_dt
                                        #define BothMatchSingleTransition()               channel.PDCM = bm_st
                                        #define BothMatchDoubleTransition()               channel.PDCM = bm_dt
                                        #define Match2OrderedSingleBlockingTransition()   channel.PDCM = m2_o_st
                                        #define Match2OrderedDoubleTransition()           channel.PDCM = m2_o_dt
                                        #define SingleMatchSingleTransitionEnhanced()     channel.PDCM = sm_st_e
                                        #define SingleMatchSingleTransition()             channel.PDCM = sm_st
                                        #define SingleMatchDoubleTransition()             channel.PDCM = sm_dt


                                        #define ClearAllLatches()         \
                                                (lsr = 0);(mrlA = 0);(mrlB = 0);(tdl = 0);


                                        /********************************************************************************/

                                        /* Complex Macros */

                                        /* These macros should provide the most optimized way of doing things.
                                           They should be in the best order for optimizing. The compiler might
                                           be able to identify this code for optimization. */

                                        #define SetupMatchA(reference) \
                                                erta = reference;      \
                                                EnableMatchA();        \
                                                ClearMatchALatch();

                                        #define SetupMatchB(reference) \
                                                ertb = reference;      \
                                                EnableMatchB();        \
                                                ClearMatchBLatch();

                                        /* These are ONLY useful for init. and if you know which TCR you want
                                           to use. Latches are cleared at the end so it can be combined with
                                           other latches. */

                                        #define ConfigMatch_AB() \
                                                WriteErtAToMatchAAndEnable(); \
                                                WriteErtBToMatchBAndEnable(); \
                                                EnableMatchA();        \
                                                EnableMatchB();        \
                                                EnableEventHandling();\
                                                ClearMatchALatch();\
                                                ClearMatchBLatch();

                                        #define SetupMatch_A(reference, timebase_comparator, pin_action) \
                                                erta = reference; \
                                                act_unitA = timebase_comparator; \

ETPU "C" COMPILER 1.0.7.85                                              PAGE 149


                                                opacA = pin_action; \
                                                EnableMatchA();        \
                                                ClearMatchALatch();\
                                                EnableEventHandling();

                                        #define SetupMatch_B(reference, timebase_comparator, pin_action) \
                                                ertb = reference; \
                                                act_unitB = timebase_comparator; \
                                                opacB = pin_action; \
                                                EnableMatchB();        \
                                                ClearMatchBLatch();\
                                                EnableEventHandling();

                                        #define SetupCaptureTrans_A(timebase, pin_trans) \
                                                act_unitA = timebase;\
                                                ipacA = pin_trans;\
                                                ClearTransLatch();\
                                                EnableEventHandling();

                                        #define SetupCaptureTrans_B(timebase, pin_trans) \
                                                act_unitB = timebase;\
                                                ipacB = pin_trans;\
                                                ClearTransLatch();\
                                                EnableEventHandling();


                                        /********************************************************************************/

                                        /* Action Units */

                                        /* Usage: ActionUnitA( MatchTCR1 | MatchTCR2,
                                                               CaptureTCR1 | CaptureTCR2,
                                                               GreaterEqual | EqualOnly ); */

                                        #define ActionUnitA( match, capture, compare)   (act_unitA=match##capture##compare)
                                        #define ActionUnitB( match, capture, compare)   (act_unitB=match##capture##compare)

                                        #define MatchTCR1    Mtcr1_
                                        #define MatchTCR2    Mtcr2_
                                        #define CaptureTCR1  Ctcr1_
                                        #define CaptureTCR2  Ctcr2_
                                        #define GreaterEqual ge
                                        #define EqualOnly    eq

                                        /* SYNONYMS */
                                        /* Action Unit A, Time Bases for match and capture */
                                        #define TimeBaseAMatchTcr1CaptureTcr1GreaterEqual()      channel.TBSA = Mtcr1_Ctcr1_ge
                                        #define TimeBaseAMatchTcr2CaptureTcr1GreaterEqual()      channel.TBSA = Mtcr2_Ctcr1_ge
                                        #define TimeBaseAMatchTcr1CaptureTcr2GreaterEqual()      channel.TBSA = Mtcr1_Ctcr2_ge
                                        #define TimeBaseAMatchTcr2CaptureTcr2GreaterEqual()      channel.TBSA = Mtcr2_Ctcr2_ge
                                        #define TimeBaseAMatchTcr1CaptureTcr1ExactlyEqual()      channel.TBSA = Mtcr1_Ctcr1_eq
                                        #define TimeBaseAMatchTcr2CaptureTcr1ExactlyEqual()      channel.TBSA = Mtcr2_Ctcr1_eq
                                        #define TimeBaseAMatchTcr1CaptureTcr2ExactlyEqual()      channel.TBSA = Mtcr1_Ctcr2_eq
                                        #define TimeBaseAMatchTcr2CaptureTcr2ExactlyEqual()      channel.TBSA = Mtcr2_Ctcr2_eq


ETPU "C" COMPILER 1.0.7.85                                              PAGE 150


                                        /* Action Unit B, Time Bases for match and capture */
                                        #define TimeBaseBMatchTcr1CaptureTcr1GreaterEqual()      channel.TBSB = Mtcr1_Ctcr1_ge
                                        #define TimeBaseBMatchTcr2CaptureTcr1GreaterEqual()      channel.TBSB = Mtcr2_Ctcr1_ge
                                        #define TimeBaseBMatchTcr1CaptureTcr2GreaterEqual()      channel.TBSB = Mtcr1_Ctcr2_ge
                                        #define TimeBaseBMatchTcr2CaptureTcr2GreaterEqual()      channel.TBSB = Mtcr2_Ctcr2_ge
                                        #define TimeBaseBMatchTcr1CaptureTcr1ExactlyEqual()      channel.TBSB = Mtcr1_Ctcr1_eq
                                        #define TimeBaseBMatchTcr2CaptureTcr1ExactlyEqual()      channel.TBSB = Mtcr2_Ctcr1_eq
                                        #define TimeBaseBMatchTcr1CaptureTcr2ExactlyEqual()      channel.TBSB = Mtcr1_Ctcr2_eq
                                        #define TimeBaseBMatchTcr2CaptureTcr2ExactlyEqual()      channel.TBSB = Mtcr2_Ctcr2_eq



                                        /********************************************************************************/

                                        /* Pin output buffer */

                                        #define EnableOutputBuffer()           (channel.TBSA = enable_output_buffer)
                                        #define DisableOutputBuffer()          (channel.TBSA = disable_output_buffer)


                                        /********************************************************************************/

                                        /* Pin control */

                                        /* Pin() definitions */
                                        #define SetHigh pin_high
                                        #define SetLow  pin_low
                                        #define PerPacA pin_opacA
                                        #define PerPacB pin_opacB

                                        /* Set Output Pin
                                           Usage: Pin( SetHigh | SetLow | PerPacA | PerPacB ); */
                                        #define Pin( state )          (channel.PIN=state)

                                        /* Immediate output pin */
                                        #define set_pin_per_opacA  pin_opacA
                                        #define set_pin_per_opacB  pin_opacB
                                        #define force_pin_high     pin_high
                                        #define force_pin_low      pin_low

                                        #define SetPinHigh()          (channel.PIN=force_pin_high)
                                        #define SetPinLow()           (channel.PIN=force_pin_low)
                                        #define SetPinPerPacA()       (channel.PIN=set_pin_per_opacA)
                                        #define SetPinPerPacB()       (channel.PIN=set_pin_per_opacB)

                                        /* Reading the pin states: branch conditions */

                                        #define SampledInputPin            channel.PSS
                                        #define IsLatchedInputPin()        (channel.PSS==1)
                                        #define IsInputPinHigh()           (channel.PSS==1)

                                        #define CurrentInputPin            channel.PSTI
                                        #define IsCurrentInputPin()        (channel.PSTI==1)

                                        #define CurrentOutputPin           channel.PSTO

ETPU "C" COMPILER 1.0.7.85                                              PAGE 151


                                        #define IsCurrentOutputPin()       (channel.PSTO==1)

                                        /* SYNONYMS */
                                        #define IsSampledInputPinHigh()    (channel.PSS==1)
                                        #define IsLatchedInputPinHigh()    (channel.PSS==1)
                                        #define IsCurrentInputPinHigh()    (channel.PSTI==1)
                                        #define IsCurrentOutputPinHigh()   (channel.PSTO==1)



                                        /********************************************************************************/

                                        /* Output Pin Action */

                                        #define NoChange    match_no_change
                                        #define PinHigh     match_high
                                        #define PinLow      match_low
                                        #define PinToggle   match_toggle

                                        /* Usage: OnMatchA( NoChange | PinHigh | PinLow | PinToggle ); */
                                        #define OnMatchA(action)      (opacA = action)
                                        #define OnMatchB(action)      (opacB = action)

                                        /* SYNONYMS */
                                        /* Action Unit A, Output Pin Actions */
                                        #define OnMatchAPinNoChange()      channel.OPACA = match_no_change
                                        #define OnMatchAPinHigh()          channel.OPACA = match_high
                                        #define OnMatchAPinLow()           channel.OPACA = match_low
                                        #define OnMatchAPinToggle()        channel.OPACA = match_toggle
                                        #define OnInputActionAPinLow()     channel.OPACA = transition_low
                                        #define OnInputActionAPinHigh()    channel.OPACA = transition_high
                                        #define OnInputActionAPinToggle()  channel.OPACA = transition_toggle

                                        /* Action Unit B, Output Pin Actions */
                                        #define OnMatchBPinNoChange()      channel.OPACB = match_no_change
                                        #define OnMatchBPinHigh()          channel.OPACB = match_high
                                        #define OnMatchBPinLow()           channel.OPACB = match_low
                                        #define OnMatchBPinToggle()        channel.OPACB = match_toggle
                                        #define OnInputActionBPinLow()     channel.OPACB = transition_low
                                        #define OnInputActionBPinHigh()    channel.OPACB = transition_high
                                        #define OnInputActionBPinToggle()  channel.OPACB = transition_toggle


                                        /********************************************************************************/

                                        /* Input Pin Action */

                                        #define NoDetect  no_detect
                                        #define LowHigh   low_high
                                        #define HighLow   high_low
                                        #define AnyTrans  any_trans

                                        /* Usage: DetectTransA( no_detect | low_high | high_low | any_trans | ...); */
                                        #define OnTransA(action)     (ipacA = action)
                                        #define OnTransB(action)     (ipacB = action)

ETPU "C" COMPILER 1.0.7.85                                              PAGE 152



                                        /* SYNONYMS */
                                        /* Action Unit A, Input Pin Edge Detection */
                                        #define DetectADisable()        channel.IPACA = no_detect
                                        #define DetectARisingEdge()     channel.IPACA = low_high
                                        #define DetectAFallingEdge()    channel.IPACA = high_low
                                        #define DetectAAnyEdge()        channel.IPACA = any_trans
                                        #define DetectALowOnMatchA()    channel.IPACA = detect_input_0_on_match
                                        #define DetectAHighOnMatchA()   channel.IPACA = detect_input_1_on_match

                                        /* Action Unit B, Input Pin Edge Detection */
                                        #define DetectBDisable()        channel.IPACB = no_detect
                                        #define DetectBRisingEdge()     channel.IPACB = low_high
                                        #define DetectBFallingEdge()    channel.IPACB = high_low
                                        #define DetectBAnyEdge()        channel.IPACB = any_trans
                                        #define DetectBLowOnMatchA()    channel.IPACB = detect_input_0_on_match
                                        #define DetectBHighOnMatchA()   channel.IPACB = detect_input_1_on_match


                                        /********************************************************************************/

                                        /* Intrinsics synonyms */

                                        /* Matches in Threads */
                                        #define DisableMatchesInThread()    match_disable()
                                        #define EnableMatchesInThread()     match_enable()



                                        #endif /* __ETPUC_COMMON_H */

                                        #ifdef TOOTHGEN_FUNCTION_NUMBER
0004                                    #pragma ETPU_function TOOTHGEN, alternate @ TOOTHGEN_FUNCTION_NUMBER;
                                        #else
                                        #pragma ETPU_function TOOTHGEN, alternate;
                                        #endif

                                        /*******************************************************************************
                                        *  Includes.
                                        *******************************************************************************/

                                        /*******************************************************************************
                                            Definitions.
                                        *******************************************************************************/

                                        /* HSR values.                  */
00000007                                #define TOOTHGEN_HSR_INIT                7

                                        /* FM option                    */
00000000                                #define TOOTHGEN_FM0_CRANK_CHAN          0
00000001                                #define TOOTHGEN_FM0_CAM_CHAN            1

                                        /* Errors - errorSwitch bits */
00000001                                #define TOOTHGEN_ERROR_MISSING_HIGHTIME  1
00000002                                #define TOOTHGEN_ERROR_MISSING_LOWTIME   2

ETPU "C" COMPILER 1.0.7.85                                              PAGE 153


00000004                                #define TOOTHGEN_ERROR_CRANKNOISE        4
00000008                                #define TOOTHGEN_ERROR_MISSING_CAM       8
00000010                                #define TOOTHGEN_ERROR_CAMNOISE         16
00000020                                #define TOOTHGEN_ERROR_TOOTH_IN_GAP     32

                                        /*******************************************************************************
                                        * Channel Flag usage:
                                        * Flag0 is used to define which tooth edge should occur next. Flag0 is set
                                        * during high-time.
                                        * Flag1 is set during crank noise pulse.
                                        *******************************************************************************/


                                        /*******************************************************************************
                                        * NAME: TOOTHGEN
                                        *
                                        * DESCRIPTION: Tooth Generator - generates engine system input signals - crank
                                        *              and cam.
                                        *
                                        * FUNCTION PARAMETERS:
                                        *  teethPerRev        - Number of teeth in a 360 deg cycle, counting the missing
                                        *                       teeth.
                                        *  teethMissing       - Number of missing teeth in the gap.
                                        *  toothDutyCycle     - Fraction of toothPeriod when the tooth is high.
                                        *  toothPeriod        - TCR1 count between tooth rising edges.
                                        *  toothPeriodNew     - Target tooth period for an acceleration or deceleration.
                                        *  accelRate          - The FRACTION of the difference between the toothPeriod
                                        *                       and the toothPeriodNew that is added to the toothPeriod
                                        *                       at each tooth.
                                        *                       This implements a rough exponential change of speed.
                                        *  camStart           - The tooth count at which the cam signal goes high.
                                        *  camStop            - The tooth count at which the cam signal goes low.
                                        *  camChannel         - The channel producing the cam signal.
                                        *  toothNumber        - Initial or current tooth number.
                                        *  errorSwitch        - On/Off switch of 5 error types. Enable to separately
                                        *                       switch on or off each type of crank or cam error.
                                        *  missingTooth       - Number of tooth where the missing high-time or missing
                                        *                       low-time error appears.
                                        *  missingTooth2      - Number of second tooth where the missing high-time or
                                        *                       missing low-time error appears.
                                        *  noiseTooth         - Number of tooth where the crank noise appears.
                                        *  noisePulseShift    - TCR1 count between noiseTooth edge and noise pulse edge.
                                        *                       Applies to crank noise.
                                        *  noisePulseWidth    - Crank noise pulse width as TCR1 count.
                                        *  camNoiseTooth      - Number of tooth where the cam noise appears.
                                        *  camNoisePulseShift - TCR1 count between camNoiseTooth edge and noise pulse
                                        *                       edge. Applies to cam noise.
                                        *  camNoisePulseWidth - Cam noise pulse width as TCR1 count.
                                        *******************************************************************************/
                                        void TOOTHGEN( unsigned int24        teethPerRev,
                                                       unsigned int8         teethMissing,
                                                       unsigned fract24      toothDutyCycle,
                                                       unsigned int24        toothPeriod,
                                                       unsigned int24        toothPeriodNew,
                                                       unsigned fract24      accelRate,

ETPU "C" COMPILER 1.0.7.85                                              PAGE 154


                                                       unsigned int24        camStart,
                                                       unsigned int24        camStop,
                                                       unsigned int8         camChannel,
                                                       unsigned int24        toothNumber,
                                                       unsigned int8         errorSwitch,
                                                       unsigned int24        missingTooth,
                                                       unsigned int24        missingTooth2,
                                                       unsigned int24        noiseTooth,
                                                       unsigned int24        noisePulseShift,
                                                       unsigned int24        noisePulseWidth,
                                                       unsigned int24        camNoiseTooth,
                                                       unsigned int24        camNoisePulseShift,
                                                       unsigned int24        camNoisePulseWidth
                                                     )
0001 0000 0005 0009 000D 0011 0015 0019     {
0004 001D 0008 0021 0025 0029 002D 0031          
0035 0039 003D                          
0041                                       static unsigned int24 edgeTime;     /* TCR1 time crank signal rising edge. */
00BA                                              unsigned int24 temp;

                                        /*******************************************************************************
                                        * THREAD NAME: INIT
                                        * DESCRIPTION: Initialize the channel to run the ToothGen function.
                                        *              Start the signal generation.
                                        *              1. Disable matches in thread in case there are any previous
                                        *                 pending matches. This could happen if the channel was
                                        *                 running another function before this one.
                                        *              2. Clear flag1 - out of a noise pulse.
                                        *              3. Set pin low.
                                        *              4. Clear latches.
                                        *              5. Configure pin actions to no_detect on transition.
                                        *              6. Configure channel to use TCR1 clock, compare greater-equal.
                                        *              7. Select Either Match Non-Blocking Single Transition mode.
                                        *              8. Enable match and transition event handling.
                                        *              9. Set actual TCR1 count to edgeTime.
                                        *             10. Go to CRANK SECOND EDGE in orde to schedule tooth rising edge.
                                        *******************************************************************************/
                                           if (hsr == TOOTHGEN_HSR_INIT)
                                           {
                                        TOOTH_GEN_Init:
                                              DisableMatchesInThread();

                                              EnableOutputBuffer(); /* Needed for Coldfire products */
                                              OnTransA(NoDetect);
                                              OnTransB(NoDetect );
1780 5818FFFF   chan ipaca = no_detect,         
                    ipacb = no_detect,         
                    tbsa = obe_on.         
1784                                          ActionUnitA(MatchTCR1, CaptureTCR1, GreaterEqual);
                                              EitherMatchNonBlockingSingleTransition();
                                              ClearAllLatches();
                                              Pin(SetLow);
1784 4FE0F4A4   chan pin = low,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,em_nb_st,clr_lsr,         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 155


                    clr_mrla,clr_mrlb,         
                    clr_tdl.            
1788                                          Clear(flag1);
                                              EnableEventHandling();

1788 F3E8BCDF   if fm0==1 jump 1798,                      if (fm0 == TOOTHGEN_FM0_CRANK_CHAN)
                    noflush.            
178C FF3AFCFB   chan mtd = enable_mtsr;    
                    Clear flag1.        
1790                                          {
1790 BFFC7A90   alu p = tcr1 ,ccs;               edgeTime = tcr1;
                    ram PRAM65 = p23_0.         
1794 F7C0CB1F   jump 1960,flush.                         goto TOOTH_GEN_CRANK_SEC_EDGE;
                                              }
                                              else
                                              {
                                                 Pin(SetHigh);
1798 7FFFFBFE   chan pin = high.         
179C                                          }
179C 6FFFFFFF   end.                       }
010A 05 E0        04 A05 P01 MD 1780  HSR 6/7   lsr x  m1 x  m2 x  pin x  flag1 x  flag0 x                             
                                         
0000             Thread Local RAM size                                   
                                        /*******************************************************************************
                                        * THREAD NAME: NOISE FISRT EDGE
                                        * DESCRIPTION: Set Flag1 and schedule second noise edge.
                                        *              1. Disable matches in thread in case there are any previous
                                        *                 pending matches. This could happen if the channel was
                                        *                 running another function before this one.
                                        *              2. Set flag1 - noise falling edge follows.
                                        *              3. On crank channel (FM0 = TOOTHGEN_FM0_CRANK_CHAN)
                                        *                   Schedule Match B at ERT_B + noisePulseWidth
                                        *                   PAC_B = toggle
                                        *                 On cam channel  FM0 = TOOTHGEN_FM0_CAM_CHAN)
                                        *                   Schedule Match B at ERT_B + camNoisePulseWidth
                                        *                   PAC_B = toggle
                                        *******************************************************************************/
                                           else if ((m2==1) && (flag1==0))
                                             {
                                        TOOTH_GEN_NoiseFirstEdge:
                                              DisableMatchesInThread();

                                              Set(flag1);
17A0 F3E8BDFF   if fm0==1 jump 17BC,                      if (fm0 == TOOTHGEN_FM0_CRANK_CHAN)
                    noflush.            
17A4 FFFBFCF9   Set flag1.              
17A8                                          {
                                                 SetupMatch_B(GetCapRegB() + noisePulseWidth, Mtcr1_Ctcr1_ge,
17A8 BFEFFB8C   ram p23_0 = PRAM49.                           PinToggle);
17AC 3B133FF4   alu ertb = ertb + p ,ccs         
                    .                   
17B0 4F7F0F9F   chan opacb = toggle,         
                    tbsb = mtcr1_ctcr1_ge         
                    ,write_ertb,clr_mrlb         
                    .                   

ETPU "C" COMPILER 1.0.7.85                                              PAGE 156


                                              }
17B4 F7E0BE7F   jump 17CC,noflush.                      else
17B8 FF3FFCFB   chan mtd = enable_mtsr.         
                                              {
                                                 SetupMatch_B(GetCapRegB() + camNoisePulseWidth, Mtcr1_Ctcr1_ge,
17BC BFEFFB8F   ram p23_0 = PRAM61.                           PinToggle);
17C0 3B133FF4   alu ertb = ertb + p ,ccs         
                    .                   
17C4 4F7F0F9F   chan opacb = toggle,         
                    tbsb = mtcr1_ctcr1_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
17C8 FF3FFCFB   chan mtd = enable_mtsr.         
17CC                                          }
17CC 6FFFFFFF   end.                         }
0120 05 E8        04 A10 P01 MD 17A0  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 0  flag0 0                             
0122 05 E8        04 A11 P01 MD 17A0  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 0  flag0 1                             
0128 05 E8        04 A14 P01 MD 17A0  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 0  flag0 0                             
012A 05 E8        04 A15 P01 MD 17A0  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 0  flag0 1                             
0130 05 E8        04 A18 P01 MD 17A0  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 0  flag0 0                             
0132 05 E8        04 A19 P01 MD 17A0  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 0  flag0 1                             
0138 05 E8        04 A1C P01 MD 17A0  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 0  flag0 0                             
013A 05 E8        04 A1D P01 MD 17A0  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 0  flag0 1                             
                                         
0000             Thread Local RAM size                                   
                                        /*******************************************************************************
                                        * THREAD NAME: NOISE SECOND EDGE
                                        * DESCRIPTION: Clear Flag1 and clear match.
                                        *              1. Disable matches in thread in case there are any previous
                                        *                 pending matches. This could happen if the channel was
                                        *                 running another function before this one.
                                        *              2. Clear flag1 - noise raising edge follows.
                                        *              3. Clear match B.
                                        *******************************************************************************/
                                           else if ((m2==1) && (flag1==1))
                                             {
                                        TOOTH_GEN_NoiseSecondEdge:
                                              DisableMatchesInThread();

                                              Clear(flag1);
                                              ClearMatchBLatch();
17D0 F7FADCFB   chan clr_mrlb;               }
                    Clear flag1;end.         
0124 05 F4        04 A12 P01 MD 17D0  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 1  flag0 0                             
0126 05 F4        04 A13 P01 MD 17D0  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 1  flag0 1                             
012C 05 F4        04 A16 P01 MD 17D0  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 1  flag0 0                             
012E 05 F4        04 A17 P01 MD 17D0  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 1  flag0 1                             
0134 05 F4        04 A1A P01 MD 17D0  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 1  flag0 0                             
0136 05 F4        04 A1B P01 MD 17D0  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 1  flag0 1                             
013C 05 F4        04 A1E P01 MD 17D0  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 1  flag0 0                             
013E 05 F4        04 A1F P01 MD 17D0  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 1  flag0 1                             
                                         
0000             Thread Local RAM size                                   
                                        /*******************************************************************************
                                        * THREAD NAME: CRANK FISRT EDGE

ETPU "C" COMPILER 1.0.7.85                                              PAGE 157


                                        * DESCRIPTION: Increment toothNumber, schedule tooth falling edge, and noise
                                        *              pulse if any.
                                        *              1. Disable matches in thread in case there are any previous
                                        *                 pending matches. This could happen if the channel was
                                        *                 running another function before this one.
                                        *              2. Set flag0 - tooth falling edge follows.
                                        *              3. Store ERT_A to edgeTime
                                        *              4. Schedule Match A at ERT_A + toothDutyCycle * toothPeriod,
                                        *                 PAC_A = high-low
                                        *              6. If (errorSwitch & missing low-time) &&
                                        *                    ((toothNumber+1 == missingTooth)
                                        *                     || (toothNumber+1 == missingTooth))
                                        *                   PAC_A = no_change
                                        *              7. If (errorSwitch & crank noise) && (toothNumber == noiseTooth)
                                        *                   Schedule Match B at edgeTime + noisePulseShift,
                                        *                   PAC_B = toggle
                                        *              8. If (errorSwitch & cam noise) && (toothNumber == camNoiseTooth)
                                        *                   Switch to camChannel
                                        *                   Schedule Match B at edgeTime + camNoisePulseShift,
                                        *                   PAC_B = toggle
                                        *              7. If (~(errorSwitch & missing cam) && (toothNumber == camStart))
                                        *                   Switch to camChannel
                                        *                   Set pin high
                                        *                 Else If (toothNumber == camStop)
                                        *                   Switch to camChannel
                                        *                   Set pin low
                                        *******************************************************************************/
                                           else if ((m1==1) && (flag0==0))
                                             {
                                        TOOTH_GEN_CrankFirstEdge:
                                              DisableMatchesInThread();

17D4 BFFE7A90   alu p = erta ,ccs;            edgeTime = GetCapRegA();
                    ram PRAM65 = p23_0.         
                                        #ifdef __ETEC__
                                              // for ASH WARE, per the TR18037 specification, in order to get the integer
                                              // portion of an int*fract multiply, the library function mulir/muliur must
                                              // be used
                                              SetupMatch_A(GetCapRegA() + muliur(toothPeriod, toothDutyCycle),
                                                           Mtcr1_Ctcr1_ge, PinLow);
                                        #else
                                              SetupMatch_A(GetCapRegA() + toothDutyCycle*toothPeriod,
17D8 BFEFFB81   ram p23_0 = PRAM5.                         Mtcr1_Ctcr1_ge, PinLow);
17DC BFE80A82   alu a = p ,ccs;         
                    ram p23_0 = PRAM9.         
17E0 3B190FE9   mdu a multu p ,ccs.         
17E4 F348BF3F   if mb==1 jump 17E4,flush         
                    .                   
17E8 3BF70FB4   alu a = mach ,ccs.         
17EC 3B3E2FF4   alu erta = erta + a ,ccs         
                    .                   
17F0 4AF0FE7F   chan opaca = low,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   

ETPU "C" COMPILER 1.0.7.85                                              PAGE 158


                                        #endif
                                              Set(flag0);

17F4 DF29FA87   ram p23_0 = PRAM29;           temp = toothNumber;
                    chan mtd = enable_mtsr         
                    ;Set flag0.         
17F8 3BF85FD4   alu d = p ,ccs.         
17FC BFEFFB80   ram p23_0 = PRAM1.            if (temp > teethPerRev)
1800 3814FFF4   alu nil = d - p ,ccs.          {
1804 F4C8C068   if ls jump 180C,flush;             temp -= teethPerRev;
                    ram p23_0 = PRAM1.         
                                              }

1808 38145FD4   alu d = d - p ,ccs.         
                                              if ((errorSwitch & TOOTHGEN_ERROR_MISSING_LOWTIME)
180C CFEFF882   ram p31_0 = PRAM8.                && ((temp == missingTooth) || (temp == missingTooth2)))
1810 F540C19F   if p_25==0 jump 1830,                      {
                    flush.              
1814 BFEFFB88   ram p23_0 = PRAM33.         
1818 3814FFF4   alu nil = d - p ,ccs.         
181C F0C8C17F   if z==1 jump 182C,flush.                
                                        
1820 BFEFFB89   ram p23_0 = PRAM37.         
1824 3814FFF4   alu nil = d - p ,ccs.         
1828 F0C0C19F   if z==0 jump 1830,flush.                
                                        
                                                 OnMatchA(NoChange);
                                              }
182C 48FFFFFF   chan opaca = no_change.         
                                              if ((errorSwitch & TOOTHGEN_ERROR_CRANKNOISE)
1830 CFEFF882   ram p31_0 = PRAM8.                && (temp == noiseTooth))
1834 F580C2DF   if p_26==0 jump 1858,                      {
                    flush.              
1838 BFEFFB8A   ram p23_0 = PRAM41.         
183C 3814FFF4   alu nil = d - p ,ccs.         
1840 F0C0C2DF   if z==0 jump 1858,flush.                
                                        
1844 BFEFFB90   ram p23_0 = PRAM65.              SetupMatch_B(edgeTime + noisePulseShift, Mtcr1_Ctcr1_ge, PinToggle);
1848 BFE80A8B   alu a = p ,ccs;         
                    ram p23_0 = PRAM45.         
184C 3B193FF4   alu ertb = a + p ,ccs.         
1850 4F7F0F9F   chan opacb = toggle,         
                    tbsb = mtcr1_ctcr1_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
                                              }
1854 FF3FFCFB   chan mtd = enable_mtsr.         
                                              if ((errorSwitch & TOOTHGEN_ERROR_CAMNOISE)
1858 CFEFF882   ram p31_0 = PRAM8.                && (toothNumber == camNoiseTooth))
185C F600C44F   if p_28==0 jump 1888,                      {
                    flush;              
                    ram p23_0 = PRAM29.         
1860 BFE80A8D   alu a = p ,ccs;         
                    ram p23_0 = PRAM53.         
1864 3819FFF4   alu nil = a - p ,ccs.         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 159


1868 F0C0C45F   if z==0 jump 1888,flush.                
                                        
186C CFEFF881   ram p31_0 = PRAM4.               SwitchToChannel(camChannel);
1870 3BF24FD4   alu chan = p31_24 ,ccs.         
1874 BFEFFB90   ram p23_0 = PRAM65.              SetupMatch_B(edgeTime + camNoisePulseShift, Mtcr1_Ctcr1_ge, PinToggle);
1878 BFE80A8E   alu a = p ,ccs;         
                    ram p23_0 = PRAM57.         
187C 3B193FF4   alu ertb = a + p ,ccs.         
1880 4F7F0F9F   chan opacb = toggle,         
                    tbsb = mtcr1_ctcr1_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
                                              }

                                              //if (((errorSwitch & TOOTHGEN_ERROR_MISSING_CAM) == 0)
                                              //    && (toothNumber == camStart % 120))
1884 FF3FFCFB   chan mtd = enable_mtsr.         
1888 BFEFFB85   ram p23_0 = PRAM21.           if (toothNumber == camStart % 120)
188C 3BF80FF4   alu a = p ,ccs.               {
1890 09E9F782   mdu a div #0x78,ccs.         
1894 F348C4BF   if mb==1 jump 1894,flush         
                    .                   
1898 BFC70A87   alu a = mach ,ccs;         
                    ram p23_0 = PRAM29.         
189C 3819FFF4   alu nil = a - p ,ccs.         
18A0 F0C0C61F   if z==0 jump 18C0,flush.         
                                        
18A4 1C5F0F9E   alu a = #0x14.                   camStart += 20;
18A8 BFEFFB85   ram p23_0 = PRAM21.         
18AC BF197A85   alu p = a + p ,ccs;         
                    ram PRAM21 = p23_0.         
18B0 CFEFF881   ram p31_0 = PRAM4.               SwitchToChannel(camChannel);
18B4 3BF24FD4   alu chan = p31_24 ,ccs.         
                                                 Pin(SetLow);
                                              }
18B8 F7E0CAFF   jump 195C,noflush.                      else if (toothNumber == camStop % 120)
18BC 7FFFFDFE   chan pin = low.         
18C0 BFEFFB86   ram p23_0 = PRAM25.           {
18C4 3BF80FF4   alu a = p ,ccs.         
18C8 09E9F782   mdu a div #0x78,ccs.         
18CC F348C67F   if mb==1 jump 18CC,flush         
                    .                   
18D0 BFC70A87   alu a = mach ,ccs;         
                    ram p23_0 = PRAM29.         
18D4 3819FFF4   alu nil = a - p ,ccs.         
18D8 F0C0C7DF   if z==0 jump 18F8,flush.         
                                        
18DC 1C5F0F9E   alu a = #0x14.                   camStop += 20;
18E0 BFEFFB86   ram p23_0 = PRAM25.         
18E4 BF197A86   alu p = a + p ,ccs;         
                    ram PRAM25 = p23_0.         
18E8 CFEFF881   ram p31_0 = PRAM4.               SwitchToChannel(camChannel);
18EC 3BF24FD4   alu chan = p31_24 ,ccs.         
                                                 Pin(SetHigh);
                                              }

ETPU "C" COMPILER 1.0.7.85                                              PAGE 160



18F0 F7E0CAFF   jump 195C,noflush.                      else if (toothNumber == camStart % 20 + 5)
18F4 7FFFFBFE   chan pin = high.         
18F8 BFEFFB85   ram p23_0 = PRAM21.           {
18FC 3BF80FF4   alu a = p ,ccs.         
1900 0859F782   mdu a div #0x14,ccs.         
1904 F348C83F   if mb==1 jump 1904,flush         
                    .                   
1908 3BF70FB4   alu a = mach ,ccs.         
190C 181907A2   alu a = a + #0x05,ccs.         
1910 BFEFFB87   ram p23_0 = PRAM29.         
1914 3819FFF4   alu nil = a - p ,ccs.         
1918 F0C0C97F   if z==0 jump 192C,flush.         
                                        
191C CFEFF881   ram p31_0 = PRAM4.                SwitchToChannel(camChannel);
1920 3BF24FD4   alu chan = p31_24 ,ccs.         
                                                  Pin(SetLow);
                                              }
1924 F7E0CAFF   jump 195C,noflush.                      else if (toothNumber == camStop % 20 + 5)
1928 7FFFFDFE   chan pin = low.         
192C BFEFFB86   ram p23_0 = PRAM25.           {
1930 3BF80FF4   alu a = p ,ccs.         
1934 0859F782   mdu a div #0x14,ccs.         
1938 F348C9DF   if mb==1 jump 1938,flush         
                    .                   
193C 3BF70FB4   alu a = mach ,ccs.         
1940 181907A2   alu a = a + #0x05,ccs.         
1944 BFEFFB87   ram p23_0 = PRAM29.         
1948 3819FFF4   alu nil = a - p ,ccs.         
194C F0C0CAFF   if z==0 jump 195C,flush.         
                                        
1950 CFEFF881   ram p31_0 = PRAM4.                SwitchToChannel(camChannel);
1954 3BF24FD4   alu chan = p31_24 ,ccs.         
                                                  Pin(SetHigh);
                                              }
1958 7FFFFBFE   chan pin = high.         
195C 6FFFFFFF   end.                         }
0110 05 F5        04 A08 P01 MD 17D4  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 0  flag0 0                             
0114 05 F5        04 A0A P01 MD 17D4  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 1  flag0 0                             
0118 05 F5        04 A0C P01 MD 17D4  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 0  flag0 0                             
011C 05 F5        04 A0E P01 MD 17D4  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 1  flag0 0                             
                                         
0000             Thread Local RAM size                                   
                                        /*******************************************************************************
                                        * THREAD NAME: CRANK SECOND EDGE
                                        * DESCRIPTION: Schedule tooth rising edge if not in gap, calculate toothPeriod,
                                        *              generate cam pulse.
                                        *              1. Disable matches in thread in case there are any previous
                                        *                 pending matches. This could happen if the channel was
                                        *                 running another function before this one.
                                        *              2. Clear flag0 - tooth rising edge follows.
                                        *              3. Schedule Match A at edgeTime + toothPeriod,  PAC_A = low-high
                                        *              5. Increment toothNumber
                                        *                 If (toothNumber > 2*teethPerRev)
                                        *                   toothNumber = 1

ETPU "C" COMPILER 1.0.7.85                                              PAGE 161


                                        *              4. If "in gap"
                                        *                   PAC_A = no_change
                                        *              5. If (errorSwitch & missing high-time) &&
                                        *                    ((toothNumber+1 == missingTooth)
                                        *                     || (toothNumber+1 == missingTooth))
                                        *                   PAC_A = no_change
                                        *              6. Calculate acceleration/deceleration towards newToothPeriod.
                                        *******************************************************************************/
                                           else if ((m1==1) && (flag0==1))
                                           {
                                        TOOTH_GEN_CrankSecondEdge:
                                              DisableMatchesInThread();
                                        TOOTH_GEN_CRANK_SEC_EDGE:
1960 BFEFFB90   ram p23_0 = PRAM65.           SetupMatch_A(edgeTime + toothPeriod, Mtcr1_Ctcr1_ge, PinHigh);
1964 BFE80A82   alu a = p ,ccs;         
                    ram p23_0 = PRAM9.         
1968 3B192FF4   alu erta = a + p ,ccs.         
196C 49F0FE7F   chan opaca = high,         
                    tbsa = mtcr1_ctcr1_ge         
                    ,write_erta,clr_mrla         
                    .                   
                                              Clear(flag0);

1970 DF28FA87   ram p23_0 = PRAM29;           toothNumber++;
                    chan mtd = enable_mtsr         
                    ;Clear flag0.         
1974 BDF87A87   alu p = p + 1 ,ccs;     
                    ram PRAM29 = p23_0.    
1978 BFEFFB80   ram p23_0 = PRAM1.            if (2*teethPerRev < toothNumber)
197C B3E80A87   alu a = p <<1 ,ccs;           {
                    ram p23_0 = PRAM29.         
1980 3819FFF4   alu nil = a - p ,ccs.         
1984 F480CC7F   if ge jump 198C,flush.         
1988                                             toothNumber = 1;
                                              }

1988 BDFF7B87   alu p = 1 ;             
                    ram PRAM29 = p23_0.         
198C BFEFFB87   ram p23_0 = PRAM29.           temp = toothNumber;
1990 3BF85FD4   alu d = p ,ccs.         
1994 BFEFFB80   ram p23_0 = PRAM1.            if (temp > teethPerRev)
1998 3814FFF4   alu nil = d - p ,ccs.          {
199C F4C8CD28   if ls jump 19A4,flush;             temp -= teethPerRev;
                    ram p23_0 = PRAM1.         
                                              }
19A0 38145FD4   alu d = d - p ,ccs.         
19A4 CFEFF882   ram p31_0 = PRAM8.            if (errorSwitch & TOOTHGEN_ERROR_TOOTH_IN_GAP)
19A8 F640CE7F   if p_29==0 jump 19CC,         {
19A8 F640CE7F   if p_29==0 jump 19CC,    
                    flush.              
19AC CFEFF880   ram p31_0 = PRAM0.               if ((temp + teethMissing - 1) > teethPerRev)
19B0 3BF24FF4   alu diob = p31_24 ,ccs.    
19B4 3B740FF4   alu a = d + diob ,ccs.             {
19B8 BEE90A80   alu a = a -1 ,ccs;         
                    ram p23_0 = PRAM1.         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 162


19BC 3819FFF4   alu nil = a - p ,ccs.         
19C0 F4C8CF3F   if ls jump 19E4,flush.         
19C4                                                OnMatchA(NoChange);
                                                 }
19C4 48FFFFFF   chan opaca = no_change.         
19C8                                          }
19C8 F7C0CF3F   jump 19E4,flush.                      else
                                              {
19CC CFEFF880   ram p31_0 = PRAM0.               if ((temp + teethMissing) > teethPerRev)
19D0 3BF24FF4   alu diob = p31_24 ,ccs.    
19D4 BF640A80   alu a = d + diob ,ccs;             {
                    ram p23_0 = PRAM1.         
19D8 3819FFF4   alu nil = a - p ,ccs.         
19DC F4C8CF3F   if ls jump 19E4,flush.         
19E0                                                OnMatchA(NoChange);
                                                 }
19E0 48FFFFFF   chan opaca = no_change.         
19E4                                          }
                                              if ((errorSwitch & TOOTHGEN_ERROR_MISSING_HIGHTIME) 
19E4 CFEFF882   ram p31_0 = PRAM8.                && ((temp == missingTooth) || (temp == missingTooth2)))
19E8 F500D05F   if p_24==0 jump 1A08,                      {
                    flush.              
19EC BFEFFB88   ram p23_0 = PRAM33.         
19F0 3814FFF4   alu nil = d - p ,ccs.         
19F4 F0C8D03F   if z==1 jump 1A04,flush.                
                                        
19F8 BFEFFB89   ram p23_0 = PRAM37.         
19FC 3814FFF4   alu nil = d - p ,ccs.         
1A00 F0C0D05F   if z==0 jump 1A08,flush.                
                                        
                                                 OnMatchA(NoChange);
                                              }

1A04 48FFFFFF   chan opaca = no_change.         
1A08 BFEFFB82   ram p23_0 = PRAM9.            if (toothPeriod > toothPeriodNew)
1A0C BFE80A83   alu a = p ,ccs;         
                    ram p23_0 = PRAM13.    
1A10 3819FFF4   alu nil = a - p ,ccs.          {
                                        #ifdef __ETEC__
                                                 // for ASH WARE, per the TR18037 specification, in order to get the integer
                                                 // portion of an int*fract multiply, the library function mulir/muliur must
                                                 // be used
                                                 toothPeriod -= muliur((toothPeriod - toothPeriodNew), accelRate) + 1;
                                        #else
1A14 F4C8D1CA   if ls jump 1A38,flush;             toothPeriod -= accelRate * (toothPeriod - toothPeriodNew) + 1;
                    ram p23_0 = PRAM9.         
1A18 BFE80A83   alu a = p ,ccs;         
                    ram p23_0 = PRAM13.         
1A1C BC090A84   alu a = a - p ,ccs;         
                    ram p23_0 = PRAM17.         
1A20 3B190FE9   mdu a multu p ,ccs.         
1A24 F348D13F   if mb==1 jump 1A24,flush         
                    .                   
1A28 39F70FB4   alu a = mach + 1 ,ccs.         
1A2C BC2F0A82   alu a = 0 - a ,ccs;         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 163


                    ram p23_0 = PRAM9.         
                                        #endif
                                              }
1A30 F7E0D31F   jump 1A60,noflush.                      else if (toothPeriodNew > toothPeriod)
1A34 BF197A82   alu p = a + p ,ccs;         
                    ram PRAM9 = p23_0.         
1A38 BFEFFB83   ram p23_0 = PRAM13.           {
1A3C BFE80A82   alu a = p ,ccs;         
                    ram p23_0 = PRAM9.         
1A40 3819FFF4   alu nil = a - p ,ccs.         
                                        #ifdef __ETEC__
                                                 // for ASH WARE, per the TR18037 specification, in order to get the integer
                                                 // portion of an int*fract multiply, the library function mulir/muliur must
                                                 // be used
                                                 toothPeriod += muliur((toothPeriodNew - toothPeriod), accelRate) + 1;
                                        #else
1A44 F4C8D30B   if ls jump 1A60,flush;             toothPeriod += accelRate * (toothPeriodNew - toothPeriod) + 1;
                    ram p23_0 = PRAM13.         
1A48 BFE80A82   alu a = p ,ccs;         
                    ram p23_0 = PRAM9.         
1A4C BC090A84   alu a = a - p ,ccs;         
                    ram p23_0 = PRAM17.         
1A50 3B190FE9   mdu a multu p ,ccs.         
1A54 F348D2BF   if mb==1 jump 1A54,flush         
                    .                   
1A58 BDC70A82   alu a = mach + 1 ,ccs;         
                    ram p23_0 = PRAM9.         
                                        #endif
                                              }

1A5C BF197A82   alu p = a + p ,ccs;         
                    ram PRAM9 = p23_0.         
1A60 6FFFFFFF   end.                         }
0112 06 58        04 A09 P01 MD 1960  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 0  flag0 1                             
0116 06 58        04 A0B P01 MD 1960  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 1  flag0 1                             
011A 06 58        04 A0D P01 MD 1960  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 0  flag0 1                             
011E 06 58        04 A0F P01 MD 1960  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 1  flag0 1                             
                                         
0000             Thread Local RAM size                                   
                                        /*******************************************************************************
                                        * THREAD NAME: UNHANDLED_EVENTS
                                        *******************************************************************************/
                                           else
                                           {
                                        TOOTH_GEN_Error:
                                        #ifdef GLOBAL_ERROR_FUNC
1A64 FFC116BF   call 22D4,flush.                        Global_Error_Func();
                                        #else
                                                ClearAllLatches();
                                        #endif
1A68 6FFFFFFF   end.                       }
0100 C6 99        04 A00 P23 ME 1A64  HSR 2/3   lsr x  m1 x  m2 x  pin 0  flag1 x  flag0 0                             
0102 C6 99        04 A01 P23 ME 1A64  HSR 2/3   lsr x  m1 x  m2 x  pin 0  flag1 x  flag0 1                             
0104 C6 99        04 A02 P23 ME 1A64  HSR 2/3   lsr x  m1 x  m2 x  pin 1  flag1 x  flag0 0                             
0106 C6 99        04 A03 P23 ME 1A64  HSR 2/3   lsr x  m1 x  m2 x  pin 1  flag1 x  flag0 1                             

ETPU "C" COMPILER 1.0.7.85                                              PAGE 164


0108 C6 99        04 A04 P23 ME 1A64  HSR 1/4/5 lsr x  m1 x  m2 x  pin x  flag1 x  flag0 x                             
010C C6 99        04 A06 P23 ME 1A64  HSR 0     lsr 1  m1 0  m2 0  pin 0  flag1 x  flag0 x                             
010E C6 99        04 A07 P23 ME 1A64  HSR 0     lsr 1  m1 0  m2 0  pin 1  flag1 x  flag0 x                             
                                         
0000             Thread Local RAM size                                   
0000             Local RAM requirements for eTPU Function TOOTHGEN                                   
                                        }


                                        /*******************************************************************************
                                        *  Information exported to Host CPU program.
                                        *******************************************************************************/
1A6C                                    #pragma write h, (::ETPUfilename (etpu_toothgen_auto.h));
1A6C                                    #pragma write h, (/* WARNING this file is automatically generated DO NOT EDIT IT! */);
1A6C                                    #pragma write h, (/*                                                              */);
1A6C                                    #pragma write h, (/* This file provides an interface between eTPU code and CPU    */);
1A6C                                    #pragma write h, (/* code. All references to the ToothGen function should be made */);
1A6C                                    #pragma write h, (/* with information in this file. This allows only symbolic     */);
1A6C                                    #pragma write h, (/* information to be referenced which allows the eTPU code to be*/);
1A6C                                    #pragma write h, (/* optimized without effecting the CPU code.                    */);
1A6C                                    #pragma write h, (/****************************************************************/);
1A6C                                    #pragma write h, (#ifndef _ETPU_TOOTHGEN_AUTO_H_ );
1A6C                                    #pragma write h, (#define _ETPU_TOOTHGEN_AUTO_H_ );
1A6C                                    #pragma write h, ( );
1A6C                                    #pragma write h, (/****************************************************************);
1A6C                                    #pragma write h, (* Function Configuration Information. );
1A6C                                    #pragma write h, (****************************************************************/);
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_FUNCTION_NUMBER  ) ::ETPUfunctionnumber(TOOTHGEN) );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_TABLE_SELECT     )  ::ETPUentrytype(TOOTHGEN) );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_NUM_PARMS        )  ::ETPUram(TOOTHGEN) );
1A6C                                    #pragma write h, ( );
1A6C                                    #pragma write h, (/****************************************************************);
1A6C                                    #pragma write h, (* Host Service Request Definitions. );
1A6C                                    #pragma write h, (****************************************************************/);
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_HSR_INIT         )  TOOTHGEN_HSR_INIT );
1A6C                                    #pragma write h, ( );
1A6C                                    #pragma write h, (/****************************************************************);
1A6C                                    #pragma write h, (* TOOTHGEN eTPU Function Parameter Definitions. );
1A6C                                    #pragma write h, (****************************************************************/);
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_TEETHPERREV_OFFSET       ) ::ETPUlocation (TOOTHGEN, teethPerRev) );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_TEETHMISSING_OFFSET      ) ::ETPUlocation (TOOTHGEN, teethMissing) );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_TOOTHDUTYCYCLE_OFFSET    ) ::ETPUlocation (TOOTHGEN, toothDutyCycle) );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_TOOTHPERIOD_OFFSET       ) ::ETPUlocation (TOOTHGEN, toothPeriod) );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_TOOTHPERIODNEW_OFFSET    ) ::ETPUlocation (TOOTHGEN, toothPeriodNew) );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_ACCELRATE_OFFSET         ) ::ETPUlocation (TOOTHGEN, accelRate) );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_CAMSTART_OFFSET          ) ::ETPUlocation (TOOTHGEN, camStart) );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_CAMSTOP_OFFSET           ) ::ETPUlocation (TOOTHGEN, camStop) );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_CAMCHANNEL_OFFSET        ) ::ETPUlocation (TOOTHGEN, camChannel) );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_TOOTHNUMBER_OFFSET       ) ::ETPUlocation (TOOTHGEN, toothNumber) );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_ERRORSWITCH_OFFSET       ) ::ETPUlocation (TOOTHGEN, errorSwitch) );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_MISSINGTOOTH_OFFSET      ) ::ETPUlocation (TOOTHGEN, missingTooth) );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_MISSINGTOOTH2_OFFSET     ) ::ETPUlocation (TOOTHGEN, missingTooth2) );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_NOISETOOTH_OFFSET        ) ::ETPUlocation (TOOTHGEN, noiseTooth) );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_NOISEPULSESHIFT_OFFSET   ) ::ETPUlocation (TOOTHGEN, noisePulseShift) );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_NOISEPULSEWIDTH_OFFSET   ) ::ETPUlocation (TOOTHGEN, noisePulseWidth) );

ETPU "C" COMPILER 1.0.7.85                                              PAGE 165


1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_CAMNOISETOOTH_OFFSET     ) ::ETPUlocation (TOOTHGEN, camNoiseTooth) );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_CAMNOISEPULSESHIFT_OFFSET) ::ETPUlocation (TOOTHGEN, camNoisePulseShift) );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_CAMNOISEPULSEWIDTH_OFFSET) ::ETPUlocation (TOOTHGEN, camNoisePulseWidth) );
1A6C                                    #pragma write h, ( );
1A6C                                    #pragma write h, (/****************************************************************);
1A6C                                    #pragma write h, (* Value Definitions. );
1A6C                                    #pragma write h, (****************************************************************/);
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_FM0_CRANK_CHAN   ) TOOTHGEN_FM0_CRANK_CHAN );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_FM0_CAM_CHAN     ) TOOTHGEN_FM0_CAM_CHAN );
1A6C                                    #pragma write h, ( );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_ERROR_MISSING_HIGHTIME ) TOOTHGEN_ERROR_MISSING_HIGHTIME );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_ERROR_MISSING_LOWTIME  ) TOOTHGEN_ERROR_MISSING_LOWTIME  );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_ERROR_CRANKNOISE       ) TOOTHGEN_ERROR_CRANKNOISE       );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_ERROR_MISSING_CAM      ) TOOTHGEN_ERROR_MISSING_CAM      );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_ERROR_CAMNOISE         ) TOOTHGEN_ERROR_CAMNOISE         );
1A6C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_TOOTHGEN_ERROR_TOOTH_IN_GAP     ) TOOTHGEN_ERROR_TOOTH_IN_GAP     );
1A6C                                    #pragma write h, ( );
1A6C                                    #pragma write h, (#endif );

                                        /*********************************************************************
                                         *
                                         * Copyright:
                                         *  Freescale Semiconductor, INC. All Rights Reserved.
                                         *  You are hereby granted a copyright license to use, modify, and
                                         *  distribute the SOFTWARE so long as this entire notice is
                                         *  retained without alteration in any modified and/or redistributed
                                         *  versions, and that such modified versions are clearly identified
                                         *  as such. No licenses are granted by implication, estoppel or
                                         *  otherwise under any patents or trademarks of Freescale
                                         *  Semiconductor, Inc. This software is provided on an "AS IS"
                                         *  basis and without warranty.
                                         *
                                         *  To the maximum extent permitted by applicable law, Freescale
                                         *  Semiconductor DISCLAIMS ALL WARRANTIES WHETHER EXPRESS OR IMPLIED,
                                         *  INCLUDING IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A
                                         *  PARTICULAR PURPOSE AND ANY WARRANTY AGAINST INFRINGEMENT WITH
                                         *  REGARD TO THE SOFTWARE (INCLUDING ANY MODIFIED VERSIONS THEREOF)
                                         *  AND ANY ACCOMPANYING WRITTEN MATERIALS.
                                         *
                                         *  To the maximum extent permitted by applicable law, IN NO EVENT
                                         *  SHALL Freescale Semiconductor BE LIABLE FOR ANY DAMAGES WHATSOEVER
                                         *  (INCLUDING WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS,
                                         *  BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR OTHER
                                         *  PECUNIARY LOSS) ARISING OF THE USE OR INABILITY TO USE THE SOFTWARE.
                                         *
                                         *  Freescale Semiconductor assumes no responsibility for the
                                         *  maintenance and support of this software
                                         ********************************************************************/

                                        /*********************************************************************
                                         *
                                         * ASH WARE Inc. has modified this file so that it compiles under the
                                         * ETEC eTPU C Compiler Toolkit.  The source has been modified such that
                                         * it also maintains compatibility with other code generation tools.  This
                                         * source also compiles with Byte Craft eTPU-C 1.0.7.30 and the binary code

ETPU "C" COMPILER 1.0.7.85                                              PAGE 166


                                         * image output is bit-for-bit the same as the original Freescale release.
                                         *
                                         ********************************************************************/

00000005                                #define FUEL_FUNCTION_NUMBER 5
                                        #include "etpuc_fuel2.c"
                                        /*******************************************************************************
                                         * 版权 2015-2016 中国航空工业集团第六三一所第十八研究室
                                         *
                                         * 对本文件的拷贝、发布、修改或者其他任何用途必须得到中国航空工业集团第六三一所
                                         * 的书面协议许可。
                                         *
                                         * Copyrights (2015-2016) ACTRI
                                         * All Right Reserved
                                         *******************************************************************************

                                         *******************************************************************************
                                         * Revision History
                                         *------------------------------------------------------------------------------
                                         * 2017-12-07, gbo, created
                                         *******************************************************************************

                                         *******************************************************************************
                                         * content
                                         *------------------------------------------------------------------------------
                                         *  File            : etpuc_crank.c
                                         *  Description     : ETPU曲轴信号采集，同步
                                         *  Call            : 029-89186510
                                         ******************************************************************************/
                                        #include "etpuc_fuel2.h"
                                        /*******************************************************************************
                                         * 版权 2015-2016 中国航空工业集团第六三一所第十八研究室
                                         *
                                         * 对本文件的拷贝、发布、修改或者其他任何用途必须得到中国航空工业集团第六三一所
                                         * 的书面协议许可。
                                         *
                                         * Copyrights (2015-2016) ACTRI
                                         * All Right Reserved
                                         *******************************************************************************

                                         *******************************************************************************
                                         * Revision History
                                         *------------------------------------------------------------------------------
                                         * 2017-12-07, gbo, created
                                         *******************************************************************************

                                         *******************************************************************************
                                         * content
                                         *------------------------------------------------------------------------------
                                         *  File            : etpuc_crank.h
                                         *  Description     : ETPU曲轴检测头文件
                                         *  Call            : 029-89186510
                                         ******************************************************************************/
                                        #ifndef _ETPUC_FUEL_H
00FC                                    #define _ETPUC_FUEL_H

ETPU "C" COMPILER 1.0.7.85                                              PAGE 167



                                        #include <eTPUc_common.h>
                                        #ifndef __ETPUC_COMMON_H
                                        #define __ETPUC_COMMON_H

                                        /********************************************************************************

                                         FILE NAME: etpuc_common.h

                                         COPYRIGHT (c) ASH WARE, Byte Craft Limited, Freescale 2002-2004.
                                         All Rights Reserved.

                                         VERSION:  1.0

                                         This file is maintained as part of the support for the eTPU_C
                                         development tools by Byte Craft Limited.

                                         This code may be adapted for any purpose when used with the eTPU_C
                                         Code Development System.  No warranty is implied or given as to their
                                         usability for any purpose.

                                         Portions of this file are governed by the following copyrights and
                                         terms:

                                         (c) Freescale 2002-2004 FREESCALE, INC. All Rights Reserved.
                                         *  You are hereby granted a copyright license to use, modify, and
                                         *  distribute the SOFTWARE so long as this entire notice is
                                         *  retained without alteration in any modified and/or redistributed
                                         *  versions, and that such modified versions are clearly identified
                                         *  as such. No licenses are granted by implication, estoppel or
                                         *  otherwise under any patents or trademarks of Freescale, Inc. This
                                         *  software is provided on an "AS IS" basis and without warranty.
                                         *
                                         *  To the maximum extent permitted by applicable law, FREESCALE
                                         *  DISCLAIMS ALL WARRANTIES WHETHER EXPRESS OR IMPLIED, INCLUDING
                                         *  IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
                                         *  PURPOSE AND ANY WARRANTY AGAINST INFRINGEMENT WITH REGARD TO THE
                                         *  SOFTWARE (INCLUDING ANY MODIFIED VERSIONS THEREOF) AND ANY
                                         *  ACCOMPANYING WRITTEN MATERIALS.
                                         *
                                         *  To the maximum extent permitted by applicable law, IN NO EVENT
                                         *  SHALL FREESCALE BE LIABLE FOR ANY DAMAGES WHATSOEVER (INCLUDING
                                         *  WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
                                         *  INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR OTHER PECUNIARY
                                         *  LOSS) ARISING OF THE USE OR INABILITY TO USE THE SOFTWARE.
                                         *
                                         *  Freescale assumes no responsibility for the maintenance and support
                                         *  of this software

                                         (c) Copyright 2002-2004 Byte Craft Limited
                                         421 King St.N., Waterloo, ON, Canada, N2J 4E4
                                         VOICE: 1 (519) 888 6911
                                         email: support@bytecraft.com

                                         (c) Copyright 2002-2004 ASH WARE

ETPU "C" COMPILER 1.0.7.85                                              PAGE 168



                                        ================================================================================

                                        DESCRIPTION: This file defines the application-friendly macros,
                                        functions for common tasks like channel set up and register control
                                        field access.

                                        ================================================================================

                                        SOURCES:

                                        etpuc_common.h is based on the following header files commonly used by
                                        the eTPU development community:

                                        AshWareETpu.h - developed by Andy Klumpp from ASH WARE
                                        Mike.h - developed by Mike Pauwels from Freescale
                                        etpu_common.h - developped by Ming Li from Freescale

                                        Jeff Loeliger from Freescale and Walter Banks from Byte Craft
                                        also made significant contibutions.

                                        ================================================================================
                                         UPDATE HISTORY
                                         REV      AUTHOR        DATE                DESCRIPTION OF CHANGE
                                         ---      -------      --------    ---------------------
                                         0.0      Ming Li      10/30/03    Initial creation
                                         0.1      Ming Li      11/12/03    Updated to incorporate comments from eTPU
                                                                           development community.
                                         0.2      Walter Banks 15 Dec 03   Made changes to be reflect definitions in
                                                                           eTPUc.h
                                                                           Corrected IsTransALatched()
                                                                                     IsTransBLatched()
                                                                           Added missing definitions
                                                                                     set_pin_per_opacA
                                                                                     set_pin_per_opacB
                                                                                     force_pin_high
                                                                                     force_pin_low
                                                                           Corrected opac1 to opacA
                                                                                     opac2 to opacB

                                         0.3      Walter Banks  5 Jan 04   Corrected opacB = pin_action; to
                                                                               opacA = pin_action;

                                         0.4     J. Loeliger    21/Jan/04  Cleared up reorganized and added more:
                                                                           -Moved TRUE & FALSE to top and added
                                                                              conditional
                                                                           -Moved entry conditions up and added macros
                                                                              for all conditions
                                                                           -Merged with AshWareETpu.h
                                                                              -Removed commet with of PDCM names.
                                                                           -Grouped latches and flags together.
                                                                             -added new set and clear for latches and
                                                                                flags
                                                                           -Merged output pin value to 1 set rather
                                                                              than 2

ETPU "C" COMPILER 1.0.7.85                                              PAGE 169


                                                                           -Added long channel mode names.
                                                                           -Added SetupMatch_AB for better
                                                                              optimization
                                                                           -Added match only conditions for output
                                                                              functions.
                                                                           -Added new ActionUnintA/B macros
                                                                           -Added new Pin macro
                                                                           -And more.
                                         0.5     J. Loeliger     12/Feb/04 -Changed DetectTrans to OnTrans.
                                         0.6     J. Loeliger     30/Mar/04 -Added SetupMatchB and fixed some old
                                                                             references to 1 & 2 -> A & B
                                         0.7     J. Loeliger     16/Apr/04 -Changed Disable match (MRLE) to =0
                                         0.8     J. Loeliger     27/Apr/04 -Fixed Disable/Enable match in thread,
                                                                              they were swapped.
                                         0.9     J. Loeliger     10/May/04 -Added support for OBE with new
                                                 M. Brejl                   EnableOutputBuffer()/DisableOutputBuffer()
                                                                            Removed all // comments. Changed Motorola
                                                                            to Freescale.
                                                                            Fixed spelling mistake in GetCurentChanNum

                                         0.4     Karen McMurray  19 May 04  Changed all ertA to erta
                                                                                        ertB to ertb.

                                         1.0     Kirk Zurell     11 Aug 04  Integrated etpuc_common.h from J. Loeliger
                                                                            and etpuc_common.h from Byte Craft Limited.
                                                                            Removed tabs & made comments more sustainable.
                                                                            Conditionalized some definitions to be more
                                                                            economical on symbols.

                                                                            Divider lines have 80 asterices.

                                        */



                                        /********************************************************************************/

                                        /* This file depends upon definitions from etpuc.h */

                                        #ifndef __ETPUC_H
                                        #include <etpuc.h>
                                        #endif /* __ETPUC_H */


                                        /********************************************************************************/

                                        /* Constant definitions */

                                        #ifndef TRUE
                                        #define TRUE        1
                                        #endif

                                        #ifndef FALSE
                                        #define FALSE       0
                                        #endif

ETPU "C" COMPILER 1.0.7.85                                              PAGE 170




                                        /********************************************************************************/

                                        /* State Resolution Flags, and other latches */

                                        /* Clear() definitions */
                                        #define LSRLatch      lsr
                                        #define LatchedMatchA mrlA
                                        #define LatchedMatchB mrlB
                                        #define TransLatch    tdl

                                        /* Macros */

                                        /* Set flag0 or flag1
                                           Usage: Set(flag0 | flag1);*/

                                        #define Set(cond)     (cond = 1)

                                        /* Clear a flag
                                           Usage: Clear(flag0 | flag1 | LSRLatch | lsr | MatchALatch | mrlA |
                                                         MatchBLatch | mrlB | TransLatch | tdl);         */

                                        #define Clear(cond)   (cond = 0)

                                        /* SYNONYMS */
                                        /* Flag 0 & flag 1 */
                                        #define ClrFlag0()  (channel.FLAG0 = 0)
                                        #define SetFlag0()  (channel.FLAG0 = 1)
                                        #define ClrFlag1()  (channel.FLAG1 = 0)
                                        #define SetFlag1()  (channel.FLAG1 = 1)


                                        #define FunctionMode0          channel.FM0
                                        #define IsFunctionMode0()     (channel.FM0==1)
                                        #define IsSampledFuncMode0()  (channel.FM0==1)
                                        #define IsLatchedFuncMode0()  (channel.FM0==1)

                                        #define FunctionMode1          channel.FM1
                                        #define IsFunctionMode1()     (channel.FM1==1)
                                        #define IsSampledFuncMode1()  (channel.FM1==1)
                                        #define IsLatchedFuncMode1()  (channel.FM1==1)


                                        /********************************************************************************/

                                        /* Writing the match registers and enabling/disabling the Match
                                           Recognition Latch Enable */

                                        #define EnableMatchA()                 (channel.ERWA = 0)
                                        #define EnableMatchB()                 (channel.ERWB = 0)
                                        #define DisableMatch()                 (channel.MRLE = 0)

                                        /* SYNONYMS */
                                        #define WriteErtAToMatchAAndEnable()   channel.ERWA = 0

ETPU "C" COMPILER 1.0.7.85                                              PAGE 171


                                        #define WriteErtBToMatchBAndEnable()   channel.ERWB = 0
                                        #define DisableMatchDetection();       channel.MRLE = 0


                                        /* Read capture register */
                                        #define GetCapRegA()  (erta)
                                        #define GetCapRegB()  (ertb)

                                        /* Clear Latch */
                                        #define ClearLSRLatch()       (channel.LSR  = 0)

                                        #define ClearMatchALatch()    (channel.MRLA = 0)
                                        #define ClearMatchBLatch()    (channel.MRLB = 0)

                                        #define ClearTransLatch()     (channel.TDL = 0)

                                        /* SYNONYMS */
                                        #define ClearLinkServiceRequestEvent() (lsr  = 0)

                                        #define ClearMatchAEvent()    (channel.MRLA = 0)
                                        #define ClearMatchBEvent()    (channel.MRLB = 0)

                                        #define ClearTransitionEvents() (channel.TDL = 0)



                                        /* Test latch conditions */

                                        #define TransitionALatch           channel.TDLA
                                        #define IsTransALatched()         (channel.TDLA==1)

                                        #define TransitionBLatch           channel.TDLB
                                        #define IsTransBLatched()         (channel.TDLB==1)

                                        #define MatchALatch            channel.MRLA
                                        #define IsMatchALatched()     (channel.MRLA==1)

                                        #define MatchBLatch            channel.MRLB
                                        #define IsMatchBLatched()     (channel.MRLB==1)

                                        /* SYNONYMS */
                                        #define IsLatchedTransitionA()    (channel.TDLA==1)
                                        #define IsLatchedTransitionB()    (channel.TDLB==1)
                                        #define IsLatchedMatchA()         (channel.MRLA==1)
                                        #define IsLatchedMatchB()         (channel.MRLB==1)



                                        /********************************************************************************/

                                        /* Enabling/Disabling Event Handling */

                                        #define EnableEventHandling()                   (channel.MTD = 0)
                                        #define DisableEventHandling()                  (channel.MTD = 1)


ETPU "C" COMPILER 1.0.7.85                                              PAGE 172


                                        /* SYNONYMS */
                                        #define EnableMatchAndTransitionEventHandling()  channel.MTD = 0
                                        #define DisableMatchAndTransitionEventHandling() channel.MTD = 1


                                        /********************************************************************************/

                                        /* Semaphore Operations */

                                        #define IsSemaphoreLocked()   (channel.SMPR == 1)
                                        #define LockSemaphore(num)    (channel.SMPR = num)
                                        #define FreeSemaphore()       (channel.SMPR = -1)


                                        /********************************************************************************/

                                        /* Exceptions */

                                        /* Channel control macros */
                                        #define SetChannelInterrupt()       (channel.CIRC = 0)
                                        #define SetChannelInterruptRequest()(channel.CIRC = 0)

                                        #define SetDataTransferInterrupt()        (channel.CIRC = 1)
                                        #define SetDataTransferInterruptRequest() (channel.CIRC = 1)

                                        #define SetGlobalException()  (channel.CIRC = 2)

                                        /* Channel control */

                                        /* Generate the link service request to channel[ChNum] */
                                        #define LinkToChannel(ChNum)            (link = ChNum)
                                        #define LinkTo(num)                 link = num;
                                        #define LinkToEngine1Chan(num)      link = (num | (1<<6))
                                        #define LinkToEngine2Chan(num)      link = (num | (2<<6))
                                        #define LinkToOtherEngineChan(num)  link = (num | (3<<6))

                                        /* switch to specified channel from current channel */
                                        #define SwitchToChannel(ChNum)      (chan = ChNum)

                                        /* return current channel number */
                                        #define GetCurrentChanNum()         (chan)

                                        /* branch condition */
                                        #define LinkServiceRequest     channel.LSR
                                        #define IsLinkReqActive()     (channel.LSR==1)
                                        #define IsSampledLink()       (channel.LSR==1)
                                        #define IsLatchedLink()       (channel.LSR==1)


                                        /********************************************************************************/

                                        /* Entry Conditions Definition */

                                        /* Usage: use these in the if()/else if()/else structure in an
                                           ETPU_function */

ETPU "C" COMPILER 1.0.7.85                                              PAGE 173



                                        #define HostServiceRequest               hsr
                                        #define IsHostServiceRequestEvent(num)   (hsr==num)

                                        #define MatchA_TransB                    (m1==1)
                                        #define matchA_transB                    (m1==1)
                                        #define IsMatchAOrTransitionBEvent()     (m1==1)

                                        #define MatchB_TransA                    (m2==1)
                                        #define matchB_transA                    (m2==1)
                                        #define IsMatchBOrTransitionAEvent()     (m2==1)

                                        #define linkRequest                      (lsr==1)
                                        #define IsLinkServiceRequestEvent()      (lsr==1)

                                        /* For output-only functions */
                                        #define MatchA                           (m1==1)
                                        #define MatchB                           (m2==1)


                                        /********************************************************************************/

                                        /* Predefined Channel Modes (PDCM) */

                                        #define SetChannelMode(mode)        (channel.PDCM = mode)
                                        #define channel_setup channel.PDCM

                                        /* Usage:       channel_setup = PDCM_constant

                                        PDCM_constants are taken from etpuc.h:
                                        em_b_st         Either Match, Blocking, Single Transition
                                        em_b_dt         Either Match, Blocking, Double Transition
                                        em_nb_st        Either Match, NonBlocking, Single Transition
                                        em_nb_dt        Either Match, NonBlocking, Double Transition
                                        m2_st           Match2, Single, Transition
                                        m2_dt           Match2, Double, Transition
                                        bm_st           Both Match, Single Transition
                                        bm_dt           Both Match, Double Transition
                                        m2_o_st         Match2, Ordered Single Blocking Transition
                                        m2_o_dt         Match2, Ordered Double Transition
                                        sm_st_e         Single Match, Single Transition Enhanced
                                        sm_st           Single Match, Single Transition
                                        sm_dt           Single Match, Double Transition
                                        */

                                        /* SYNONYMS */
                                        #define EitherMatchBlockingSingleTransition()     channel.PDCM = em_b_st
                                        #define EitherMatchBlockingDoubleTransition()     channel.PDCM = em_b_dt
                                        #define EitherMatchNonBlockingSingleTransition()  channel.PDCM = em_nb_st
                                        #define EitherMatchNonBlockingDoubleTransition()  channel.PDCM = em_nb_dt
                                        #define Match2SingleTransition()                  channel.PDCM = m2_st
                                        #define Match2DoubleTransition()                  channel.PDCM = m2_dt
                                        #define BothMatchSingleTransition()               channel.PDCM = bm_st
                                        #define BothMatchDoubleTransition()               channel.PDCM = bm_dt
                                        #define Match2OrderedSingleBlockingTransition()   channel.PDCM = m2_o_st

ETPU "C" COMPILER 1.0.7.85                                              PAGE 174


                                        #define Match2OrderedDoubleTransition()           channel.PDCM = m2_o_dt
                                        #define SingleMatchSingleTransitionEnhanced()     channel.PDCM = sm_st_e
                                        #define SingleMatchSingleTransition()             channel.PDCM = sm_st
                                        #define SingleMatchDoubleTransition()             channel.PDCM = sm_dt


                                        #define ClearAllLatches()         \
                                                (lsr = 0);(mrlA = 0);(mrlB = 0);(tdl = 0);


                                        /********************************************************************************/

                                        /* Complex Macros */

                                        /* These macros should provide the most optimized way of doing things.
                                           They should be in the best order for optimizing. The compiler might
                                           be able to identify this code for optimization. */

                                        #define SetupMatchA(reference) \
                                                erta = reference;      \
                                                EnableMatchA();        \
                                                ClearMatchALatch();

                                        #define SetupMatchB(reference) \
                                                ertb = reference;      \
                                                EnableMatchB();        \
                                                ClearMatchBLatch();

                                        /* These are ONLY useful for init. and if you know which TCR you want
                                           to use. Latches are cleared at the end so it can be combined with
                                           other latches. */

                                        #define ConfigMatch_AB() \
                                                WriteErtAToMatchAAndEnable(); \
                                                WriteErtBToMatchBAndEnable(); \
                                                EnableMatchA();        \
                                                EnableMatchB();        \
                                                EnableEventHandling();\
                                                ClearMatchALatch();\
                                                ClearMatchBLatch();

                                        #define SetupMatch_A(reference, timebase_comparator, pin_action) \
                                                erta = reference; \
                                                act_unitA = timebase_comparator; \
                                                opacA = pin_action; \
                                                EnableMatchA();        \
                                                ClearMatchALatch();\
                                                EnableEventHandling();

                                        #define SetupMatch_B(reference, timebase_comparator, pin_action) \
                                                ertb = reference; \
                                                act_unitB = timebase_comparator; \
                                                opacB = pin_action; \
                                                EnableMatchB();        \
                                                ClearMatchBLatch();\

ETPU "C" COMPILER 1.0.7.85                                              PAGE 175


                                                EnableEventHandling();

                                        #define SetupCaptureTrans_A(timebase, pin_trans) \
                                                act_unitA = timebase;\
                                                ipacA = pin_trans;\
                                                ClearTransLatch();\
                                                EnableEventHandling();

                                        #define SetupCaptureTrans_B(timebase, pin_trans) \
                                                act_unitB = timebase;\
                                                ipacB = pin_trans;\
                                                ClearTransLatch();\
                                                EnableEventHandling();


                                        /********************************************************************************/

                                        /* Action Units */

                                        /* Usage: ActionUnitA( MatchTCR1 | MatchTCR2,
                                                               CaptureTCR1 | CaptureTCR2,
                                                               GreaterEqual | EqualOnly ); */

                                        #define ActionUnitA( match, capture, compare)   (act_unitA=match##capture##compare)
                                        #define ActionUnitB( match, capture, compare)   (act_unitB=match##capture##compare)

                                        #define MatchTCR1    Mtcr1_
                                        #define MatchTCR2    Mtcr2_
                                        #define CaptureTCR1  Ctcr1_
                                        #define CaptureTCR2  Ctcr2_
                                        #define GreaterEqual ge
                                        #define EqualOnly    eq

                                        /* SYNONYMS */
                                        /* Action Unit A, Time Bases for match and capture */
                                        #define TimeBaseAMatchTcr1CaptureTcr1GreaterEqual()      channel.TBSA = Mtcr1_Ctcr1_ge
                                        #define TimeBaseAMatchTcr2CaptureTcr1GreaterEqual()      channel.TBSA = Mtcr2_Ctcr1_ge
                                        #define TimeBaseAMatchTcr1CaptureTcr2GreaterEqual()      channel.TBSA = Mtcr1_Ctcr2_ge
                                        #define TimeBaseAMatchTcr2CaptureTcr2GreaterEqual()      channel.TBSA = Mtcr2_Ctcr2_ge
                                        #define TimeBaseAMatchTcr1CaptureTcr1ExactlyEqual()      channel.TBSA = Mtcr1_Ctcr1_eq
                                        #define TimeBaseAMatchTcr2CaptureTcr1ExactlyEqual()      channel.TBSA = Mtcr2_Ctcr1_eq
                                        #define TimeBaseAMatchTcr1CaptureTcr2ExactlyEqual()      channel.TBSA = Mtcr1_Ctcr2_eq
                                        #define TimeBaseAMatchTcr2CaptureTcr2ExactlyEqual()      channel.TBSA = Mtcr2_Ctcr2_eq

                                        /* Action Unit B, Time Bases for match and capture */
                                        #define TimeBaseBMatchTcr1CaptureTcr1GreaterEqual()      channel.TBSB = Mtcr1_Ctcr1_ge
                                        #define TimeBaseBMatchTcr2CaptureTcr1GreaterEqual()      channel.TBSB = Mtcr2_Ctcr1_ge
                                        #define TimeBaseBMatchTcr1CaptureTcr2GreaterEqual()      channel.TBSB = Mtcr1_Ctcr2_ge
                                        #define TimeBaseBMatchTcr2CaptureTcr2GreaterEqual()      channel.TBSB = Mtcr2_Ctcr2_ge
                                        #define TimeBaseBMatchTcr1CaptureTcr1ExactlyEqual()      channel.TBSB = Mtcr1_Ctcr1_eq
                                        #define TimeBaseBMatchTcr2CaptureTcr1ExactlyEqual()      channel.TBSB = Mtcr2_Ctcr1_eq
                                        #define TimeBaseBMatchTcr1CaptureTcr2ExactlyEqual()      channel.TBSB = Mtcr1_Ctcr2_eq
                                        #define TimeBaseBMatchTcr2CaptureTcr2ExactlyEqual()      channel.TBSB = Mtcr2_Ctcr2_eq



ETPU "C" COMPILER 1.0.7.85                                              PAGE 176



                                        /********************************************************************************/

                                        /* Pin output buffer */

                                        #define EnableOutputBuffer()           (channel.TBSA = enable_output_buffer)
                                        #define DisableOutputBuffer()          (channel.TBSA = disable_output_buffer)


                                        /********************************************************************************/

                                        /* Pin control */

                                        /* Pin() definitions */
                                        #define SetHigh pin_high
                                        #define SetLow  pin_low
                                        #define PerPacA pin_opacA
                                        #define PerPacB pin_opacB

                                        /* Set Output Pin
                                           Usage: Pin( SetHigh | SetLow | PerPacA | PerPacB ); */
                                        #define Pin( state )          (channel.PIN=state)

                                        /* Immediate output pin */
                                        #define set_pin_per_opacA  pin_opacA
                                        #define set_pin_per_opacB  pin_opacB
                                        #define force_pin_high     pin_high
                                        #define force_pin_low      pin_low

                                        #define SetPinHigh()          (channel.PIN=force_pin_high)
                                        #define SetPinLow()           (channel.PIN=force_pin_low)
                                        #define SetPinPerPacA()       (channel.PIN=set_pin_per_opacA)
                                        #define SetPinPerPacB()       (channel.PIN=set_pin_per_opacB)

                                        /* Reading the pin states: branch conditions */

                                        #define SampledInputPin            channel.PSS
                                        #define IsLatchedInputPin()        (channel.PSS==1)
                                        #define IsInputPinHigh()           (channel.PSS==1)

                                        #define CurrentInputPin            channel.PSTI
                                        #define IsCurrentInputPin()        (channel.PSTI==1)

                                        #define CurrentOutputPin           channel.PSTO
                                        #define IsCurrentOutputPin()       (channel.PSTO==1)

                                        /* SYNONYMS */
                                        #define IsSampledInputPinHigh()    (channel.PSS==1)
                                        #define IsLatchedInputPinHigh()    (channel.PSS==1)
                                        #define IsCurrentInputPinHigh()    (channel.PSTI==1)
                                        #define IsCurrentOutputPinHigh()   (channel.PSTO==1)



                                        /********************************************************************************/

ETPU "C" COMPILER 1.0.7.85                                              PAGE 177



                                        /* Output Pin Action */

                                        #define NoChange    match_no_change
                                        #define PinHigh     match_high
                                        #define PinLow      match_low
                                        #define PinToggle   match_toggle

                                        /* Usage: OnMatchA( NoChange | PinHigh | PinLow | PinToggle ); */
                                        #define OnMatchA(action)      (opacA = action)
                                        #define OnMatchB(action)      (opacB = action)

                                        /* SYNONYMS */
                                        /* Action Unit A, Output Pin Actions */
                                        #define OnMatchAPinNoChange()      channel.OPACA = match_no_change
                                        #define OnMatchAPinHigh()          channel.OPACA = match_high
                                        #define OnMatchAPinLow()           channel.OPACA = match_low
                                        #define OnMatchAPinToggle()        channel.OPACA = match_toggle
                                        #define OnInputActionAPinLow()     channel.OPACA = transition_low
                                        #define OnInputActionAPinHigh()    channel.OPACA = transition_high
                                        #define OnInputActionAPinToggle()  channel.OPACA = transition_toggle

                                        /* Action Unit B, Output Pin Actions */
                                        #define OnMatchBPinNoChange()      channel.OPACB = match_no_change
                                        #define OnMatchBPinHigh()          channel.OPACB = match_high
                                        #define OnMatchBPinLow()           channel.OPACB = match_low
                                        #define OnMatchBPinToggle()        channel.OPACB = match_toggle
                                        #define OnInputActionBPinLow()     channel.OPACB = transition_low
                                        #define OnInputActionBPinHigh()    channel.OPACB = transition_high
                                        #define OnInputActionBPinToggle()  channel.OPACB = transition_toggle


                                        /********************************************************************************/

                                        /* Input Pin Action */

                                        #define NoDetect  no_detect
                                        #define LowHigh   low_high
                                        #define HighLow   high_low
                                        #define AnyTrans  any_trans

                                        /* Usage: DetectTransA( no_detect | low_high | high_low | any_trans | ...); */
                                        #define OnTransA(action)     (ipacA = action)
                                        #define OnTransB(action)     (ipacB = action)

                                        /* SYNONYMS */
                                        /* Action Unit A, Input Pin Edge Detection */
                                        #define DetectADisable()        channel.IPACA = no_detect
                                        #define DetectARisingEdge()     channel.IPACA = low_high
                                        #define DetectAFallingEdge()    channel.IPACA = high_low
                                        #define DetectAAnyEdge()        channel.IPACA = any_trans
                                        #define DetectALowOnMatchA()    channel.IPACA = detect_input_0_on_match
                                        #define DetectAHighOnMatchA()   channel.IPACA = detect_input_1_on_match

                                        /* Action Unit B, Input Pin Edge Detection */

ETPU "C" COMPILER 1.0.7.85                                              PAGE 178


                                        #define DetectBDisable()        channel.IPACB = no_detect
                                        #define DetectBRisingEdge()     channel.IPACB = low_high
                                        #define DetectBFallingEdge()    channel.IPACB = high_low
                                        #define DetectBAnyEdge()        channel.IPACB = any_trans
                                        #define DetectBLowOnMatchA()    channel.IPACB = detect_input_0_on_match
                                        #define DetectBHighOnMatchA()   channel.IPACB = detect_input_1_on_match


                                        /********************************************************************************/

                                        /* Intrinsics synonyms */

                                        /* Matches in Threads */
                                        #define DisableMatchesInThread()    match_disable()
                                        #define EnableMatchesInThread()     match_enable()



                                        #endif /* __ETPUC_COMMON_H */
                                        #include <etpuc.h>
                                        #ifndef __ETPUC_H
                                        #define __ETPUC_H

                                        /*
                                         *  eTPU C Code Development System
                                         *
                                         *  Processor register definitions
                                         *  for the eTPU C Code Development System.
                                         *
                                         *  This code may be adapted for any purpose
                                         *  when used with the eTPU C Code Development
                                         *  System.  No warranty is implied or given
                                         *  as to their usability for any purpose.
                                         *
                                         *  (c) Copyright 2002-2004 Byte Craft Limited
                                         *  421 King St.N., Waterloo, ON, Canada, N2J 4E4
                                         *  VOICE: 1 (519) 888 6911
                                         *  FAX  : 1 (519) 746 6751
                                         *  email: support@bytecraft.com
                                         *
                                         *  Byte Craft Limited
                                         *  Waterloo, Ontario
                                         *  Canada N2J 4E4
                                         *  (519) 888-6911
                                         *
                                         *  Walter Banks
                                         *
                                         * Revision history
                                         * ----------------
                                         * V0.90  WB    Nov 2003  First pre-release of etpuc.h based on V1.10 etpu.h with
                                         *                        changes to reflect eTPU naming conventions
                                         * V1.00  WB    Nov 2003  First release changes to the channel fields to reflect
                                         *                        naming conventions for eTPU
                                         * V1.01  WB    Dec 2003  Corrected definitions of pin_opacA and pin_opacB
                                         *

ETPU "C" COMPILER 1.0.7.85                                              PAGE 179


                                         *
                                         *
                                         *  All of the eTPU registers can be directly accessed from C
                                         *

                                             register_ac        ac   ;      // 24 bits
                                             register_b         b    ;      // 24 bits
                                             register_c         c    ;      // 24 bits
                                             register_d         d    ;      // 24 bits
                                             register_chan      chan ;      //  5 bits
                                             register_diob      diob ;      // 24 bits
                                             register_erta      erta ;      // 24 bits
                                             register_ertb      ertb ;      // 24 bits
                                             register_link      link ;      //  8 bits
                                             register_mach      mach ;      // 24 bits
                                             register_macl      macl ;      // 24 bits
                                             register_p         p    ;      // 24 bits
                                             register_rar       rar  ;      // 14 bits
                                             register_sr        sr   ;      // 24 bits
                                             register_tcr1      tcr1 ;      // 24 bits
                                             register_tcr2      tcr2 ;      // 24 bits
                                             register_tpr       tpr  ;      // 16 bits
                                             register_trr       trr  ;      // 24 bits
                                             register_chan_base chan_base;  // 24 bits
                                        */

                                        /* The following registers are defined for
                                           eTPU C application code */

                                             register_chan       chan ;       //  5 bits
                                             register_erta       erta ;       // 24 bits
                                             register_ertb       ertb ;       // 24 bits
                                             register_tcr1       tcr1 ;       // 24 bits
                                             register_tcr2       tcr2 ;       // 24 bits
                                             register_tpr        tpr  ;       // 16 bits
                                             register_trr        trr  ;       // 24 bits
                                             register_chan_base  chan_base;   // 24 bits
                                             register_link       link;        // 8 bits

                                        /*
                                           The link request can be set by copying the
                                           channel number into the link register. The
                                           following definition does this.
                                         */

                                        #define link_request(channel) link = channel

                                        /*
                                         *
                                         *
                                         *  All of the eTPU channel fields are predefined as a
                                         *  large C structure (chan_struct) by the eTPU C compiler.
                                         *
                                         *  struct chan {
                                         *               CIRC   int : 2 ;

ETPU "C" COMPILER 1.0.7.85                                              PAGE 180


                                         *               ERWA   int : 1 ;
                                         *               ERWB   int : 1 ;
                                         *               FLC    int : 3 ;
                                         *               IPACA  int : 3 ;
                                         *               IPACB  int : 3 ;
                                         *               LSR    int : 1 ;  // w test
                                         *               MRLA   int : 1 ;  // w test
                                         *               MRLB   int : 1 ;  // w test
                                         *               MRLE   int : 1 ;
                                         *               MTD    int : 2 ;
                                         *               OPACA  int : 3 ;
                                         *               OPACB  int : 3 ;
                                         *               PDCM   int : 4 ;
                                         *               PIN    int : 3 ;
                                         *               TBSA   int : 4 ;
                                         *               TBSB   int : 4 ;
                                         *               TDL    int : 1 ;
                                         *               SMPR   int : 2 ;
                                         * State Resolution
                                         *               FLAG0  int : 1 ;  // w only also defined in FLC
                                         *               FLAG1  int : 1 ;
                                         * Channel Flags
                                         *               FM0    int : 1 ;
                                         *               FM1    int : 1 ;
                                         *         //    LSR    int : 1 ;  // also channel fields
                                         *         //    MRLA   int : 1 ;  // also channel fields
                                         *         //    MRLB   int : 1 ;  // also channel fields
                                         *               PSS    int : 1 ;
                                         *               PSTI   int : 1 ;
                                         *               PSTO   int : 1 ;
                                         *               TDLA   int : 1 ;
                                         *               TDLB   int : 1 ;
                                         *              }
                                         ***/

                                        chan_struct channel;
                                        register_cc        CC;

                                        #define erwA       channel.ERWA
                                        #define erwB       channel.ERWB

                                        #define flc        channel.FLC
                                        #define ipacA      channel.IPACA
                                        #define ipacB      channel.IPACB
                                        #define lsr        channel.LSR

                                        #define mrlA       channel.MRLA
                                        #define mrlB       channel.MRLB
                                        #define mrle       channel.MRLE
                                        #define mtd        channel.MTD
                                        #define opacA      channel.OPACA
                                        #define opacB      channel.OPACB
                                        #define pdcm       channel.PDCM
                                        #define pin        channel.PIN
                                        #define act_unitA  channel.TBSA

ETPU "C" COMPILER 1.0.7.85                                              PAGE 181


                                        #define act_unitB  channel.TBSB
                                        #define tdl        channel.TDL
                                        #define flag0      channel.FLAG0
                                        #define flag1      channel.FLAG1
                                        #define fm0        channel.FM0
                                        #define fm1        channel.FM1
                                        #define pss        channel.PSS
                                        #define psti       channel.PSTI
                                        #define psto       channel.PSTO
                                        #define tdlA       channel.TDLA
                                        #define tdlB       channel.TDLB


                                        // IPAC 1,2
                                        #define no_detect                 0
                                        #define low_high                  1
                                        #define high_low                  2
                                        #define any_trans                 3
                                        #define detect_input_0_on_match   4
                                        #define detect_input_1_on_match   5
                                        #define no_change_ipac            7

                                        // OPAC 1,2  fields

                                        #define match_no_change   0
                                        #define match_high        1
                                        #define match_low         2
                                        #define match_toggle      3
                                        #define opac_high         1
                                        #define opac_low          2
                                        #define toggle            3
                                        #define opac_high_low     4
                                        #define opac_low_high     5
                                        #define transition_low    4
                                        #define transition_high   5
                                        #define transition_toggle 6

                                        // PDCM fields
                                        #define em_b_st  0              //Either Match, Blocking, Single Transition
                                        #define em_b_dt  1              //Either Match, Blocking, Double Transition
                                        #define em_nb_st 2              //Either Match, NonBlocking, Single Transition
                                        #define em_nb_dt 3              //Either Match, NonBlocking, Double Transition
                                        #define m2_st    4              //Match2, Single, Transition
                                        #define m2_dt    5              //Match2, Double, Transition
                                        #define bm_st    6              //Both Match, Single Transition
                                        #define bm_dt    7              //Both Match, Double Transition
                                        #define m2_o_st  8              //Match2, Ordered, Single Transition
                                        #define m2_o_dt  9              //Match2, Ordered, Double Transition
                                        #define sm_st_e  0xE                //Single Match, Single Transition, Enhanced
                                        #define sm_st    0xC                //Single Match, Single Transition
                                        #define sm_dt    0xD                //Single Match, Double Transition

                                        // Time Bases Selection for match and capture
                                        #define Mtcr1_Ctcr1_ge       0      //Match tcr1, Capture tcr1, greater than
                                        #define Mtcr2_Ctcr1_ge       1      //Match tcr2, Capture tcr1, greater than

ETPU "C" COMPILER 1.0.7.85                                              PAGE 182


                                        #define Mtcr1_Ctcr2_ge       2      //Match tcr1, Capture tcr2, greater than
                                        #define Mtcr2_Ctcr2_ge       3      //Match tcr2, Capture tcr2, greater than
                                        #define Mtcr1_Ctcr1_eq       4      //Match tcr1, Capture tcr1, equal
                                        #define Mtcr2_Ctcr1_eq       5      //Match tcr2, Capture tcr1, equal
                                        #define Mtcr1_Ctcr2_eq       6      //Match tcr1, Capture tcr2, equal
                                        #define Mtcr2_Ctcr2_eq       7      //Match tcr2, Capture tcr2, equal

                                        #define enable_output_buffer  8     // TBSx[3] = 1, TBSx[2:0] = 000
                                        #define disable_output_buffer 9     // TBSx[3] = 1, TBSx[2:0] = 001
                                        #define do_nothing       15     // TBSx[3] = 1, TBSx[2:0] = 111

                                        // Time Bases Selection for transition and capture
                                        #define Capture_tcr1        0       //TBSx[2] = 0
                                        #define Capture_tcr2        2       //TBSx[2] = 1

                                        // Tooth Program Register structure

                                        struct tpr_struct {
                                          int TICKS   : 10;
                                          int TPR10   : 1;
                                          int HOLD    : 1;
                                          int IPH     : 1;
                                          int MISSCNT : 2;
                                          int LAST    : 1;
                                          } ;

                                        // pin definitions
                                        //   pin = pin_high;
                                        #define pin_opacA  0
                                        #define pin_opacB  1
                                        #define pin_high   2
                                        #define pin_low    4

                                        #endif /* __ETPUC_H */


                                        /* 如果作为函数集，则放置在对应的位置，否则仅有一个函数 */
                                        #ifdef FUEL_FUNCTION_NUMBER
0005                                    #pragma ETPU_function FuelMain, alternate @ FUEL_FUNCTION_NUMBER;
                                        #else
                                        #pragma ETPU_function FuelMain, alternate;
                                        #endif

00000007                                #define FUEL_INIT 7
00000003                                #define FUEL_INJ_TIME_UPDATE 3

00000000                                #define FUEL_FLAG1_RAIL    0
00000001                                #define FUEL_FLAG1_NORMAL      1
00000000                                #define FUEL_FLAG0_ACTIVE    0
00000001                                #define FUEL_FLAG0_INACTIVE  1

                                        #endif


                                        /*******************************************************************************

ETPU "C" COMPILER 1.0.7.85                                              PAGE 183


                                         * restrictAngle
                                         *
                                         * 描述:将角度计数限制在[0, angleTickPerEngCycle)区间内
                                         *
                                         * 参数：
                                         * 输入参数:
                                         *     angle: 输入角度计数
                                         *     angleTickPerEngCycle: 引擎每圈的角度计数值，以TCR2计数为单位
                                         *
                                         * 输出参数:
                                         *     返回值: 限制后的角度计数
                                         *
                                         * 备注:
                                         *
                                         * 遗留问题:
                                         ******************************************************************************/
                                        unsigned int24 restrictAngle(unsigned int24 angle, unsigned int24 angleTickPerEngCycle)
002D 0031                               {
0035                                        unsigned int24 temp;
1A6C 9FEFFB0B   ram p23_0 = 002D.           if (angle >= 0x800000)
1A70 7CFF0FFF   alu a = $800000 .       
1A74 3838FFF4   alu nil = p - a ,ccs.        {
1A78 F088D47F   if c==1 jump 1A8C,flush.         
                                        
1A7C 9FEFFB0C   ram p23_0 = 0031.               temp = angleTickPerEngCycle + angle;
1A80 9FE80A0B   alu a = p ,ccs;         
                    ram p23_0 = 002D.         
                                            }
1A84 F7E0D5FF   jump 1ABC,noflush.                    else if (angle >= angleTickPerEngCycle)
1A88 9F197A0D   alu p = a + p ,ccs;         
                    ram 0035 = p23_0.         
1A8C 9FEFFB0B   ram p23_0 = 002D.           {
1A90 9FE80A0C   alu a = p ,ccs;         
                    ram p23_0 = 0031.         
1A94 3819FFF4   alu nil = a - p ,ccs.         
1A98 F088D5BF   if c==1 jump 1AB4,flush.         
                                        
1A9C 9FEFFB0B   ram p23_0 = 002D.               temp = angle % angleTickPerEngCycle;
1AA0 9FE80A0C   alu a = p ,ccs;         
                    ram p23_0 = 0031.         
1AA4 3B190FEE   mdu a div p ,ccs.         
1AA8 F348D55F   if mb==1 jump 1AA8,flush         
                    .                   
                                            }
1AAC F7E0D5FF   jump 1ABC,noflush.                    else
1AB0 9FD77A0D   alu p = mach ,ccs;         
                    ram 0035 = p23_0.         
                                            {
1AB4 9FEFFB0B   ram p23_0 = 002D.               temp = angle;
1AB8 9FFFFB0D   ram 0035 = p23_0.         
1ABC                                        }
1ABC 9FEFFB0D   ram p23_0 = 0035.           return temp;
1AC0 FFFFCCF9   return,noflush.         
1AC4 3BF80FF4   alu a = p ,ccs.         
                                           }

ETPU "C" COMPILER 1.0.7.85                                              PAGE 184



                                        /*******************************************************************************
                                         * judgeFuture
                                         *
                                         * 描述:以角度时钟为基准，判断dest在src的未来还是过去
                                         *
                                         * 参数：
                                         * 输入参数:
                                         *     dest: 要判断的角度时钟计数
                                         *     src: 目标角度计数
                                         *     angleTickPerEngCycle: 引擎每圈的角度计数值，以TCR2计数为单位
                                         *
                                         * 输出参数:
                                         *     返回值: 若dest在src的未来，则为1，否则为0
                                         *
                                         * 备注: 未来指的是dest相对于src还未发生，例如角度计数为600的事件相对于500的还
                                         * 未发生，再例如角度计数为10的相对于35900的事件也未发生，本函数判断当dest与src
                                         * 的差值在±180度以内，认为dest处于src的未来，否则认为处于过去
                                         *
                                         * 遗留问题:
                                         ******************************************************************************/
                                        unsigned int8 judgeFuture(unsigned int24 dest,
                                                                  unsigned int24 src,
                                                                  unsigned int24 angleTickPerEngCycle)
0039 003D 0041                          {
000E                                        unsigned int8 temp;
                                            
1AC8 9FEFFB0E   ram p23_0 = 0039.           if (dest > src)
1ACC 9FE80A0F   alu a = p ,ccs;         
                    ram p23_0 = 003D.    
1AD0 3819FFF4   alu nil = a - p ,ccs.        {
1AD4 F4C8D87F   if ls jump 1B0C,flush.    
1AD8 9FEFFB0E   ram p23_0 = 0039.               if (dest - src < angleTickPerEngCycle / 4)
1ADC 9FE80A0F   alu a = p ,ccs;                 {
                    ram p23_0 = 003D.         
1AE0 38193FD4   alu b = a - p ,ccs.         
1AE4 9FEFFB10   ram p23_0 = 0041.         
1AE8 18080B92   alu a = p >>2,ccs.         
1AEC 38330FB4   alu a = b - a ,ccs.         
1AF0 F090D807   if c==0 jump 1B00,flush.                temp = 1;
                                        
1AF4 9FEFFB03   ram p23_0 = 000D.         
                                                }
1AF8 F7E0DAFF   jump 1B5C,noflush.                        else
1AFC 9DFFCB03   alu p15_8 = 1 ;         
                    ram 000D = p23_0.         
                                                {
1B00 9FEFFB03   ram p23_0 = 000D.                   temp = 0;
1B04 9FFFCB03   alu p15_8 = 0 ;         
                    ram 000D = p23_0.         
1B08                                            }
                                            }
1B08 F7C0DAFF   jump 1B5C,flush.                    else if (dest < src)
1B0C 9FEFFB0E   ram p23_0 = 0039.           {
1B10 9FE80A0F   alu a = p ,ccs;         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 185


                    ram p23_0 = 003D.         
1B14 3819FFF4   alu nil = a - p ,ccs.         
1B18 F080DABF   if c==0 jump 1B54,flush.    
                                        
1B1C 9FEFFB0E   ram p23_0 = 0039.               if (dest + angleTickPerEngCycle - src < angleTickPerEngCycle / 4)
1B20 9FE80A10   alu a = p ,ccs;         
                    ram p23_0 = 0041.    
1B24 9F090A0F   alu a = a + p ,ccs;             {
                    ram p23_0 = 003D.         
1B28 38193FD4   alu b = a - p ,ccs.         
1B2C 9FEFFB10   ram p23_0 = 0041.         
1B30 18080B92   alu a = p >>2,ccs.         
1B34 38330FB4   alu a = b - a ,ccs.         
1B38 F090DA47   if c==0 jump 1B48,flush.                temp = 1;
                                        
1B3C 9FEFFB03   ram p23_0 = 000D.         
                                                }
1B40 F7E0DAFF   jump 1B5C,noflush.                        else
1B44 9DFFCB03   alu p15_8 = 1 ;         
                    ram 000D = p23_0.         
                                                {
1B48 9FEFFB03   ram p23_0 = 000D.                   temp = 0;   
1B4C 9FFFCB03   alu p15_8 = 0 ;         
                    ram 000D = p23_0.         
1B50                                            }
                                            }
1B50 F7C0DAFF   jump 1B5C,flush.                    else
                                            {
1B54 9FEFFB03   ram p23_0 = 000D.               temp = 0;   
1B58 9FFFCB03   alu p15_8 = 0 ;         
                    ram 000D = p23_0.         
1B5C                                        }
                                            
1B5C 9FEFFB03   ram p23_0 = 000D.           return temp;
1B60 3BF10FF4   alu a = p15_8 ,ccs.         
1B64 FFFFCCF9   return,noflush.         
1B68 0BF90BFA   alu a = a & #0x0000FF,         
                    ccs.                
                                           }

                                        /*******************************************************************************
                                         * FuelMain
                                         *
                                         * 描述:喷油函数
                                         *
                                         * 参数：
                                         * 输入参数:
                                         *     angleOffset: 本缸角度偏移，以TCR2个数为单位
                                         *     pInjTimeArr: 保存喷油起始角度计数和持续时间计数的数组，数组应包含10个
                                         *         元素，其中起始角度指的是与1缸上止点的角度偏移，正值为往前偏移，负值
                                         *         表示往后偏移，元素具体定义为：
                                         *         元素0和1分别表示预喷2的起始角度，预喷2的持续时间
                                         *         元素2和3分别表示预喷1的起始角度，预喷1的持续时间
                                         *         元素4和5分别表示主喷的起始角度，主喷的持续时间
                                         *         元素6和7分别表示后喷1的起始角度，后喷1的持续时间

ETPU "C" COMPILER 1.0.7.85                                              PAGE 186


                                         *         元素8和9分别表示后喷2的起始角度，后喷2的持续时间
                                         *     railPressAngle: 轨压中断与第一次喷油提前的角度偏移
                                         *     exprEdgeAngle: 凸轮标记齿对应的角度计数，认为这个角度是1缸上止点，该值为
                                         *         经验值，用于通道初始化时还无法获取凸轮标记齿的角度
                                         *     angleTickPerEngCycle: 引擎每圈的角度计数值，以TCR2计数为单位
                                         *     railPressChn: 产生轨压中断的通道
                                         *
                                         * 输出参数:
                                         *
                                         * 备注: ETPU程序在取地址或进行地址参数传递时需要注意，24位变量起始地址应为
                                         * 1,5,9,D等，因此在传递地址时，需要特别注意24位变量的起始地址。对于数组也存在
                                         * 一样的问题，传递数组首地址时应传递数组第0个元素的地址
                                         *
                                         * 遗留问题:
                                         ******************************************************************************/
                                        void FuelMain(unsigned int24 angleOffset, /*本缸角度偏移*/
                                                      unsigned int24 *pInjTimeArr, /*所有喷油时长，以及相邻两次喷射的间隔时间，均以TCR1计数为单位*/
                                                      unsigned int24 railPressAngle, /*喷油结束角度*/
                                                      unsigned int24 exprEdgeAngle, /*凸轮标记齿的经验角度*/
                                                      unsigned int24 angleTickPerEngCycle, /*引擎每圈的角度计数值*/
                                                      unsigned int8 railPressChn, /*产生轨压中断的通道*/
                                                      unsigned int8 enableChn)
0001 0005 0009 000D 0011 0000 0004      {
                                            /* 索引seqArr，即当前喷到第几次 */
0008                                        static unsigned int8 injTimes;
                                            /* 喷油输出有效状态标志 */
000C                                        static unsigned int8 flagPulse;
0010                                        static unsigned int8 flag1Mirror;
                                            /* 保存凸轮标记齿角度 */
0015                                        static unsigned int24 edgeAngle;
                                            /* 备份凸轮标记齿角度 */
0019                                        static unsigned int24 edgeAngleBack;
                                            /* 保存喷油有效时，每次喷油脉冲跳变的起始时间 */
001D                                        static unsigned int24 injChangeTime;
                                            /* 保存正在执行的喷油序列 */
0021 0028                                   static unsigned int24 tempInjArr[10];

                                            /* 当喷油无效时更新喷油序列，此时直接更新即可 */
                                            if (hsr == FUEL_INJ_TIME_UPDATE && flag0 == FUEL_FLAG0_INACTIVE)
                                            {
00BA                                            unsigned int24 temp;
                                                
1B6C BFEFFF81   ram diob = PRAM5.               tempInjArr[0] = pInjTimeArr[0];
1B70 FFEFFAD9   ram p23_0 = (diob).         
1B74 BFFFFB88   ram PRAM33 = p23_0.         
1B78 BFEFFF81   ram diob = PRAM5.               tempInjArr[1] = pInjTimeArr[1];
1B7C 181B4782   alu diob = diob + #0x04,         
                    ccs.                
1B80 FFEFFAD9   ram p23_0 = (diob).         
1B84 BFFFFB89   ram PRAM37 = p23_0.         
1B88 BFEFFF81   ram diob = PRAM5.               tempInjArr[2] = pInjTimeArr[2];
1B8C 182B4782   alu diob = diob + #0x08,         
                    ccs.                
1B90 FFEFFAD9   ram p23_0 = (diob).         
1B94 BFFFFB8A   ram PRAM41 = p23_0.         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 187


1B98 BFEFFF81   ram diob = PRAM5.               tempInjArr[3] = pInjTimeArr[3];
1B9C 183B4782   alu diob = diob + #0x0C,         
                    ccs.                
1BA0 FFEFFAD9   ram p23_0 = (diob).         
1BA4 BFFFFB8B   ram PRAM45 = p23_0.         
1BA8 BFEFFF81   ram diob = PRAM5.               tempInjArr[4] = pInjTimeArr[4];
1BAC 184B4782   alu diob = diob + #0x10,         
                    ccs.                
1BB0 FFEFFAD9   ram p23_0 = (diob).         
1BB4 BFFFFB8C   ram PRAM49 = p23_0.         
1BB8 BFEFFF81   ram diob = PRAM5.               tempInjArr[5] = pInjTimeArr[5];
1BBC 185B4782   alu diob = diob + #0x14,         
                    ccs.                
1BC0 FFEFFAD9   ram p23_0 = (diob).         
1BC4 BFFFFB8D   ram PRAM53 = p23_0.         
1BC8 BFEFFF81   ram diob = PRAM5.               tempInjArr[6] = pInjTimeArr[6];
1BCC 186B4782   alu diob = diob + #0x18,         
                    ccs.                
1BD0 FFEFFAD9   ram p23_0 = (diob).         
1BD4 BFFFFB8E   ram PRAM57 = p23_0.         
1BD8 BFEFFF81   ram diob = PRAM5.               tempInjArr[7] = pInjTimeArr[7];
1BDC 187B4782   alu diob = diob + #0x1C,         
                    ccs.                
1BE0 FFEFFAD9   ram p23_0 = (diob).         
1BE4 BFFFFB8F   ram PRAM61 = p23_0.         
1BE8 BFEFFF81   ram diob = PRAM5.               tempInjArr[8] = pInjTimeArr[8];
1BEC 188B4782   alu diob = diob + #0x20,         
                    ccs.                
1BF0 FFEFFAD9   ram p23_0 = (diob).         
1BF4 BFFFFB90   ram PRAM65 = p23_0.         
1BF8 BFEFFF81   ram diob = PRAM5.               tempInjArr[9] = pInjTimeArr[9];
1BFC 189B4782   alu diob = diob + #0x24,         
                    ccs.                
1C00 FFEFFAD9   ram p23_0 = (diob).         

                                                ClearMatchAEvent();
                                                /* 此时说明最后一次喷油已完成，但还没到轨压中断 */
1C04 DFFF7A91   ram PRAM69 = p23_0;     
                    chan clr_mrla.      
1C08 CFEFF884   ram p31_0 = PRAM16.             if (flag1Mirror == FUEL_FLAG1_RAIL)
1C0C 3BF20FF4   alu a = p31_24 ,ccs.            {
                                                    /* 修改轨压中断的角度 */
1C10 F0C0E22D   if z==0 jump 1C44,flush;                temp = edgeAngle - tempInjArr[0] + angleOffset - railPressAngle;
                    ram p23_0 = PRAM21.         
1C14 BFE80A88   alu a = p ,ccs;         
                    ram p23_0 = PRAM33.         
1C18 BC090A80   alu a = a - p ,ccs;         
                    ram p23_0 = PRAM1.         
1C1C BF090A82   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM9.         
1C20 38195FD4   alu d = a - p ,ccs.         
1C24 9FF47A0B   alu p = d ,ccs;                     temp = restrictAngle(temp, angleTickPerEngCycle);
                    ram 002D = p23_0.         
1C28 BFEFFB84   ram p23_0 = PRAM17.         
1C2C FFE0D37F   call 1A6C,noflush.         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 188


1C30 9FFFFB0C   ram 0031 = p23_0.         
1C34 3BF95FD4   alu d = a ,ccs.         
                                                
                                                    erta = temp;
1C38 3BF42FF4   alu erta = d ,ccs.         
1C3C                                                ActionUnitA(MatchTCR2, CaptureTCR1, EqualOnly);
                                                    WriteErtAToMatchAAndEnable();
                                                }
                                                /* 此时说明轨压中断已产生，但还没有开始首次喷油 */
1C3C F7E0E57F   jump 1CAC,noflush.                        else
1C40 4FF5FF7F                           
                    chan tbsa = mtcr2_ctcr1_eq         
                    ,write_erta.         
                                                {
                                                    /* 计算新的首次喷油角度 */
1C44 BFEFFB85   ram p23_0 = PRAM21.                 temp = edgeAngle - tempInjArr[0] + angleOffset;
1C48 BFE80A88   alu a = p ,ccs;         
                    ram p23_0 = PRAM33.         
1C4C BC090A80   alu a = a - p ,ccs;         
                    ram p23_0 = PRAM1.         
1C50 3B195FD4   alu d = a + p ,ccs.         
1C54 9FF47A0B   alu p = d ,ccs;                     temp = restrictAngle(temp, angleTickPerEngCycle);
                    ram 002D = p23_0.         
1C58 BFEFFB84   ram p23_0 = PRAM17.         
1C5C FFE0D37F   call 1A6C,noflush.         
1C60 9FFFFB0C   ram 0031 = p23_0.         
1C64 3BF95FD4   alu d = a ,ccs.         
                                                    
                                                    /* 若首次喷油角度在未来，则可以直接调度 */
1C68 9FF47A0E   alu p = d ,ccs;                     if (judgeFuture(temp, tcr2, angleTickPerEngCycle) == 1)
                    ram 0039 = p23_0.         
1C6C 9FFD7A0F   alu p = tcr2 ,ccs;         
                    ram 003D = p23_0.         
1C70 BFEFFB84   ram p23_0 = PRAM17.         
1C74 FFE0D65F   call 1AC8,noflush.                  {
1C78 9FFFFB10   ram 0041 = p23_0.         
1C7C 3AF9FFF4   alu nil = a -1 ,ccs.         
1C80 F0C0E47F   if z==0 jump 1C8C,flush.         
                                        
1C84                                                    erta = temp;
                                                    }
                                                    /* 若首次喷油角度在过去，则立即开始 */
1C84 F7E0E49F   jump 1C90,noflush.                            else
1C88 3BF42FF4   alu erta = d ,ccs.         
                                                    {
                                                        erta = tcr2 + 1;
1C8C 39FD2FF4   alu erta = tcr2 + 1 ,ccs         
                    .                   
1C90                                                }
                                                    
1C90 BFEFFB89   ram p23_0 = PRAM37.                 if (tempInjArr[1] == 0)
1C94 3BF8FFF4   alu nil = p ,ccs.                   {
1C98 F0C0E53F   if z==0 jump 1CA4,flush.         
                                        
1C9C                                                    OnMatchAPinNoChange();

ETPU "C" COMPILER 1.0.7.85                                              PAGE 189


                                                    }
1C9C F7E0E55F   jump 1CA8,noflush.                            else
1CA0 48FFFFFF   chan opaca = no_change.         
                                                    {
                                                        OnMatchAPinHigh();
1CA4 49FFFFFF   chan opaca = high.         
1CA8                                                }
                                                    
                                                    ActionUnitA(MatchTCR2, CaptureTCR1, EqualOnly);
                                                    WriteErtAToMatchAAndEnable();
1CA8 4FF5FF7F                           
                    chan tbsa = mtcr2_ctcr1_eq         
                    ,write_erta.         
1CAC                                            }
1CAC 6FFFFFFF   end.                        }
0142 46 DB        05 A01 P01 ME 1B6C  HSR 2/3   lsr x  m1 x  m2 x  pin 0  flag1 x  flag0 1                             
0146 46 DB        05 A03 P01 ME 1B6C  HSR 2/3   lsr x  m1 x  m2 x  pin 1  flag1 x  flag0 1                             
                                         
0000             Thread Local RAM size                                   
                                            /* 当喷油有效时更新喷油序列，需要根据当前喷油的状态更新本次以及还未发生的
                                             * 喷油，已经发生的不会改变 */
                                            else if (hsr == FUEL_INJ_TIME_UPDATE && flag0 == FUEL_FLAG0_ACTIVE)
                                            {
00BA                                            unsigned int24 temp;

1CB0 BFEFFF81   ram diob = PRAM5.               tempInjArr[0] = pInjTimeArr[0];
1CB4 FFEFFAD9   ram p23_0 = (diob).         
1CB8 BFFFFB88   ram PRAM33 = p23_0.         
1CBC BFEFFF81   ram diob = PRAM5.               tempInjArr[1] = pInjTimeArr[1];
1CC0 181B4782   alu diob = diob + #0x04,         
                    ccs.                
1CC4 FFEFFAD9   ram p23_0 = (diob).         
1CC8 BFFFFB89   ram PRAM37 = p23_0.         
1CCC BFEFFF81   ram diob = PRAM5.               tempInjArr[2] = pInjTimeArr[2];
1CD0 182B4782   alu diob = diob + #0x08,         
                    ccs.                
1CD4 FFEFFAD9   ram p23_0 = (diob).         
1CD8 BFFFFB8A   ram PRAM41 = p23_0.         
1CDC BFEFFF81   ram diob = PRAM5.               tempInjArr[3] = pInjTimeArr[3];
1CE0 183B4782   alu diob = diob + #0x0C,         
                    ccs.                
1CE4 FFEFFAD9   ram p23_0 = (diob).         
1CE8 BFFFFB8B   ram PRAM45 = p23_0.         
1CEC BFEFFF81   ram diob = PRAM5.               tempInjArr[4] = pInjTimeArr[4];
1CF0 184B4782   alu diob = diob + #0x10,         
                    ccs.                
1CF4 FFEFFAD9   ram p23_0 = (diob).         
1CF8 BFFFFB8C   ram PRAM49 = p23_0.         
1CFC BFEFFF81   ram diob = PRAM5.               tempInjArr[5] = pInjTimeArr[5];
1D00 185B4782   alu diob = diob + #0x14,         
                    ccs.                
1D04 FFEFFAD9   ram p23_0 = (diob).         
1D08 BFFFFB8D   ram PRAM53 = p23_0.         
1D0C BFEFFF81   ram diob = PRAM5.               tempInjArr[6] = pInjTimeArr[6];
1D10 186B4782   alu diob = diob + #0x18,         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 190


                    ccs.                
1D14 FFEFFAD9   ram p23_0 = (diob).         
1D18 BFFFFB8E   ram PRAM57 = p23_0.         
1D1C BFEFFF81   ram diob = PRAM5.               tempInjArr[7] = pInjTimeArr[7];
1D20 187B4782   alu diob = diob + #0x1C,         
                    ccs.                
1D24 FFEFFAD9   ram p23_0 = (diob).         
1D28 BFFFFB8F   ram PRAM61 = p23_0.         
1D2C BFEFFF81   ram diob = PRAM5.               tempInjArr[8] = pInjTimeArr[8];
1D30 188B4782   alu diob = diob + #0x20,         
                    ccs.                
1D34 FFEFFAD9   ram p23_0 = (diob).         
1D38 BFFFFB90   ram PRAM65 = p23_0.         
1D3C BFEFFF81   ram diob = PRAM5.               tempInjArr[9] = pInjTimeArr[9];
1D40 189B4782   alu diob = diob + #0x24,         
                    ccs.                
1D44 FFEFFAD9   ram p23_0 = (diob).         

                                                /* 如果输出有效，则还需要更新本次喷油结束的时间 */
1D48 BFFFFB91   ram PRAM69 = p23_0.     
1D4C CFEFF883   ram p31_0 = PRAM12.             if (flagPulse == 1)
1D50 0802FBAA   alu nil = p31_24 ^              {
                    #0x000001,ccs.         
1D54 F0C0EC5F   if z==0 jump 1D88,flush.         
                                        
1D58 CFEFF882   ram p31_0 = PRAM8.                  temp = injChangeTime + tempInjArr[(injTimes << 1) + 1];
1D5C 3BF20FF5   alu a = p31_24 <<1,ccs.         
1D60 39F90FF4   alu a = a + 1 ,ccs.         
1D64 3B394FF5   alu diob = a + a <<1,ccs         
                    .                   
1D68 188B4782   alu diob = diob + #0x20,         
                    ccs.                
1D6C 3B7A4FB4   alu                     
                    diob = chan_base + diob          
                    ,ccs.               
1D70 FFEFFAD9   ram p23_0 = (diob).         
1D74 BFE80A87   alu a = p ,ccs;         
                    ram p23_0 = PRAM29.         
1D78 3B195FD4   alu d = a + p ,ccs.         
1D7C 3BF43FF4   alu ertb = d ,ccs.                  SetupMatch_B(temp, Mtcr1_Ctcr2_ge, match_low);
1D80 4F5F2F9F   chan opacb = low,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
                                                }

                                                /* 输出无效时，说明本次已经结束，更新下次喷油开始角度；输出有效也需要
                                                 * 更新下次喷油的开始角度 */
1D84 FF3FFCFB   chan mtd = enable_mtsr.         
1D88 CFEFF882   ram p31_0 = PRAM8.              if (injTimes >= 4)
1D8C 1C1F0F9E   alu a = #0x04.          
1D90 3832FFF4   alu nil = p31_24 - a ,            {
                    ccs.                
                                                    /* 计算产生轨压中断的角度 */
1D94 F088EE6D   if c==1 jump 1DCC,flush;                temp = edgeAngle - tempInjArr[0] + angleOffset - railPressAngle;

ETPU "C" COMPILER 1.0.7.85                                              PAGE 191


                    ram p23_0 = PRAM21.         
1D98 BFE80A88   alu a = p ,ccs;         
                    ram p23_0 = PRAM33.         
1D9C BC090A80   alu a = a - p ,ccs;         
                    ram p23_0 = PRAM1.         
1DA0 BF090A82   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM9.         
1DA4 38195FD4   alu d = a - p ,ccs.         
1DA8 9FF47A0B   alu p = d ,ccs;                     temp = restrictAngle(temp, angleTickPerEngCycle);
                    ram 002D = p23_0.         
1DAC BFEFFB84   ram p23_0 = PRAM17.         
1DB0 FFE0D37F   call 1A6C,noflush.         
1DB4 9FFFFB0C   ram 0031 = p23_0.         
1DB8 3BF95FD4   alu d = a ,ccs.         
1DBC 3BF42FF4   alu erta = d ,ccs.                  SetupMatch_A(temp, Mtcr2_Ctcr1_eq, match_low);
1DC0 4AF5FE7F   chan opaca = low,         
                    tbsa = mtcr2_ctcr1_eq         
                    ,write_erta,clr_mrla         
                    .                   
                                                }
                                                /* 如果本次不是最后一次喷油，则计算下次喷油的起始角度 */
1DC4 F7E0F35F   jump 1E68,noflush.                        else
1DC8 FF3FFCFB   chan mtd = enable_mtsr.         
                                                {
                                                    ClearMatchAEvent();
                                                    /* 计算下次喷油的起始角度 */
1DCC DFEF7882   ram p31_0 = PRAM8;                  temp = edgeAngle - tempInjArr[(injTimes + 1) << 1] + angleOffset;
                    chan clr_mrla.         
1DD0 39F20FF4   alu a = p31_24 + 1 ,ccs.         
                                        
1DD4 3BF90FF5   alu a = a <<1,ccs.         
1DD8 B3294A85   alu diob = a + a <<1 ,         
                    ccs;                
                    ram p23_0 = PRAM21.         
1DDC 3BF80FF4   alu a = p ,ccs.         
1DE0 188B4782   alu diob = diob + #0x20,         
                    ccs.                
1DE4 3B7A4FB4   alu                     
                    diob = chan_base + diob          
                    ,ccs.               
1DE8 FFEFFAD9   ram p23_0 = (diob).         
1DEC BC090A80   alu a = a - p ,ccs;         
                    ram p23_0 = PRAM1.         
1DF0 3B195FD4   alu d = a + p ,ccs.         
1DF4 9FF47A0B   alu p = d ,ccs;                     temp = restrictAngle(temp, angleTickPerEngCycle);
                    ram 002D = p23_0.         
1DF8 BFEFFB84   ram p23_0 = PRAM17.         
1DFC FFE0D37F   call 1A6C,noflush.         
1E00 9FFFFB0C   ram 0031 = p23_0.         
1E04 3BF95FD4   alu d = a ,ccs.         
                                                    
                                                    /* 若首次喷油角度在未来，则可以直接调度 */
1E08 9FF47A0E   alu p = d ,ccs;                     if (judgeFuture(temp, tcr2, angleTickPerEngCycle) == 1)
                    ram 0039 = p23_0.         
1E0C 9FFD7A0F   alu p = tcr2 ,ccs;         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 192


                    ram 003D = p23_0.         
1E10 BFEFFB84   ram p23_0 = PRAM17.         
1E14 FFE0D65F   call 1AC8,noflush.                  {
1E18 9FFFFB10   ram 0041 = p23_0.         
1E1C 3AF9FFF4   alu nil = a -1 ,ccs.         
1E20 F0C0F17F   if z==0 jump 1E2C,flush.         
                                        
1E24                                                    erta = temp;
                                                    }
                                                    /* 若首次喷油角度在过去，则立即开始 */
1E24 F7E0F19F   jump 1E30,noflush.                            else
1E28 3BF42FF4   alu erta = d ,ccs.         
                                                    {
                                                        erta = tcr2 + 1;
1E2C 39FD2FF4   alu erta = tcr2 + 1 ,ccs         
                    .                   
1E30                                                }
                                                    
1E30 CFEFF882   ram p31_0 = PRAM8.                  if (tempInjArr[((injTimes + 1) << 1) + 1] == 0)
1E34 39F20FF4   alu a = p31_24 + 1 ,ccs.                {
                                        
1E38 3BF90FF5   alu a = a <<1,ccs.         
1E3C 39F90FF4   alu a = a + 1 ,ccs.         
1E40 3B394FF5   alu diob = a + a <<1,ccs         
                    .                   
1E44 188B4782   alu diob = diob + #0x20,         
                    ccs.                
1E48 3B7A4FB4   alu                     
                    diob = chan_base + diob          
                    ,ccs.               
1E4C FFEFFAD9   ram p23_0 = (diob).         
1E50 3BF80FF4   alu a = p ,ccs.         
1E54 F0C0F31F   if z==0 jump 1E60,flush.         
                                        
1E58                                                    OnMatchAPinNoChange();
                                                    }
1E58 F7E0F33F   jump 1E64,noflush.                            else
1E5C 48FFFFFF   chan opaca = no_change.         
                                                    {
                                                        OnMatchAPinHigh();
1E60 49FFFFFF   chan opaca = high.         
1E64                                                }
                                                    
                                                    ActionUnitA(MatchTCR2, CaptureTCR1, EqualOnly);
                                                    WriteErtAToMatchAAndEnable();
1E64 4FF5FF7F                           
                    chan tbsa = mtcr2_ctcr1_eq         
                    ,write_erta.         
1E68                                            }
1E68 6FFFFFFF   end.                        }
0140 47 2C        05 A00 P01 ME 1CB0  HSR 2/3   lsr x  m1 x  m2 x  pin 0  flag1 x  flag0 0                             
0144 47 2C        05 A02 P01 ME 1CB0  HSR 2/3   lsr x  m1 x  m2 x  pin 1  flag1 x  flag0 0                             
                                         
0000             Thread Local RAM size                                   
                                            /* 初始化或发生链接请求，链接请求由曲轴发出，若停车则重新初始化 */

ETPU "C" COMPILER 1.0.7.85                                              PAGE 193


                                            else if ((hsr == FUEL_INIT) || (lsr == 1 && m1 == 0 && m2 == 0))
                                            {
00BA                                            unsigned int24 temp;
                                                
                                                DisableMatchesInThread();
                                                OnTransA(NoDetect);
                                                OnTransB(NoDetect);
                                                ClearLSRLatch();
                                                ClearTransLatch();
                                                ClearMatchAEvent();
                                                ClearMatchBEvent();

                                                /* 设置通道模式 */
                                                SetChannelMode(em_nb_st);
                                                EnableOutputBuffer();
                                                SetPinLow();

                                                /* 初始化凸轮标记齿角度，直接使用经验值 */
1E6C 5808F4A4   chan pin = low,         
                    ipaca = no_detect,         
                    ipacb = no_detect,         
                    tbsa = obe_on,         
                    em_nb_st,clr_lsr,         
                    clr_mrla,clr_mrlb,         
                    clr_tdl.            
1E70 BFEFFB83   ram p23_0 = PRAM13.             edgeAngleBack = exprEdgeAngle;
1E74 BFFFFB86   ram PRAM25 = p23_0.         
1E78 BFEFFB83   ram p23_0 = PRAM13.             edgeAngle = exprEdgeAngle;

1E7C BFFFFB85   ram PRAM21 = p23_0.         
1E80 BFEFFF81   ram diob = PRAM5.               tempInjArr[0] = pInjTimeArr[0];
1E84 FFEFFAD9   ram p23_0 = (diob).         
1E88 BFFFFB88   ram PRAM33 = p23_0.         
1E8C BFEFFF81   ram diob = PRAM5.               tempInjArr[1] = pInjTimeArr[1];
1E90 181B4782   alu diob = diob + #0x04,         
                    ccs.                
1E94 FFEFFAD9   ram p23_0 = (diob).         
1E98 BFFFFB89   ram PRAM37 = p23_0.         
1E9C BFEFFF81   ram diob = PRAM5.               tempInjArr[2] = pInjTimeArr[2];
1EA0 182B4782   alu diob = diob + #0x08,         
                    ccs.                
1EA4 FFEFFAD9   ram p23_0 = (diob).         
1EA8 BFFFFB8A   ram PRAM41 = p23_0.         
1EAC BFEFFF81   ram diob = PRAM5.               tempInjArr[3] = pInjTimeArr[3];
1EB0 183B4782   alu diob = diob + #0x0C,         
                    ccs.                
1EB4 FFEFFAD9   ram p23_0 = (diob).         
1EB8 BFFFFB8B   ram PRAM45 = p23_0.         
1EBC BFEFFF81   ram diob = PRAM5.               tempInjArr[4] = pInjTimeArr[4];
1EC0 184B4782   alu diob = diob + #0x10,         
                    ccs.                
1EC4 FFEFFAD9   ram p23_0 = (diob).         
1EC8 BFFFFB8C   ram PRAM49 = p23_0.         
1ECC BFEFFF81   ram diob = PRAM5.               tempInjArr[5] = pInjTimeArr[5];
1ED0 185B4782   alu diob = diob + #0x14,         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 194


                    ccs.                
1ED4 FFEFFAD9   ram p23_0 = (diob).         
1ED8 BFFFFB8D   ram PRAM53 = p23_0.         
1EDC BFEFFF81   ram diob = PRAM5.               tempInjArr[6] = pInjTimeArr[6];
1EE0 186B4782   alu diob = diob + #0x18,         
                    ccs.                
1EE4 FFEFFAD9   ram p23_0 = (diob).         
1EE8 BFFFFB8E   ram PRAM57 = p23_0.         
1EEC BFEFFF81   ram diob = PRAM5.               tempInjArr[7] = pInjTimeArr[7];
1EF0 187B4782   alu diob = diob + #0x1C,         
                    ccs.                
1EF4 FFEFFAD9   ram p23_0 = (diob).         
1EF8 BFFFFB8F   ram PRAM61 = p23_0.         
1EFC BFEFFF81   ram diob = PRAM5.               tempInjArr[8] = pInjTimeArr[8];
1F00 188B4782   alu diob = diob + #0x20,         
                    ccs.                
1F04 FFEFFAD9   ram p23_0 = (diob).         
1F08 BFFFFB90   ram PRAM65 = p23_0.         
1F0C BFEFFF81   ram diob = PRAM5.               tempInjArr[9] = pInjTimeArr[9];
1F10 189B4782   alu diob = diob + #0x24,         
                    ccs.                
1F14 FFEFFAD9   ram p23_0 = (diob).         

                                                /* 计算轨压中断的角度 */
1F18 BFFFFB91   ram PRAM69 = p23_0.         
1F1C BFEFFB85   ram p23_0 = PRAM21.             temp = edgeAngle - tempInjArr[0] + angleOffset - railPressAngle;
1F20 BFE80A88   alu a = p ,ccs;         
                    ram p23_0 = PRAM33.         
1F24 BC090A80   alu a = a - p ,ccs;         
                    ram p23_0 = PRAM1.         
1F28 BF090A82   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM9.         
1F2C 38195FD4   alu d = a - p ,ccs.         
1F30 9FF47A0B   alu p = d ,ccs;                 temp = restrictAngle(temp, angleTickPerEngCycle);
                    ram 002D = p23_0.         
1F34 BFEFFB84   ram p23_0 = PRAM17.         
1F38 FFE0D37F   call 1A6C,noflush.         
1F3C 9FFFFB0C   ram 0031 = p23_0.         
1F40 3BF95FD4   alu d = a ,ccs.         
1F44 3BF42FF4   alu erta = d ,ccs.              SetupMatch_A(temp, Mtcr2_Ctcr1_eq, match_low);
1F48 4AF5FE7F   chan opaca = low,         
                    tbsa = mtcr2_ctcr1_eq         
                    ,write_erta,clr_mrla         
                    .                   

                                                /* 设置flag */
                                                flag0 = FUEL_FLAG0_INACTIVE;
1F4C FF39FCFB   chan mtd = enable_mtsr;         
                    Set flag0.          
1F50                                            flag1 = FUEL_FLAG1_RAIL;
1F50 CFFAFD04   ram PRAM16 = #0(8) ;            flag1Mirror = FUEL_FLAG1_RAIL;
                    Clear flag1.         

                                                EnableEventHandling();
1F54 F73FFCFB   chan mtd = enable_mtsr;        }

ETPU "C" COMPILER 1.0.7.85                                              PAGE 195


                    end.                
014C 07 9B        05 A06 P01 MD 1E6C  HSR 0     lsr 1  m1 0  m2 0  pin 0  flag1 x  flag0 x                             
014E 07 9B        05 A07 P01 MD 1E6C  HSR 0     lsr 1  m1 0  m2 0  pin 1  flag1 x  flag0 x                             
014A 07 9B        05 A05 P01 MD 1E6C  HSR 6/7   lsr x  m1 x  m2 x  pin x  flag1 x  flag0 x                             
                                         
0000             Thread Local RAM size                                   
                                            /* 产生轨压中断的线程，角度应为预喷2起始角度提前railPressAngle */
                                            else if (m1 == 1 && m2 == 0 && flag0 == FUEL_FLAG0_INACTIVE && flag1 == FUEL_FLAG1_RAIL)
                                            {
00BA                                            unsigned int24 temp;

                                                /* 更新凸轮标记齿角度 */
1F58 CFEFF101   ram p31_24 = 0004.              if (gCamState >= CAM_MARK_VERIFIED)
1F5C 1C1F0F9E   alu a = #0x04.          
1F60 3832FFF4   alu nil = p31_24 - a ,            {
                    ccs.                
1F64 F098FBC7   if c==1 jump 1F78,flush.                edgeAngle = gCamEdgeAngle;
                                        
1F68 9FEFFB01   ram p23_0 = 0005.         
1F6C BFFFFB85   ram PRAM21 = p23_0.         
1F70                                                edgeAngleBack = edgeAngle;
                                                }
1F70 F7E0FC1F   jump 1F80,noflush.                        else
1F74 BFFFFB86   ram PRAM25 = p23_0.         
                                                {
1F78 BFEFFB86   ram p23_0 = PRAM25.                 edgeAngle = edgeAngleBack;
1F7C BFFFFB85   ram PRAM21 = p23_0.         
1F80                                            }

                                                /* 计算预喷2的起始角度 */
1F80 BFEFFB85   ram p23_0 = PRAM21.             temp = edgeAngle - tempInjArr[0] + angleOffset;
1F84 BFE80A88   alu a = p ,ccs;         
                    ram p23_0 = PRAM33.         
1F88 BC090A80   alu a = a - p ,ccs;         
                    ram p23_0 = PRAM1.         
1F8C 3B195FD4   alu d = a + p ,ccs.         
1F90 9FF47A0B   alu p = d ,ccs;                 temp = restrictAngle(temp, angleTickPerEngCycle);
                    ram 002D = p23_0.         
1F94 BFEFFB84   ram p23_0 = PRAM17.         
1F98 FFE0D37F   call 1A6C,noflush.         
1F9C 9FFFFB0C   ram 0031 = p23_0.         
1FA0 3BF95FD4   alu d = a ,ccs.         
                                                
                                                /* 根据预喷2的持续时间决定角度匹配后的输出行为 */
1FA4 BFEFFB89   ram p23_0 = PRAM37.             if (tempInjArr[1] == 0)
1FA8 3BF8FFF4   alu nil = p ,ccs.               {
1FAC F0C0FE1F   if z==0 jump 1FC0,flush.         
                                        
1FB0 3BF42FF4   alu erta = d ,ccs.                  SetupMatch_A(temp, Mtcr2_Ctcr1_eq, match_low);
1FB4 4AF5FE7F   chan opaca = low,         
                    tbsa = mtcr2_ctcr1_eq         
                    ,write_erta,clr_mrla         
                    .                   
                                                }
1FB8 F7E0FE7F   jump 1FCC,noflush.                        else

ETPU "C" COMPILER 1.0.7.85                                              PAGE 196


1FBC FF3FFCFB   chan mtd = enable_mtsr.         
                                                {
1FC0 3BF42FF4   alu erta = d ,ccs.                  SetupMatch_A(temp, Mtcr2_Ctcr1_eq, match_high);
1FC4 49F5FE7F   chan opaca = high,         
                    tbsa = mtcr2_ctcr1_eq         
                    ,write_erta,clr_mrla         
                    .                   
1FC8 FF3FFCFB   chan mtd = enable_mtsr.         
1FCC                                            }
                                                
                                                /* 设置flag1的行为，设为非轨压模式 */
                                                flag1 = FUEL_FLAG1_NORMAL;
1FCC 0C0FAFBE   alu p31_24 = #0x01;             flag1Mirror = FUEL_FLAG1_NORMAL;
                    Set flag1.          
                                                
                                                /* 切换到轨压通道，并设置通道中断 */
1FD0 CFFFF984   ram PRAM16 = p31_24.         
1FD4 CFEFF881   ram p31_0 = PRAM4.              LinkToChannel(enableChn);
1FD8 3BF21FD4   alu link = p31_24 ,ccs.         
1FDC CFEFF880   ram p31_0 = PRAM0.              LinkToChannel(railPressChn);
1FE0 6FF21FF3   alu link = p31_24 ,ccs,        }
                    end.                
0152 47 D6        05 A09 P01 ME 1F58  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 0  flag0 1                             
015A 47 D6        05 A0D P01 ME 1F58  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 0  flag0 1                             
                                         
0000             Thread Local RAM size                                   
                                            /* 预喷2的起始角度到，进入线程后开始预喷2 */
                                            else if (m1 == 1 && m2 == 0 && flag0 == FUEL_FLAG0_INACTIVE && flag1 == FUEL_FLAG1_NORMAL)
                                            {
00BA                                            unsigned int24 temp;
                                                
                                                /* 一进入就设置flag0，表示开始喷油 */
                                                flag0 = FUEL_FLAG0_ACTIVE;
                                                /* 喷油次数为0，表示预喷2 */
1FE4 CFF8FD02   ram PRAM8 = #0(8) ;             injTimes = 0;
                    Clear flag0.         
                                                /* 脉冲输出有效 */
1FE8 3DFFAFF4   alu p31_24 = 1 .                flagPulse = 1;

1FEC CFFFF983   ram PRAM12 = p31_24.    
1FF0 CFEFF101   ram p31_24 = 0004.              if (gCamState >= CAM_MARK_VERIFIED)
1FF4 1C1F0F9E   alu a = #0x04.          
1FF8 3832FFF4   alu nil = p31_24 - a ,            {
                    ccs.                
1FFC F0990087   if c==1 jump 2010,flush.                edgeAngle = gCamEdgeAngle;
                                        
2000 9FEFFB01   ram p23_0 = 0005.         
2004 BFFFFB85   ram PRAM21 = p23_0.         
2008                                                edgeAngleBack = edgeAngle;
                                                }
2008 F7E100DF   jump 2018,noflush.                        else
200C BFFFFB86   ram PRAM25 = p23_0.         
                                                {
2010 BFEFFB86   ram p23_0 = PRAM25.                 edgeAngle = edgeAngleBack;
2014 BFFFFB85   ram PRAM21 = p23_0.         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 197


2018                                            }
                                                
                                                /* 计算本次喷油结束的时刻，结束后输出无效，若喷油持续时间为0也
                                                 * 不影响结果 */
2018 BFFE7A87   alu p = erta ,ccs;              injChangeTime = erta;
                    ram PRAM29 = p23_0.         
201C CFEFF882   ram p31_0 = PRAM8.              temp = injChangeTime + tempInjArr[(injTimes << 1) + 1];
2020 3BF20FF5   alu a = p31_24 <<1,ccs.         
2024 39F90FF4   alu a = a + 1 ,ccs.         
2028 3B394FF5   alu diob = a + a <<1,ccs         
                    .                   
202C 188B4782   alu diob = diob + #0x20,         
                    ccs.                
2030 3B7A4FB4   alu                     
                    diob = chan_base + diob          
                    ,ccs.               
2034 FFEFFAD9   ram p23_0 = (diob).         
2038 BFE80A87   alu a = p ,ccs;         
                    ram p23_0 = PRAM29.         
203C 3B195FD4   alu d = a + p ,ccs.         
2040 3BF43FF4   alu ertb = d ,ccs.              SetupMatch_B(temp, Mtcr1_Ctcr2_ge, match_low);
2044 4F5F2F9F   chan opacb = low,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
                                                
                                                /* 计算下次喷油开始的角度，预喷2的下次喷油为预喷1 */
2048 DF2FF882   ram p31_0 = PRAM8;              temp = edgeAngle - tempInjArr[(injTimes + 1) << 1] + angleOffset;
                    chan mtd = enable_mtsr         
                    .                   
204C 39F20FF4   alu a = p31_24 + 1 ,ccs.         
                                        
2050 3BF90FF5   alu a = a <<1,ccs.         
2054 B3294A85   alu diob = a + a <<1 ,         
                    ccs;                
                    ram p23_0 = PRAM21.         
2058 3BF80FF4   alu a = p ,ccs.         
205C 188B4782   alu diob = diob + #0x20,         
                    ccs.                
2060 3B7A4FB4   alu                     
                    diob = chan_base + diob          
                    ,ccs.               
2064 FFEFFAD9   ram p23_0 = (diob).         
2068 BC090A80   alu a = a - p ,ccs;         
                    ram p23_0 = PRAM1.         
206C 3B195FD4   alu d = a + p ,ccs.         
2070 9FF47A0B   alu p = d ,ccs;                 temp = restrictAngle(temp, angleTickPerEngCycle);
                    ram 002D = p23_0.         
2074 BFEFFB84   ram p23_0 = PRAM17.         
2078 FFE0D37F   call 1A6C,noflush.         
207C 9FFFFB0C   ram 0031 = p23_0.         
2080 3BF95FD4   alu d = a ,ccs.         
                                                
                                                ClearMatchAEvent();
                                                /* 若下次喷油角度在未来，则可以直接调度 */

ETPU "C" COMPILER 1.0.7.85                                              PAGE 198


2084 7FFFFEFF   chan clr_mrla.          
2088 9FF47A0E   alu p = d ,ccs;                 if (judgeFuture(temp, tcr2, angleTickPerEngCycle) == 1)
                    ram 0039 = p23_0.         
208C 9FFD7A0F   alu p = tcr2 ,ccs;         
                    ram 003D = p23_0.         
2090 BFEFFB84   ram p23_0 = PRAM17.         
2094 FFE0D65F   call 1AC8,noflush.              {
2098 9FFFFB10   ram 0041 = p23_0.         
209C 3AF9FFF4   alu nil = a -1 ,ccs.         
20A0 F0C1057F   if z==0 jump 20AC,flush.         
                                        
20A4                                                erta = temp;
                                                }
                                                /* 若下次喷油角度在过去，则立即开始 */
20A4 F7E1059F   jump 20B0,noflush.                        else
20A8 3BF42FF4   alu erta = d ,ccs.         
                                                {
                                                    erta = tcr2 + 1;
20AC 39FD2FF4   alu erta = tcr2 + 1 ,ccs         
                    .                   
20B0                                            }
                                                /* 若下次喷油持续时间为0，则不改变引脚状态 */
20B0 CFEFF882   ram p31_0 = PRAM8.              if (tempInjArr[((injTimes + 1) << 1) + 1] == 0)
20B4 39F20FF4   alu a = p31_24 + 1 ,ccs.            {
                                        
20B8 3BF90FF5   alu a = a <<1,ccs.         
20BC 39F90FF4   alu a = a + 1 ,ccs.         
20C0 3B394FF5   alu diob = a + a <<1,ccs         
                    .                   
20C4 188B4782   alu diob = diob + #0x20,         
                    ccs.                
20C8 3B7A4FB4   alu                     
                    diob = chan_base + diob          
                    ,ccs.               
20CC FFEFFAD9   ram p23_0 = (diob).         
20D0 3BF80FF4   alu a = p ,ccs.         
20D4 F0C1071F   if z==0 jump 20E0,flush.         
                                        
20D8                                                OnMatchAPinLow();
                                                }
                                                /* 若下次喷油持续时间不为0，则输出高 */
20D8 F7E1073F   jump 20E4,noflush.                        else
20DC 4AFFFFFF   chan opaca = low.         
                                                {
                                                    OnMatchAPinHigh();
20E0 49FFFFFF   chan opaca = high.         
20E4                                            }
                                                ActionUnitA(MatchTCR2, CaptureTCR1, EqualOnly);
                                                WriteErtAToMatchAAndEnable();
20E4 47F5FF7F                               }
                    chan tbsa = mtcr2_ctcr1_eq         
                    ,write_erta,end.         
0156 47 F9        05 A0B P01 ME 1FE4  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 1  flag0 1                             
015E 47 F9        05 A0F P01 ME 1FE4  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 1  flag0 1                             
                                         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 199


0000             Thread Local RAM size                                   
                                            /* 下次喷油开始，1~4，即预喷1到后喷2 */
                                            else if (m1 == 1 && flag0 == FUEL_FLAG0_ACTIVE)
                                            {
00BA                                            unsigned int24 temp;
                                                
                                                /* 进入线程后累加喷油次数，以便更新时判断具体次数 */
20E8 CFEFF882   ram p31_0 = PRAM8.              injTimes++;
20EC 31F2AFF4   alu p31_24 = p31_24 + 1          
                    ,ccs8.              
                                                /* 脉冲有效 */
20F0 CFFFF982   ram PRAM8 = p31_24.         
20F4 3DFFAFF4   alu p31_24 = 1 .                flagPulse = 1;

20F8 CFFFF983   ram PRAM12 = p31_24.    
20FC CFEFF101   ram p31_24 = 0004.              if (gCamState >= CAM_MARK_VERIFIED)
2100 1C1F0F9E   alu a = #0x04.          
2104 3832FFF4   alu nil = p31_24 - a ,            {
                    ccs.                
2108 F09908E7   if c==1 jump 211C,flush.                edgeAngle = gCamEdgeAngle;
                                        
210C 9FEFFB01   ram p23_0 = 0005.         
2110 BFFFFB85   ram PRAM21 = p23_0.         
2114                                                edgeAngleBack = edgeAngle;
                                                }
2114 F7E1093F   jump 2124,noflush.                        else
2118 BFFFFB86   ram PRAM25 = p23_0.         
                                                {
211C BFEFFB86   ram p23_0 = PRAM25.                 edgeAngle = edgeAngleBack;
2120 BFFFFB85   ram PRAM21 = p23_0.         
2124                                            }
                                                
                                                /* 计算本次喷油的结束时间 */
2124 BFFE7A87   alu p = erta ,ccs;              injChangeTime = erta;
                    ram PRAM29 = p23_0.         
2128 CFEFF882   ram p31_0 = PRAM8.              temp = injChangeTime + tempInjArr[(injTimes << 1) + 1];
212C 3BF20FF5   alu a = p31_24 <<1,ccs.         
2130 39F90FF4   alu a = a + 1 ,ccs.         
2134 3B394FF5   alu diob = a + a <<1,ccs         
                    .                   
2138 188B4782   alu diob = diob + #0x20,         
                    ccs.                
213C 3B7A4FB4   alu                     
                    diob = chan_base + diob          
                    ,ccs.               
2140 FFEFFAD9   ram p23_0 = (diob).         
2144 BFE80A87   alu a = p ,ccs;         
                    ram p23_0 = PRAM29.         
2148 3B195FD4   alu d = a + p ,ccs.         
214C 3BF43FF4   alu ertb = d ,ccs.              SetupMatch_B(temp, Mtcr1_Ctcr2_ge, match_low);
2150 4F5F2F9F   chan opacb = low,         
                    tbsb = mtcr1_ctcr2_ge         
                    ,write_ertb,clr_mrlb         
                    .                   
                                                

ETPU "C" COMPILER 1.0.7.85                                              PAGE 200


                                                /* 计算下次喷油开始的角度 */
                                                /* 如果已经本次已经是最后一次喷油，则需要调度轨压角度，并认为轨压角度
                                                 * 一定发生在未来，此处不去判断 */
2154 DF2FF882   ram p31_0 = PRAM8;              if (injTimes >= 4)
                    chan mtd = enable_mtsr    
                    .                   
2158 1C1F0F9E   alu a = #0x04.          
215C 3832FFF4   alu nil = p31_24 - a ,         
                    ccs.                
2160 F0890CCD   if c==1 jump 2198,flush;        {
                                                    /* 计算产生轨压中断的角度 */
2160 F0890CCD   if c==1 jump 2198,flush;                temp = edgeAngle - tempInjArr[0] + angleOffset - railPressAngle;
                    ram p23_0 = PRAM21.         
2164 BFE80A88   alu a = p ,ccs;         
                    ram p23_0 = PRAM33.         
2168 BC090A80   alu a = a - p ,ccs;         
                    ram p23_0 = PRAM1.         
216C BF090A82   alu a = a + p ,ccs;         
                    ram p23_0 = PRAM9.         
2170 38195FD4   alu d = a - p ,ccs.         
2174 9FF47A0B   alu p = d ,ccs;                     temp = restrictAngle(temp, angleTickPerEngCycle);
                    ram 002D = p23_0.         
2178 BFEFFB84   ram p23_0 = PRAM17.         
217C FFE0D37F   call 1A6C,noflush.         
2180 9FFFFB0C   ram 0031 = p23_0.         
2184 3BF95FD4   alu d = a ,ccs.         
2188 3BF42FF4   alu erta = d ,ccs.                  SetupMatch_A(temp, Mtcr2_Ctcr1_eq, match_low);
218C 4AF5FE7F   chan opaca = low,         
                    tbsa = mtcr2_ctcr1_eq         
                    ,write_erta,clr_mrla         
                    .                   
                                                }
                                                /* 如果本次不是最后一次喷油，则计算下次喷油的起始角度 */
2190 F7E111DF   jump 2238,noflush.                        else
2194 FF3FFCFB   chan mtd = enable_mtsr.         
                                                {
                                                    /* 计算下次喷油的起始角度 */
2198 CFEFF882   ram p31_0 = PRAM8.                  temp = edgeAngle - tempInjArr[(injTimes + 1) << 1] + angleOffset;
219C 39F20FF4   alu a = p31_24 + 1 ,ccs.         
                                        
21A0 3BF90FF5   alu a = a <<1,ccs.         
21A4 B3294A85   alu diob = a + a <<1 ,         
                    ccs;                
                    ram p23_0 = PRAM21.         
21A8 3BF80FF4   alu a = p ,ccs.         
21AC 188B4782   alu diob = diob + #0x20,         
                    ccs.                
21B0 3B7A4FB4   alu                     
                    diob = chan_base + diob          
                    ,ccs.               
21B4 FFEFFAD9   ram p23_0 = (diob).         
21B8 BC090A80   alu a = a - p ,ccs;         
                    ram p23_0 = PRAM1.         
21BC 3B195FD4   alu d = a + p ,ccs.         
21C0 9FF47A0B   alu p = d ,ccs;                     temp = restrictAngle(temp, angleTickPerEngCycle);

ETPU "C" COMPILER 1.0.7.85                                              PAGE 201


                    ram 002D = p23_0.         
21C4 BFEFFB84   ram p23_0 = PRAM17.         
21C8 FFE0D37F   call 1A6C,noflush.         
21CC 9FFFFB0C   ram 0031 = p23_0.         
21D0 3BF95FD4   alu d = a ,ccs.         
                                                    
                                                    ClearMatchAEvent();
                                                    /* 若下次喷油角度在未来，则可以直接调度 */
21D4 7FFFFEFF   chan clr_mrla.          
21D8 9FF47A0E   alu p = d ,ccs;                     if (judgeFuture(temp, tcr2, angleTickPerEngCycle) == 1)
                    ram 0039 = p23_0.         
21DC 9FFD7A0F   alu p = tcr2 ,ccs;         
                    ram 003D = p23_0.         
21E0 BFEFFB84   ram p23_0 = PRAM17.         
21E4 FFE0D65F   call 1AC8,noflush.                  {
21E8 9FFFFB10   ram 0041 = p23_0.         
21EC 3AF9FFF4   alu nil = a -1 ,ccs.         
21F0 F0C10FFF   if z==0 jump 21FC,flush.         
                                        
21F4                                                    erta = temp;
                                                    }
                                                    /* 若下次喷油角度在过去，则立即开始 */
21F4 F7E1101F   jump 2200,noflush.                            else
21F8 3BF42FF4   alu erta = d ,ccs.         
                                                    {
                                                        erta = tcr2 + 1;
21FC 39FD2FF4   alu erta = tcr2 + 1 ,ccs         
                    .                   
2200                                                }
                                                    /* 若下次喷油持续时间为0，则不改变引脚状态 */
2200 CFEFF882   ram p31_0 = PRAM8.                  if (tempInjArr[((injTimes + 1) << 1) + 1] == 0)
2204 39F20FF4   alu a = p31_24 + 1 ,ccs.                {
                                        
2208 3BF90FF5   alu a = a <<1,ccs.         
220C 39F90FF4   alu a = a + 1 ,ccs.         
2210 3B394FF5   alu diob = a + a <<1,ccs         
                    .                   
2214 188B4782   alu diob = diob + #0x20,         
                    ccs.                
2218 3B7A4FB4   alu                     
                    diob = chan_base + diob          
                    ,ccs.               
221C FFEFFAD9   ram p23_0 = (diob).         
2220 3BF80FF4   alu a = p ,ccs.         
2224 F0C1119F   if z==0 jump 2230,flush.         
                                        
2228                                                    OnMatchAPinLow();
                                                    }
                                                    /* 若下次喷油持续时间不为0，则输出高 */
2228 F7E111BF   jump 2234,noflush.                            else
222C 4AFFFFFF   chan opaca = low.         
                                                    {
                                                        OnMatchAPinHigh();
2230 49FFFFFF   chan opaca = high.         
2234                                                }

ETPU "C" COMPILER 1.0.7.85                                              PAGE 202


                                                        ActionUnitA(MatchTCR2, CaptureTCR1, EqualOnly);
                                                     WriteErtAToMatchAAndEnable();
2234 4FF5FF7F                           
                    chan tbsa = mtcr2_ctcr1_eq         
                    ,write_erta.         
2238                                            }
2238 6FFFFFFF   end.                        }
0150 48 3A        05 A08 P01 ME 20E8  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 0  flag0 0                             
0154 48 3A        05 A0A P01 ME 20E8  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 1  flag0 0                             
0158 48 3A        05 A0C P01 ME 20E8  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 0  flag0 0                             
015C 48 3A        05 A0E P01 ME 20E8  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 1  flag0 0                             
0170 48 3A        05 A18 P01 ME 20E8  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 0  flag0 0                             
0174 48 3A        05 A1A P01 ME 20E8  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 1  flag0 0                             
0178 48 3A        05 A1C P01 ME 20E8  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 0  flag0 0                             
017C 48 3A        05 A1E P01 ME 20E8  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 1  flag0 0                             
                                         
0000             Thread Local RAM size                                   
                                            /* 喷油结束，即MatchB线程 */
                                            else if (m1 == 0 && m2 == 1 && flag0 == FUEL_FLAG0_ACTIVE)
                                            {
00BA                                            unsigned int24 temp;

                                                temp = ertb;
                                                ClearMatchBEvent();
223C 7FF35FB3   alu d = ertb ,ccs;         
                    chan clr_mrlb.         
2240 CFFFFD03   ram PRAM12 = #0(8) .            flagPulse = 0;
                                                
                                                /* 若喷油次数结束，则置标志 */
2244 CFEFF882   ram p31_0 = PRAM8.              if (injTimes >= 4)
2248 1C1F0F9E   alu a = #0x04.          
224C 3832FFF4   alu nil = p31_24 - a ,            {
                    ccs.                
2250 F089135F   if c==1 jump 2268,flush.         
                                        
2254                                                flag0 = FUEL_FLAG0_INACTIVE;
2254 FFF9FCF9   Set flag0.              
2258                                                flag1 = FUEL_FLAG1_RAIL;
2258 CFFAFD04   ram PRAM16 = #0(8) ;                flag1Mirror = FUEL_FLAG1_RAIL;
                    Clear flag1.         

225C 18C437C2   alu ertb = d + #0x32,ccs                SetupMatch_B(temp + 50, Mtcr2_Ctcr2_eq, match_no_change);
                    .                   
2260 4F1F7F9F   chan opacb = no_change,         
                    tbsb = mtcr2_ctcr2_eq         
                    ,write_ertb,clr_mrlb         
                    .                   
                                                }
2264 FF3FFCFB   chan mtd = enable_mtsr.         
2268 6FFFFFFF   end.                        }
0160 48 8F        05 A10 P01 ME 223C  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 0  flag0 0                             
0164 48 8F        05 A12 P01 ME 223C  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 1  flag0 0                             
0168 48 8F        05 A14 P01 ME 223C  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 0  flag0 0                             
016C 48 8F        05 A16 P01 ME 223C  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 1  flag0 0                             
                                         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 203


0000             Thread Local RAM size                                   
                                            else if (m1 == 0 && m2 == 1 && flag0 == FUEL_FLAG0_INACTIVE)
                                            {
                                                ClearMatchBEvent();
226C DFEFD881   ram p31_0 = PRAM4;              LinkToChannel(enableChn);
                    chan clr_mrlb.         
2270 6FF21FF3   alu link = p31_24 ,ccs,        }
                    end.                
0162 48 9B        05 A11 P01 ME 226C  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 0  flag0 1                             
0166 48 9B        05 A13 P01 ME 226C  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 1  flag0 1                             
016A 48 9B        05 A15 P01 ME 226C  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 0  flag0 1                             
016E 48 9B        05 A17 P01 ME 226C  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 1  flag0 1                             
                                         
0000             Thread Local RAM size                                   
                                            /* 其他任何线程 */
                                            else
                                            {
                                        #ifdef GLOBAL_ERROR_FUNC
2274 FFC116BF   call 22D4,flush.                        Global_Error_Func();
                                        #else
                                                ClearAllLatches();
                                        #endif
2278 6FFFFFFF   end.                        }
0148 C8 9D        05 A04 P23 ME 2274  HSR 1/4/5 lsr x  m1 x  m2 x  pin x  flag1 x  flag0 x                             
0172 C8 9D        05 A19 P23 ME 2274  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 0  flag0 1                             
0176 C8 9D        05 A1B P23 ME 2274  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 1  flag0 1                             
017A C8 9D        05 A1D P23 ME 2274  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 0  flag0 1                             
017E C8 9D        05 A1F P23 ME 2274  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 1  flag0 1                             
                                         
0000             Thread Local RAM size                                   
0000             Local RAM requirements for eTPU Function FuelMain                                   
                                        }


                                        /* Information exported to Host CPU program */
227C                                    #pragma write h, (::ETPUfilename (etpu_fuel_auto.h));
227C                                    #pragma write h, (/*******************************************************************************);
227C                                    #pragma write h, ( * 版权 2015-2016 中国航空工业集团第六三一所第十八研究室                        );
227C                                    #pragma write h, ( *                                                                              );
227C                                    #pragma write h, ( * 对本文件的拷贝、发布、修改或者其他任何用途必须得到中国航空工业集团第六三一所 );
227C                                    #pragma write h, ( * 的书面协议许可。                                                             );
227C                                    #pragma write h, ( *                                                                              );
227C                                    #pragma write h, ( * Copyrights (2015-2016) ACTRI                                                 );
227C                                    #pragma write h, ( * All Right Reserved                                                           );
227C                                    #pragma write h, ( *******************************************************************************);
227C                                    #pragma write h, (                                                                                );
227C                                    #pragma write h, ( *******************************************************************************);
227C                                    #pragma write h, ( * Revision History                                                             );
227C                                    #pragma write h, ( *------------------------------------------------------------------------------);
227C                                    #pragma write h, ( * 2017-12-07, gbo, created                                                     );
227C                                    #pragma write h, ( *******************************************************************************);
227C                                    #pragma write h, ( );
227C                                    #pragma write h, ( *******************************************************************************);
227C                                    #pragma write h, ( * content                                                                      );
227C                                    #pragma write h, ( *------------------------------------------------------------------------------);

ETPU "C" COMPILER 1.0.7.85                                              PAGE 204


227C                                    #pragma write h, ( *  File            : etpuc_fuel_auto.h                                          );
227C                                    #pragma write h, ( *  Description     : 燃油喷射头文件                                      );
227C                                    #pragma write h, ( *  Call            : 029-89186510                                              );
227C                                    #pragma write h, ( *  该文件由ETPU自动生成，请勿修改！！！                                        );
227C                                    #pragma write h, ( ******************************************************************************/);
227C                                    #pragma write h, (#ifndef _ETPU_FUEL_AUTO_H_ );
227C                                    #pragma write h, (#define _ETPU_FUEL_AUTO_H_ );
227C                                    #pragma write h, ( );
227C                                    #pragma write h, (/* Function Configuration Information */);
227C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_FUEL_FUNCTION_NUMBER) FUEL_FUNCTION_NUMBER );
227C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_FUEL_TABLE_SELECT) ::ETPUentrytype(FuelMain) );
227C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_FUEL_NUM_PARMS) ::ETPUram(FuelMain) );
227C                                    #pragma write h, ( );
227C                                    #pragma write h, (/* Host Service Request Definitions */);
227C                                    #pragma write h, (/* 喷油初始化 */);
227C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_FUEL_INIT) FUEL_INIT );
227C                                    #pragma write h, (/* 更新喷油时间序列 */);
227C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_FUEL_INJ_TIME_UPDATE) FUEL_INJ_TIME_UPDATE );
227C                                    #pragma write h, ( );
227C                                    #pragma write h, (/* Parameter Definitions */);
227C                                    #pragma write h, (/* 本缸角度偏移，以TCR2个数为单位 */);
227C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_FUEL_ANGLE_OFFSET_OFFSET) ::ETPUlocation (FuelMain, angleOffset) );
227C                                    #pragma write h, (/* 保存喷油持续时间和相邻喷油间隔时间的数组，数组应包含9个元素，其中：);
227C                                    #pragma write h, ( * 元素0和1分别表示预喷2的持续时间，预喷2到预喷1的间隔时间；);
227C                                    #pragma write h, ( * 元素2和3分别表示预喷1的持续时间，预喷1到主喷的间隔时间；);
227C                                    #pragma write h, ( * 元素4和5分别表示主喷的持续时间，主喷到后喷1的间隔时间；);
227C                                    #pragma write h, ( * 元素6和7分别表示后喷1的持续时间，后喷1到后喷2的间隔时间；);
227C                                    #pragma write h, ( * 元素8表示后喷2的持续时间 */);
227C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_FUEL_P_INJ_TIME_ARR_OFFSET) ::ETPUlocation (FuelMain, pInjTimeArr));
227C                                    #pragma write h, (/* 轨压中断产生比第一次喷油提前的角度 */);
227C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_FUEL_RAIL_PRESS_ANGLE_OFFSET) ::ETPUlocation (FuelMain, railPressAngle));
227C                                    #pragma write h, (/* 凸轮标记齿对应的角度计数，认为这个角度是1缸上止点 */);
227C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_FUEL_EXPR_EDGE_ANGLE_OFFSET) ::ETPUlocation (FuelMain, exprEdgeAngle));
227C                                    #pragma write h, (/* 引擎每圈的角度计数值，应为36000 */);
227C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_FUEL_ANGLE_TICK_PER_ENG_CYCLE_OFFSET) ::ETPUlocation (FuelMain, angleTickPerEngCycle));
227C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_FUEL_RAIL_PRESS_CHN_OFFSET) ::ETPUlocation (FuelMain, railPressChn));
227C                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_FUEL_ENABLE_CHN_OFFSET) ::ETPUlocation (FuelMain, enableChn));
227C                                    #pragma write h, ( );
227C                                    #pragma write h, (#endif /* _ETPU_PWM_AUTO_H_ */);
227C                                    #pragma write h, ( );


00000006                                #define RAIL_FUNCTION_NUMBER 6
                                        #include "etpuc_rail.c"
                                        #include <eTPUc_common.h>
                                        #ifndef __ETPUC_COMMON_H
                                        #define __ETPUC_COMMON_H

                                        /********************************************************************************

                                         FILE NAME: etpuc_common.h

                                         COPYRIGHT (c) ASH WARE, Byte Craft Limited, Freescale 2002-2004.
                                         All Rights Reserved.


ETPU "C" COMPILER 1.0.7.85                                              PAGE 205


                                         VERSION:  1.0

                                         This file is maintained as part of the support for the eTPU_C
                                         development tools by Byte Craft Limited.

                                         This code may be adapted for any purpose when used with the eTPU_C
                                         Code Development System.  No warranty is implied or given as to their
                                         usability for any purpose.

                                         Portions of this file are governed by the following copyrights and
                                         terms:

                                         (c) Freescale 2002-2004 FREESCALE, INC. All Rights Reserved.
                                         *  You are hereby granted a copyright license to use, modify, and
                                         *  distribute the SOFTWARE so long as this entire notice is
                                         *  retained without alteration in any modified and/or redistributed
                                         *  versions, and that such modified versions are clearly identified
                                         *  as such. No licenses are granted by implication, estoppel or
                                         *  otherwise under any patents or trademarks of Freescale, Inc. This
                                         *  software is provided on an "AS IS" basis and without warranty.
                                         *
                                         *  To the maximum extent permitted by applicable law, FREESCALE
                                         *  DISCLAIMS ALL WARRANTIES WHETHER EXPRESS OR IMPLIED, INCLUDING
                                         *  IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
                                         *  PURPOSE AND ANY WARRANTY AGAINST INFRINGEMENT WITH REGARD TO THE
                                         *  SOFTWARE (INCLUDING ANY MODIFIED VERSIONS THEREOF) AND ANY
                                         *  ACCOMPANYING WRITTEN MATERIALS.
                                         *
                                         *  To the maximum extent permitted by applicable law, IN NO EVENT
                                         *  SHALL FREESCALE BE LIABLE FOR ANY DAMAGES WHATSOEVER (INCLUDING
                                         *  WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
                                         *  INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR OTHER PECUNIARY
                                         *  LOSS) ARISING OF THE USE OR INABILITY TO USE THE SOFTWARE.
                                         *
                                         *  Freescale assumes no responsibility for the maintenance and support
                                         *  of this software

                                         (c) Copyright 2002-2004 Byte Craft Limited
                                         421 King St.N., Waterloo, ON, Canada, N2J 4E4
                                         VOICE: 1 (519) 888 6911
                                         email: support@bytecraft.com

                                         (c) Copyright 2002-2004 ASH WARE

                                        ================================================================================

                                        DESCRIPTION: This file defines the application-friendly macros,
                                        functions for common tasks like channel set up and register control
                                        field access.

                                        ================================================================================

                                        SOURCES:

                                        etpuc_common.h is based on the following header files commonly used by

ETPU "C" COMPILER 1.0.7.85                                              PAGE 206


                                        the eTPU development community:

                                        AshWareETpu.h - developed by Andy Klumpp from ASH WARE
                                        Mike.h - developed by Mike Pauwels from Freescale
                                        etpu_common.h - developped by Ming Li from Freescale

                                        Jeff Loeliger from Freescale and Walter Banks from Byte Craft
                                        also made significant contibutions.

                                        ================================================================================
                                         UPDATE HISTORY
                                         REV      AUTHOR        DATE                DESCRIPTION OF CHANGE
                                         ---      -------      --------    ---------------------
                                         0.0      Ming Li      10/30/03    Initial creation
                                         0.1      Ming Li      11/12/03    Updated to incorporate comments from eTPU
                                                                           development community.
                                         0.2      Walter Banks 15 Dec 03   Made changes to be reflect definitions in
                                                                           eTPUc.h
                                                                           Corrected IsTransALatched()
                                                                                     IsTransBLatched()
                                                                           Added missing definitions
                                                                                     set_pin_per_opacA
                                                                                     set_pin_per_opacB
                                                                                     force_pin_high
                                                                                     force_pin_low
                                                                           Corrected opac1 to opacA
                                                                                     opac2 to opacB

                                         0.3      Walter Banks  5 Jan 04   Corrected opacB = pin_action; to
                                                                               opacA = pin_action;

                                         0.4     J. Loeliger    21/Jan/04  Cleared up reorganized and added more:
                                                                           -Moved TRUE & FALSE to top and added
                                                                              conditional
                                                                           -Moved entry conditions up and added macros
                                                                              for all conditions
                                                                           -Merged with AshWareETpu.h
                                                                              -Removed commet with of PDCM names.
                                                                           -Grouped latches and flags together.
                                                                             -added new set and clear for latches and
                                                                                flags
                                                                           -Merged output pin value to 1 set rather
                                                                              than 2
                                                                           -Added long channel mode names.
                                                                           -Added SetupMatch_AB for better
                                                                              optimization
                                                                           -Added match only conditions for output
                                                                              functions.
                                                                           -Added new ActionUnintA/B macros
                                                                           -Added new Pin macro
                                                                           -And more.
                                         0.5     J. Loeliger     12/Feb/04 -Changed DetectTrans to OnTrans.
                                         0.6     J. Loeliger     30/Mar/04 -Added SetupMatchB and fixed some old
                                                                             references to 1 & 2 -> A & B
                                         0.7     J. Loeliger     16/Apr/04 -Changed Disable match (MRLE) to =0

ETPU "C" COMPILER 1.0.7.85                                              PAGE 207


                                         0.8     J. Loeliger     27/Apr/04 -Fixed Disable/Enable match in thread,
                                                                              they were swapped.
                                         0.9     J. Loeliger     10/May/04 -Added support for OBE with new
                                                 M. Brejl                   EnableOutputBuffer()/DisableOutputBuffer()
                                                                            Removed all // comments. Changed Motorola
                                                                            to Freescale.
                                                                            Fixed spelling mistake in GetCurentChanNum

                                         0.4     Karen McMurray  19 May 04  Changed all ertA to erta
                                                                                        ertB to ertb.

                                         1.0     Kirk Zurell     11 Aug 04  Integrated etpuc_common.h from J. Loeliger
                                                                            and etpuc_common.h from Byte Craft Limited.
                                                                            Removed tabs & made comments more sustainable.
                                                                            Conditionalized some definitions to be more
                                                                            economical on symbols.

                                                                            Divider lines have 80 asterices.

                                        */



                                        /********************************************************************************/

                                        /* This file depends upon definitions from etpuc.h */

                                        #ifndef __ETPUC_H
                                        #include <etpuc.h>
                                        #endif /* __ETPUC_H */


                                        /********************************************************************************/

                                        /* Constant definitions */

                                        #ifndef TRUE
                                        #define TRUE        1
                                        #endif

                                        #ifndef FALSE
                                        #define FALSE       0
                                        #endif


                                        /********************************************************************************/

                                        /* State Resolution Flags, and other latches */

                                        /* Clear() definitions */
                                        #define LSRLatch      lsr
                                        #define LatchedMatchA mrlA
                                        #define LatchedMatchB mrlB
                                        #define TransLatch    tdl


ETPU "C" COMPILER 1.0.7.85                                              PAGE 208


                                        /* Macros */

                                        /* Set flag0 or flag1
                                           Usage: Set(flag0 | flag1);*/

                                        #define Set(cond)     (cond = 1)

                                        /* Clear a flag
                                           Usage: Clear(flag0 | flag1 | LSRLatch | lsr | MatchALatch | mrlA |
                                                         MatchBLatch | mrlB | TransLatch | tdl);         */

                                        #define Clear(cond)   (cond = 0)

                                        /* SYNONYMS */
                                        /* Flag 0 & flag 1 */
                                        #define ClrFlag0()  (channel.FLAG0 = 0)
                                        #define SetFlag0()  (channel.FLAG0 = 1)
                                        #define ClrFlag1()  (channel.FLAG1 = 0)
                                        #define SetFlag1()  (channel.FLAG1 = 1)


                                        #define FunctionMode0          channel.FM0
                                        #define IsFunctionMode0()     (channel.FM0==1)
                                        #define IsSampledFuncMode0()  (channel.FM0==1)
                                        #define IsLatchedFuncMode0()  (channel.FM0==1)

                                        #define FunctionMode1          channel.FM1
                                        #define IsFunctionMode1()     (channel.FM1==1)
                                        #define IsSampledFuncMode1()  (channel.FM1==1)
                                        #define IsLatchedFuncMode1()  (channel.FM1==1)


                                        /********************************************************************************/

                                        /* Writing the match registers and enabling/disabling the Match
                                           Recognition Latch Enable */

                                        #define EnableMatchA()                 (channel.ERWA = 0)
                                        #define EnableMatchB()                 (channel.ERWB = 0)
                                        #define DisableMatch()                 (channel.MRLE = 0)

                                        /* SYNONYMS */
                                        #define WriteErtAToMatchAAndEnable()   channel.ERWA = 0
                                        #define WriteErtBToMatchBAndEnable()   channel.ERWB = 0
                                        #define DisableMatchDetection();       channel.MRLE = 0


                                        /* Read capture register */
                                        #define GetCapRegA()  (erta)
                                        #define GetCapRegB()  (ertb)

                                        /* Clear Latch */
                                        #define ClearLSRLatch()       (channel.LSR  = 0)

                                        #define ClearMatchALatch()    (channel.MRLA = 0)

ETPU "C" COMPILER 1.0.7.85                                              PAGE 209


                                        #define ClearMatchBLatch()    (channel.MRLB = 0)

                                        #define ClearTransLatch()     (channel.TDL = 0)

                                        /* SYNONYMS */
                                        #define ClearLinkServiceRequestEvent() (lsr  = 0)

                                        #define ClearMatchAEvent()    (channel.MRLA = 0)
                                        #define ClearMatchBEvent()    (channel.MRLB = 0)

                                        #define ClearTransitionEvents() (channel.TDL = 0)



                                        /* Test latch conditions */

                                        #define TransitionALatch           channel.TDLA
                                        #define IsTransALatched()         (channel.TDLA==1)

                                        #define TransitionBLatch           channel.TDLB
                                        #define IsTransBLatched()         (channel.TDLB==1)

                                        #define MatchALatch            channel.MRLA
                                        #define IsMatchALatched()     (channel.MRLA==1)

                                        #define MatchBLatch            channel.MRLB
                                        #define IsMatchBLatched()     (channel.MRLB==1)

                                        /* SYNONYMS */
                                        #define IsLatchedTransitionA()    (channel.TDLA==1)
                                        #define IsLatchedTransitionB()    (channel.TDLB==1)
                                        #define IsLatchedMatchA()         (channel.MRLA==1)
                                        #define IsLatchedMatchB()         (channel.MRLB==1)



                                        /********************************************************************************/

                                        /* Enabling/Disabling Event Handling */

                                        #define EnableEventHandling()                   (channel.MTD = 0)
                                        #define DisableEventHandling()                  (channel.MTD = 1)

                                        /* SYNONYMS */
                                        #define EnableMatchAndTransitionEventHandling()  channel.MTD = 0
                                        #define DisableMatchAndTransitionEventHandling() channel.MTD = 1


                                        /********************************************************************************/

                                        /* Semaphore Operations */

                                        #define IsSemaphoreLocked()   (channel.SMPR == 1)
                                        #define LockSemaphore(num)    (channel.SMPR = num)
                                        #define FreeSemaphore()       (channel.SMPR = -1)

ETPU "C" COMPILER 1.0.7.85                                              PAGE 210




                                        /********************************************************************************/

                                        /* Exceptions */

                                        /* Channel control macros */
                                        #define SetChannelInterrupt()       (channel.CIRC = 0)
                                        #define SetChannelInterruptRequest()(channel.CIRC = 0)

                                        #define SetDataTransferInterrupt()        (channel.CIRC = 1)
                                        #define SetDataTransferInterruptRequest() (channel.CIRC = 1)

                                        #define SetGlobalException()  (channel.CIRC = 2)

                                        /* Channel control */

                                        /* Generate the link service request to channel[ChNum] */
                                        #define LinkToChannel(ChNum)            (link = ChNum)
                                        #define LinkTo(num)                 link = num;
                                        #define LinkToEngine1Chan(num)      link = (num | (1<<6))
                                        #define LinkToEngine2Chan(num)      link = (num | (2<<6))
                                        #define LinkToOtherEngineChan(num)  link = (num | (3<<6))

                                        /* switch to specified channel from current channel */
                                        #define SwitchToChannel(ChNum)      (chan = ChNum)

                                        /* return current channel number */
                                        #define GetCurrentChanNum()         (chan)

                                        /* branch condition */
                                        #define LinkServiceRequest     channel.LSR
                                        #define IsLinkReqActive()     (channel.LSR==1)
                                        #define IsSampledLink()       (channel.LSR==1)
                                        #define IsLatchedLink()       (channel.LSR==1)


                                        /********************************************************************************/

                                        /* Entry Conditions Definition */

                                        /* Usage: use these in the if()/else if()/else structure in an
                                           ETPU_function */

                                        #define HostServiceRequest               hsr
                                        #define IsHostServiceRequestEvent(num)   (hsr==num)

                                        #define MatchA_TransB                    (m1==1)
                                        #define matchA_transB                    (m1==1)
                                        #define IsMatchAOrTransitionBEvent()     (m1==1)

                                        #define MatchB_TransA                    (m2==1)
                                        #define matchB_transA                    (m2==1)
                                        #define IsMatchBOrTransitionAEvent()     (m2==1)


ETPU "C" COMPILER 1.0.7.85                                              PAGE 211


                                        #define linkRequest                      (lsr==1)
                                        #define IsLinkServiceRequestEvent()      (lsr==1)

                                        /* For output-only functions */
                                        #define MatchA                           (m1==1)
                                        #define MatchB                           (m2==1)


                                        /********************************************************************************/

                                        /* Predefined Channel Modes (PDCM) */

                                        #define SetChannelMode(mode)        (channel.PDCM = mode)
                                        #define channel_setup channel.PDCM

                                        /* Usage:       channel_setup = PDCM_constant

                                        PDCM_constants are taken from etpuc.h:
                                        em_b_st         Either Match, Blocking, Single Transition
                                        em_b_dt         Either Match, Blocking, Double Transition
                                        em_nb_st        Either Match, NonBlocking, Single Transition
                                        em_nb_dt        Either Match, NonBlocking, Double Transition
                                        m2_st           Match2, Single, Transition
                                        m2_dt           Match2, Double, Transition
                                        bm_st           Both Match, Single Transition
                                        bm_dt           Both Match, Double Transition
                                        m2_o_st         Match2, Ordered Single Blocking Transition
                                        m2_o_dt         Match2, Ordered Double Transition
                                        sm_st_e         Single Match, Single Transition Enhanced
                                        sm_st           Single Match, Single Transition
                                        sm_dt           Single Match, Double Transition
                                        */

                                        /* SYNONYMS */
                                        #define EitherMatchBlockingSingleTransition()     channel.PDCM = em_b_st
                                        #define EitherMatchBlockingDoubleTransition()     channel.PDCM = em_b_dt
                                        #define EitherMatchNonBlockingSingleTransition()  channel.PDCM = em_nb_st
                                        #define EitherMatchNonBlockingDoubleTransition()  channel.PDCM = em_nb_dt
                                        #define Match2SingleTransition()                  channel.PDCM = m2_st
                                        #define Match2DoubleTransition()                  channel.PDCM = m2_dt
                                        #define BothMatchSingleTransition()               channel.PDCM = bm_st
                                        #define BothMatchDoubleTransition()               channel.PDCM = bm_dt
                                        #define Match2OrderedSingleBlockingTransition()   channel.PDCM = m2_o_st
                                        #define Match2OrderedDoubleTransition()           channel.PDCM = m2_o_dt
                                        #define SingleMatchSingleTransitionEnhanced()     channel.PDCM = sm_st_e
                                        #define SingleMatchSingleTransition()             channel.PDCM = sm_st
                                        #define SingleMatchDoubleTransition()             channel.PDCM = sm_dt


                                        #define ClearAllLatches()         \
                                                (lsr = 0);(mrlA = 0);(mrlB = 0);(tdl = 0);


                                        /********************************************************************************/


ETPU "C" COMPILER 1.0.7.85                                              PAGE 212


                                        /* Complex Macros */

                                        /* These macros should provide the most optimized way of doing things.
                                           They should be in the best order for optimizing. The compiler might
                                           be able to identify this code for optimization. */

                                        #define SetupMatchA(reference) \
                                                erta = reference;      \
                                                EnableMatchA();        \
                                                ClearMatchALatch();

                                        #define SetupMatchB(reference) \
                                                ertb = reference;      \
                                                EnableMatchB();        \
                                                ClearMatchBLatch();

                                        /* These are ONLY useful for init. and if you know which TCR you want
                                           to use. Latches are cleared at the end so it can be combined with
                                           other latches. */

                                        #define ConfigMatch_AB() \
                                                WriteErtAToMatchAAndEnable(); \
                                                WriteErtBToMatchBAndEnable(); \
                                                EnableMatchA();        \
                                                EnableMatchB();        \
                                                EnableEventHandling();\
                                                ClearMatchALatch();\
                                                ClearMatchBLatch();

                                        #define SetupMatch_A(reference, timebase_comparator, pin_action) \
                                                erta = reference; \
                                                act_unitA = timebase_comparator; \
                                                opacA = pin_action; \
                                                EnableMatchA();        \
                                                ClearMatchALatch();\
                                                EnableEventHandling();

                                        #define SetupMatch_B(reference, timebase_comparator, pin_action) \
                                                ertb = reference; \
                                                act_unitB = timebase_comparator; \
                                                opacB = pin_action; \
                                                EnableMatchB();        \
                                                ClearMatchBLatch();\
                                                EnableEventHandling();

                                        #define SetupCaptureTrans_A(timebase, pin_trans) \
                                                act_unitA = timebase;\
                                                ipacA = pin_trans;\
                                                ClearTransLatch();\
                                                EnableEventHandling();

                                        #define SetupCaptureTrans_B(timebase, pin_trans) \
                                                act_unitB = timebase;\
                                                ipacB = pin_trans;\
                                                ClearTransLatch();\

ETPU "C" COMPILER 1.0.7.85                                              PAGE 213


                                                EnableEventHandling();


                                        /********************************************************************************/

                                        /* Action Units */

                                        /* Usage: ActionUnitA( MatchTCR1 | MatchTCR2,
                                                               CaptureTCR1 | CaptureTCR2,
                                                               GreaterEqual | EqualOnly ); */

                                        #define ActionUnitA( match, capture, compare)   (act_unitA=match##capture##compare)
                                        #define ActionUnitB( match, capture, compare)   (act_unitB=match##capture##compare)

                                        #define MatchTCR1    Mtcr1_
                                        #define MatchTCR2    Mtcr2_
                                        #define CaptureTCR1  Ctcr1_
                                        #define CaptureTCR2  Ctcr2_
                                        #define GreaterEqual ge
                                        #define EqualOnly    eq

                                        /* SYNONYMS */
                                        /* Action Unit A, Time Bases for match and capture */
                                        #define TimeBaseAMatchTcr1CaptureTcr1GreaterEqual()      channel.TBSA = Mtcr1_Ctcr1_ge
                                        #define TimeBaseAMatchTcr2CaptureTcr1GreaterEqual()      channel.TBSA = Mtcr2_Ctcr1_ge
                                        #define TimeBaseAMatchTcr1CaptureTcr2GreaterEqual()      channel.TBSA = Mtcr1_Ctcr2_ge
                                        #define TimeBaseAMatchTcr2CaptureTcr2GreaterEqual()      channel.TBSA = Mtcr2_Ctcr2_ge
                                        #define TimeBaseAMatchTcr1CaptureTcr1ExactlyEqual()      channel.TBSA = Mtcr1_Ctcr1_eq
                                        #define TimeBaseAMatchTcr2CaptureTcr1ExactlyEqual()      channel.TBSA = Mtcr2_Ctcr1_eq
                                        #define TimeBaseAMatchTcr1CaptureTcr2ExactlyEqual()      channel.TBSA = Mtcr1_Ctcr2_eq
                                        #define TimeBaseAMatchTcr2CaptureTcr2ExactlyEqual()      channel.TBSA = Mtcr2_Ctcr2_eq

                                        /* Action Unit B, Time Bases for match and capture */
                                        #define TimeBaseBMatchTcr1CaptureTcr1GreaterEqual()      channel.TBSB = Mtcr1_Ctcr1_ge
                                        #define TimeBaseBMatchTcr2CaptureTcr1GreaterEqual()      channel.TBSB = Mtcr2_Ctcr1_ge
                                        #define TimeBaseBMatchTcr1CaptureTcr2GreaterEqual()      channel.TBSB = Mtcr1_Ctcr2_ge
                                        #define TimeBaseBMatchTcr2CaptureTcr2GreaterEqual()      channel.TBSB = Mtcr2_Ctcr2_ge
                                        #define TimeBaseBMatchTcr1CaptureTcr1ExactlyEqual()      channel.TBSB = Mtcr1_Ctcr1_eq
                                        #define TimeBaseBMatchTcr2CaptureTcr1ExactlyEqual()      channel.TBSB = Mtcr2_Ctcr1_eq
                                        #define TimeBaseBMatchTcr1CaptureTcr2ExactlyEqual()      channel.TBSB = Mtcr1_Ctcr2_eq
                                        #define TimeBaseBMatchTcr2CaptureTcr2ExactlyEqual()      channel.TBSB = Mtcr2_Ctcr2_eq



                                        /********************************************************************************/

                                        /* Pin output buffer */

                                        #define EnableOutputBuffer()           (channel.TBSA = enable_output_buffer)
                                        #define DisableOutputBuffer()          (channel.TBSA = disable_output_buffer)


                                        /********************************************************************************/

                                        /* Pin control */

ETPU "C" COMPILER 1.0.7.85                                              PAGE 214



                                        /* Pin() definitions */
                                        #define SetHigh pin_high
                                        #define SetLow  pin_low
                                        #define PerPacA pin_opacA
                                        #define PerPacB pin_opacB

                                        /* Set Output Pin
                                           Usage: Pin( SetHigh | SetLow | PerPacA | PerPacB ); */
                                        #define Pin( state )          (channel.PIN=state)

                                        /* Immediate output pin */
                                        #define set_pin_per_opacA  pin_opacA
                                        #define set_pin_per_opacB  pin_opacB
                                        #define force_pin_high     pin_high
                                        #define force_pin_low      pin_low

                                        #define SetPinHigh()          (channel.PIN=force_pin_high)
                                        #define SetPinLow()           (channel.PIN=force_pin_low)
                                        #define SetPinPerPacA()       (channel.PIN=set_pin_per_opacA)
                                        #define SetPinPerPacB()       (channel.PIN=set_pin_per_opacB)

                                        /* Reading the pin states: branch conditions */

                                        #define SampledInputPin            channel.PSS
                                        #define IsLatchedInputPin()        (channel.PSS==1)
                                        #define IsInputPinHigh()           (channel.PSS==1)

                                        #define CurrentInputPin            channel.PSTI
                                        #define IsCurrentInputPin()        (channel.PSTI==1)

                                        #define CurrentOutputPin           channel.PSTO
                                        #define IsCurrentOutputPin()       (channel.PSTO==1)

                                        /* SYNONYMS */
                                        #define IsSampledInputPinHigh()    (channel.PSS==1)
                                        #define IsLatchedInputPinHigh()    (channel.PSS==1)
                                        #define IsCurrentInputPinHigh()    (channel.PSTI==1)
                                        #define IsCurrentOutputPinHigh()   (channel.PSTO==1)



                                        /********************************************************************************/

                                        /* Output Pin Action */

                                        #define NoChange    match_no_change
                                        #define PinHigh     match_high
                                        #define PinLow      match_low
                                        #define PinToggle   match_toggle

                                        /* Usage: OnMatchA( NoChange | PinHigh | PinLow | PinToggle ); */
                                        #define OnMatchA(action)      (opacA = action)
                                        #define OnMatchB(action)      (opacB = action)


ETPU "C" COMPILER 1.0.7.85                                              PAGE 215


                                        /* SYNONYMS */
                                        /* Action Unit A, Output Pin Actions */
                                        #define OnMatchAPinNoChange()      channel.OPACA = match_no_change
                                        #define OnMatchAPinHigh()          channel.OPACA = match_high
                                        #define OnMatchAPinLow()           channel.OPACA = match_low
                                        #define OnMatchAPinToggle()        channel.OPACA = match_toggle
                                        #define OnInputActionAPinLow()     channel.OPACA = transition_low
                                        #define OnInputActionAPinHigh()    channel.OPACA = transition_high
                                        #define OnInputActionAPinToggle()  channel.OPACA = transition_toggle

                                        /* Action Unit B, Output Pin Actions */
                                        #define OnMatchBPinNoChange()      channel.OPACB = match_no_change
                                        #define OnMatchBPinHigh()          channel.OPACB = match_high
                                        #define OnMatchBPinLow()           channel.OPACB = match_low
                                        #define OnMatchBPinToggle()        channel.OPACB = match_toggle
                                        #define OnInputActionBPinLow()     channel.OPACB = transition_low
                                        #define OnInputActionBPinHigh()    channel.OPACB = transition_high
                                        #define OnInputActionBPinToggle()  channel.OPACB = transition_toggle


                                        /********************************************************************************/

                                        /* Input Pin Action */

                                        #define NoDetect  no_detect
                                        #define LowHigh   low_high
                                        #define HighLow   high_low
                                        #define AnyTrans  any_trans

                                        /* Usage: DetectTransA( no_detect | low_high | high_low | any_trans | ...); */
                                        #define OnTransA(action)     (ipacA = action)
                                        #define OnTransB(action)     (ipacB = action)

                                        /* SYNONYMS */
                                        /* Action Unit A, Input Pin Edge Detection */
                                        #define DetectADisable()        channel.IPACA = no_detect
                                        #define DetectARisingEdge()     channel.IPACA = low_high
                                        #define DetectAFallingEdge()    channel.IPACA = high_low
                                        #define DetectAAnyEdge()        channel.IPACA = any_trans
                                        #define DetectALowOnMatchA()    channel.IPACA = detect_input_0_on_match
                                        #define DetectAHighOnMatchA()   channel.IPACA = detect_input_1_on_match

                                        /* Action Unit B, Input Pin Edge Detection */
                                        #define DetectBDisable()        channel.IPACB = no_detect
                                        #define DetectBRisingEdge()     channel.IPACB = low_high
                                        #define DetectBFallingEdge()    channel.IPACB = high_low
                                        #define DetectBAnyEdge()        channel.IPACB = any_trans
                                        #define DetectBLowOnMatchA()    channel.IPACB = detect_input_0_on_match
                                        #define DetectBHighOnMatchA()   channel.IPACB = detect_input_1_on_match


                                        /********************************************************************************/

                                        /* Intrinsics synonyms */


ETPU "C" COMPILER 1.0.7.85                                              PAGE 216


                                        /* Matches in Threads */
                                        #define DisableMatchesInThread()    match_disable()
                                        #define EnableMatchesInThread()     match_enable()



                                        #endif /* __ETPUC_COMMON_H */
                                        #include <etpuc.h>
                                        #ifndef __ETPUC_H
                                        #define __ETPUC_H

                                        /*
                                         *  eTPU C Code Development System
                                         *
                                         *  Processor register definitions
                                         *  for the eTPU C Code Development System.
                                         *
                                         *  This code may be adapted for any purpose
                                         *  when used with the eTPU C Code Development
                                         *  System.  No warranty is implied or given
                                         *  as to their usability for any purpose.
                                         *
                                         *  (c) Copyright 2002-2004 Byte Craft Limited
                                         *  421 King St.N., Waterloo, ON, Canada, N2J 4E4
                                         *  VOICE: 1 (519) 888 6911
                                         *  FAX  : 1 (519) 746 6751
                                         *  email: support@bytecraft.com
                                         *
                                         *  Byte Craft Limited
                                         *  Waterloo, Ontario
                                         *  Canada N2J 4E4
                                         *  (519) 888-6911
                                         *
                                         *  Walter Banks
                                         *
                                         * Revision history
                                         * ----------------
                                         * V0.90  WB    Nov 2003  First pre-release of etpuc.h based on V1.10 etpu.h with
                                         *                        changes to reflect eTPU naming conventions
                                         * V1.00  WB    Nov 2003  First release changes to the channel fields to reflect
                                         *                        naming conventions for eTPU
                                         * V1.01  WB    Dec 2003  Corrected definitions of pin_opacA and pin_opacB
                                         *
                                         *
                                         *
                                         *  All of the eTPU registers can be directly accessed from C
                                         *

                                             register_ac        ac   ;      // 24 bits
                                             register_b         b    ;      // 24 bits
                                             register_c         c    ;      // 24 bits
                                             register_d         d    ;      // 24 bits
                                             register_chan      chan ;      //  5 bits
                                             register_diob      diob ;      // 24 bits
                                             register_erta      erta ;      // 24 bits

ETPU "C" COMPILER 1.0.7.85                                              PAGE 217


                                             register_ertb      ertb ;      // 24 bits
                                             register_link      link ;      //  8 bits
                                             register_mach      mach ;      // 24 bits
                                             register_macl      macl ;      // 24 bits
                                             register_p         p    ;      // 24 bits
                                             register_rar       rar  ;      // 14 bits
                                             register_sr        sr   ;      // 24 bits
                                             register_tcr1      tcr1 ;      // 24 bits
                                             register_tcr2      tcr2 ;      // 24 bits
                                             register_tpr       tpr  ;      // 16 bits
                                             register_trr       trr  ;      // 24 bits
                                             register_chan_base chan_base;  // 24 bits
                                        */

                                        /* The following registers are defined for
                                           eTPU C application code */

                                             register_chan       chan ;       //  5 bits
                                             register_erta       erta ;       // 24 bits
                                             register_ertb       ertb ;       // 24 bits
                                             register_tcr1       tcr1 ;       // 24 bits
                                             register_tcr2       tcr2 ;       // 24 bits
                                             register_tpr        tpr  ;       // 16 bits
                                             register_trr        trr  ;       // 24 bits
                                             register_chan_base  chan_base;   // 24 bits
                                             register_link       link;        // 8 bits

                                        /*
                                           The link request can be set by copying the
                                           channel number into the link register. The
                                           following definition does this.
                                         */

                                        #define link_request(channel) link = channel

                                        /*
                                         *
                                         *
                                         *  All of the eTPU channel fields are predefined as a
                                         *  large C structure (chan_struct) by the eTPU C compiler.
                                         *
                                         *  struct chan {
                                         *               CIRC   int : 2 ;
                                         *               ERWA   int : 1 ;
                                         *               ERWB   int : 1 ;
                                         *               FLC    int : 3 ;
                                         *               IPACA  int : 3 ;
                                         *               IPACB  int : 3 ;
                                         *               LSR    int : 1 ;  // w test
                                         *               MRLA   int : 1 ;  // w test
                                         *               MRLB   int : 1 ;  // w test
                                         *               MRLE   int : 1 ;
                                         *               MTD    int : 2 ;
                                         *               OPACA  int : 3 ;
                                         *               OPACB  int : 3 ;

ETPU "C" COMPILER 1.0.7.85                                              PAGE 218


                                         *               PDCM   int : 4 ;
                                         *               PIN    int : 3 ;
                                         *               TBSA   int : 4 ;
                                         *               TBSB   int : 4 ;
                                         *               TDL    int : 1 ;
                                         *               SMPR   int : 2 ;
                                         * State Resolution
                                         *               FLAG0  int : 1 ;  // w only also defined in FLC
                                         *               FLAG1  int : 1 ;
                                         * Channel Flags
                                         *               FM0    int : 1 ;
                                         *               FM1    int : 1 ;
                                         *         //    LSR    int : 1 ;  // also channel fields
                                         *         //    MRLA   int : 1 ;  // also channel fields
                                         *         //    MRLB   int : 1 ;  // also channel fields
                                         *               PSS    int : 1 ;
                                         *               PSTI   int : 1 ;
                                         *               PSTO   int : 1 ;
                                         *               TDLA   int : 1 ;
                                         *               TDLB   int : 1 ;
                                         *              }
                                         ***/

                                        chan_struct channel;
                                        register_cc        CC;

                                        #define erwA       channel.ERWA
                                        #define erwB       channel.ERWB

                                        #define flc        channel.FLC
                                        #define ipacA      channel.IPACA
                                        #define ipacB      channel.IPACB
                                        #define lsr        channel.LSR

                                        #define mrlA       channel.MRLA
                                        #define mrlB       channel.MRLB
                                        #define mrle       channel.MRLE
                                        #define mtd        channel.MTD
                                        #define opacA      channel.OPACA
                                        #define opacB      channel.OPACB
                                        #define pdcm       channel.PDCM
                                        #define pin        channel.PIN
                                        #define act_unitA  channel.TBSA
                                        #define act_unitB  channel.TBSB
                                        #define tdl        channel.TDL
                                        #define flag0      channel.FLAG0
                                        #define flag1      channel.FLAG1
                                        #define fm0        channel.FM0
                                        #define fm1        channel.FM1
                                        #define pss        channel.PSS
                                        #define psti       channel.PSTI
                                        #define psto       channel.PSTO
                                        #define tdlA       channel.TDLA
                                        #define tdlB       channel.TDLB


ETPU "C" COMPILER 1.0.7.85                                              PAGE 219



                                        // IPAC 1,2
                                        #define no_detect                 0
                                        #define low_high                  1
                                        #define high_low                  2
                                        #define any_trans                 3
                                        #define detect_input_0_on_match   4
                                        #define detect_input_1_on_match   5
                                        #define no_change_ipac            7

                                        // OPAC 1,2  fields

                                        #define match_no_change   0
                                        #define match_high        1
                                        #define match_low         2
                                        #define match_toggle      3
                                        #define opac_high         1
                                        #define opac_low          2
                                        #define toggle            3
                                        #define opac_high_low     4
                                        #define opac_low_high     5
                                        #define transition_low    4
                                        #define transition_high   5
                                        #define transition_toggle 6

                                        // PDCM fields
                                        #define em_b_st  0              //Either Match, Blocking, Single Transition
                                        #define em_b_dt  1              //Either Match, Blocking, Double Transition
                                        #define em_nb_st 2              //Either Match, NonBlocking, Single Transition
                                        #define em_nb_dt 3              //Either Match, NonBlocking, Double Transition
                                        #define m2_st    4              //Match2, Single, Transition
                                        #define m2_dt    5              //Match2, Double, Transition
                                        #define bm_st    6              //Both Match, Single Transition
                                        #define bm_dt    7              //Both Match, Double Transition
                                        #define m2_o_st  8              //Match2, Ordered, Single Transition
                                        #define m2_o_dt  9              //Match2, Ordered, Double Transition
                                        #define sm_st_e  0xE                //Single Match, Single Transition, Enhanced
                                        #define sm_st    0xC                //Single Match, Single Transition
                                        #define sm_dt    0xD                //Single Match, Double Transition

                                        // Time Bases Selection for match and capture
                                        #define Mtcr1_Ctcr1_ge       0      //Match tcr1, Capture tcr1, greater than
                                        #define Mtcr2_Ctcr1_ge       1      //Match tcr2, Capture tcr1, greater than
                                        #define Mtcr1_Ctcr2_ge       2      //Match tcr1, Capture tcr2, greater than
                                        #define Mtcr2_Ctcr2_ge       3      //Match tcr2, Capture tcr2, greater than
                                        #define Mtcr1_Ctcr1_eq       4      //Match tcr1, Capture tcr1, equal
                                        #define Mtcr2_Ctcr1_eq       5      //Match tcr2, Capture tcr1, equal
                                        #define Mtcr1_Ctcr2_eq       6      //Match tcr1, Capture tcr2, equal
                                        #define Mtcr2_Ctcr2_eq       7      //Match tcr2, Capture tcr2, equal

                                        #define enable_output_buffer  8     // TBSx[3] = 1, TBSx[2:0] = 000
                                        #define disable_output_buffer 9     // TBSx[3] = 1, TBSx[2:0] = 001
                                        #define do_nothing       15     // TBSx[3] = 1, TBSx[2:0] = 111

                                        // Time Bases Selection for transition and capture

ETPU "C" COMPILER 1.0.7.85                                              PAGE 220


                                        #define Capture_tcr1        0       //TBSx[2] = 0
                                        #define Capture_tcr2        2       //TBSx[2] = 1

                                        // Tooth Program Register structure

                                        struct tpr_struct {
                                          int TICKS   : 10;
                                          int TPR10   : 1;
                                          int HOLD    : 1;
                                          int IPH     : 1;
                                          int MISSCNT : 2;
                                          int LAST    : 1;
                                          } ;

                                        // pin definitions
                                        //   pin = pin_high;
                                        #define pin_opacA  0
                                        #define pin_opacB  1
                                        #define pin_high   2
                                        #define pin_low    4

                                        #endif /* __ETPUC_H */


                                        #ifdef RAIL_FUNCTION_NUMBER
0006                                    #pragma ETPU_function RailPress, alternate @ RAIL_FUNCTION_NUMBER;
                                        #else
                                        #pragma ETPU_function RailPress, alternate;
                                        #endif

00000007                                #define RAIL_INIT 7

                                        void RailPress(void)
                                        {
                                            if (hsr == RAIL_INIT)
                                            {
                                                DisableMatchesInThread();
                                                OnTransA(NoDetect);
                                                OnTransB(NoDetect);
                                                ClearLSRLatch();
                                                ClearTransLatch();
                                                ClearMatchAEvent();
                                                ClearMatchBEvent();

                                                SetChannelMode(sm_st);
                                                EnableOutputBuffer();
                                                SetPinLow();
227C 5808F4B8   chan pin = low,         
                    ipaca = no_detect,         
                    ipacb = no_detect,         
                    tbsa = obe_on,sm_st,         
                    clr_lsr,clr_mrla,         
                    clr_mrlb,clr_tdl.         
2280                                            EnableEventHandling();
2280 F73FFCFB   chan mtd = enable_mtsr;        }

ETPU "C" COMPILER 1.0.7.85                                              PAGE 221


                    end.                
018A 08 9F        06 A05 P01 MD 227C  HSR 6/7   lsr x  m1 x  m2 x  pin x  flag1 x  flag0 x                             
                                         
0000             Thread Local RAM size                                   
                                            else if (lsr == 1)
                                            {
                                                ClearLSRLatch();
2284 4FFFF7FF   chan clr_lsr.           
2288                                            SetChannelInterrupt();
2288 F7FF3CF9   chan cir;end.               }
018C 48 A1        06 A06 P01 ME 2284  HSR 0     lsr 1  m1 0  m2 0  pin 0  flag1 x  flag0 x                             
018E 48 A1        06 A07 P01 ME 2284  HSR 0     lsr 1  m1 0  m2 0  pin 1  flag1 x  flag0 x                             
0190 48 A1        06 A08 P01 ME 2284  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 0  flag0 0                             
0192 48 A1        06 A09 P01 ME 2284  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 0  flag0 1                             
0194 48 A1        06 A0A P01 ME 2284  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 1  flag0 0                             
0196 48 A1        06 A0B P01 ME 2284  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 1  flag0 1                             
0198 48 A1        06 A0C P01 ME 2284  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 0  flag0 0                             
019A 48 A1        06 A0D P01 ME 2284  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 0  flag0 1                             
019C 48 A1        06 A0E P01 ME 2284  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 1  flag0 0                             
019E 48 A1        06 A0F P01 ME 2284  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 1  flag0 1                             
01A0 48 A1        06 A10 P01 ME 2284  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 0  flag0 0                             
01A2 48 A1        06 A11 P01 ME 2284  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 0  flag0 1                             
01A4 48 A1        06 A12 P01 ME 2284  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 1  flag0 0                             
01A6 48 A1        06 A13 P01 ME 2284  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 1  flag0 1                             
01A8 48 A1        06 A14 P01 ME 2284  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 0  flag0 0                             
01AA 48 A1        06 A15 P01 ME 2284  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 0  flag0 1                             
01AC 48 A1        06 A16 P01 ME 2284  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 1  flag0 0                             
01AE 48 A1        06 A17 P01 ME 2284  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 1  flag0 1                             
01B0 48 A1        06 A18 P01 ME 2284  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 0  flag0 0                             
01B2 48 A1        06 A19 P01 ME 2284  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 0  flag0 1                             
01B4 48 A1        06 A1A P01 ME 2284  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 1  flag0 0                             
01B6 48 A1        06 A1B P01 ME 2284  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 1  flag0 1                             
01B8 48 A1        06 A1C P01 ME 2284  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 0  flag0 0                             
01BA 48 A1        06 A1D P01 ME 2284  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 0  flag0 1                             
01BC 48 A1        06 A1E P01 ME 2284  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 1  flag0 0                             
01BE 48 A1        06 A1F P01 ME 2284  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 1  flag0 1                             
                                         
0000             Thread Local RAM size                                   
                                            else
                                            {
                                        #ifdef GLOBAL_ERROR_FUNC
228C FFC116BF   call 22D4,flush.                        Global_Error_Func();
                                        #else
                                                ClearAllLatches();
                                        #endif
2290 6FFFFFFF   end.                        }
0180 C8 A3        06 A00 P23 ME 228C  HSR 2/3   lsr x  m1 x  m2 x  pin 0  flag1 x  flag0 0                             
0182 C8 A3        06 A01 P23 ME 228C  HSR 2/3   lsr x  m1 x  m2 x  pin 0  flag1 x  flag0 1                             
0184 C8 A3        06 A02 P23 ME 228C  HSR 2/3   lsr x  m1 x  m2 x  pin 1  flag1 x  flag0 0                             
0186 C8 A3        06 A03 P23 ME 228C  HSR 2/3   lsr x  m1 x  m2 x  pin 1  flag1 x  flag0 1                             
0188 C8 A3        06 A04 P23 ME 228C  HSR 1/4/5 lsr x  m1 x  m2 x  pin x  flag1 x  flag0 x                             
                                         
0000             Thread Local RAM size                                   
0000             Local RAM requirements for eTPU Function RailPress                                   
                                        }

ETPU "C" COMPILER 1.0.7.85                                              PAGE 222



                                        /* Information exported to Host CPU program */
2294                                    #pragma write h, (::ETPUfilename (etpu_rail_auto.h));
2294                                    #pragma write h, (/*******************************************************************************);
2294                                    #pragma write h, ( * 版权 2015-2016 中国航空工业集团第六三一所第十八研究室                        );
2294                                    #pragma write h, ( *                                                                              );
2294                                    #pragma write h, ( * 对本文件的拷贝、发布、修改或者其他任何用途必须得到中国航空工业集团第六三一所 );
2294                                    #pragma write h, ( * 的书面协议许可。                                                             );
2294                                    #pragma write h, ( *                                                                              );
2294                                    #pragma write h, ( * Copyrights (2015-2016) ACTRI                                                 );
2294                                    #pragma write h, ( * All Right Reserved                                                           );
2294                                    #pragma write h, ( *******************************************************************************);
2294                                    #pragma write h, (                                                                                );
2294                                    #pragma write h, ( *******************************************************************************);
2294                                    #pragma write h, ( * Revision History                                                             );
2294                                    #pragma write h, ( *------------------------------------------------------------------------------);
2294                                    #pragma write h, ( * 2017-12-07, gbo, created                                                     );
2294                                    #pragma write h, ( *******************************************************************************);
2294                                    #pragma write h, ( );
2294                                    #pragma write h, ( *******************************************************************************);
2294                                    #pragma write h, ( * content                                                                      );
2294                                    #pragma write h, ( *------------------------------------------------------------------------------);
2294                                    #pragma write h, ( *  File            : etpuc_rail_auto.h                                          );
2294                                    #pragma write h, ( *  Description     : 轨压中断头文件                                      );
2294                                    #pragma write h, ( *  Call            : 029-89186510                                              );
2294                                    #pragma write h, ( *  该文件由ETPU自动生成，请勿修改！！！                                        );
2294                                    #pragma write h, ( ******************************************************************************/);
2294                                    #pragma write h, (#ifndef _ETPU_RAIL_AUTO_H_ );
2294                                    #pragma write h, (#define _ETPU_RAIL_AUTO_H_ );
2294                                    #pragma write h, ( );
2294                                    #pragma write h, (/* Function Configuration Information */);
2294                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_RAIL_FUNCTION_NUMBER) RAIL_FUNCTION_NUMBER );
2294                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_RAIL_TABLE_SELECT) ::ETPUentrytype(RailPress) );
2294                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_RAIL_NUM_PARMS) ::ETPUram(RailPress) );
2294                                    #pragma write h, ( );
2294                                    #pragma write h, (/* Host Service Request Definitions */);
2294                                    #pragma write h, (/* 喷油初始化 */);
2294                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_RAIL_INIT) RAIL_INIT );
2294                                    #pragma write h, (#endif /* _ETPU_PWM_AUTO_H_ */);
2294                                    #pragma write h, ( );

00000007                                #define FUEL_ENABLE_FUNCTION_NUMBER 7
                                        #include "etpuc_fuelenable.c"
                                        #include <eTPUc_common.h>
                                        #ifndef __ETPUC_COMMON_H
                                        #define __ETPUC_COMMON_H

                                        /********************************************************************************

                                         FILE NAME: etpuc_common.h

                                         COPYRIGHT (c) ASH WARE, Byte Craft Limited, Freescale 2002-2004.
                                         All Rights Reserved.

                                         VERSION:  1.0

ETPU "C" COMPILER 1.0.7.85                                              PAGE 223



                                         This file is maintained as part of the support for the eTPU_C
                                         development tools by Byte Craft Limited.

                                         This code may be adapted for any purpose when used with the eTPU_C
                                         Code Development System.  No warranty is implied or given as to their
                                         usability for any purpose.

                                         Portions of this file are governed by the following copyrights and
                                         terms:

                                         (c) Freescale 2002-2004 FREESCALE, INC. All Rights Reserved.
                                         *  You are hereby granted a copyright license to use, modify, and
                                         *  distribute the SOFTWARE so long as this entire notice is
                                         *  retained without alteration in any modified and/or redistributed
                                         *  versions, and that such modified versions are clearly identified
                                         *  as such. No licenses are granted by implication, estoppel or
                                         *  otherwise under any patents or trademarks of Freescale, Inc. This
                                         *  software is provided on an "AS IS" basis and without warranty.
                                         *
                                         *  To the maximum extent permitted by applicable law, FREESCALE
                                         *  DISCLAIMS ALL WARRANTIES WHETHER EXPRESS OR IMPLIED, INCLUDING
                                         *  IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
                                         *  PURPOSE AND ANY WARRANTY AGAINST INFRINGEMENT WITH REGARD TO THE
                                         *  SOFTWARE (INCLUDING ANY MODIFIED VERSIONS THEREOF) AND ANY
                                         *  ACCOMPANYING WRITTEN MATERIALS.
                                         *
                                         *  To the maximum extent permitted by applicable law, IN NO EVENT
                                         *  SHALL FREESCALE BE LIABLE FOR ANY DAMAGES WHATSOEVER (INCLUDING
                                         *  WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
                                         *  INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR OTHER PECUNIARY
                                         *  LOSS) ARISING OF THE USE OR INABILITY TO USE THE SOFTWARE.
                                         *
                                         *  Freescale assumes no responsibility for the maintenance and support
                                         *  of this software

                                         (c) Copyright 2002-2004 Byte Craft Limited
                                         421 King St.N., Waterloo, ON, Canada, N2J 4E4
                                         VOICE: 1 (519) 888 6911
                                         email: support@bytecraft.com

                                         (c) Copyright 2002-2004 ASH WARE

                                        ================================================================================

                                        DESCRIPTION: This file defines the application-friendly macros,
                                        functions for common tasks like channel set up and register control
                                        field access.

                                        ================================================================================

                                        SOURCES:

                                        etpuc_common.h is based on the following header files commonly used by
                                        the eTPU development community:

ETPU "C" COMPILER 1.0.7.85                                              PAGE 224



                                        AshWareETpu.h - developed by Andy Klumpp from ASH WARE
                                        Mike.h - developed by Mike Pauwels from Freescale
                                        etpu_common.h - developped by Ming Li from Freescale

                                        Jeff Loeliger from Freescale and Walter Banks from Byte Craft
                                        also made significant contibutions.

                                        ================================================================================
                                         UPDATE HISTORY
                                         REV      AUTHOR        DATE                DESCRIPTION OF CHANGE
                                         ---      -------      --------    ---------------------
                                         0.0      Ming Li      10/30/03    Initial creation
                                         0.1      Ming Li      11/12/03    Updated to incorporate comments from eTPU
                                                                           development community.
                                         0.2      Walter Banks 15 Dec 03   Made changes to be reflect definitions in
                                                                           eTPUc.h
                                                                           Corrected IsTransALatched()
                                                                                     IsTransBLatched()
                                                                           Added missing definitions
                                                                                     set_pin_per_opacA
                                                                                     set_pin_per_opacB
                                                                                     force_pin_high
                                                                                     force_pin_low
                                                                           Corrected opac1 to opacA
                                                                                     opac2 to opacB

                                         0.3      Walter Banks  5 Jan 04   Corrected opacB = pin_action; to
                                                                               opacA = pin_action;

                                         0.4     J. Loeliger    21/Jan/04  Cleared up reorganized and added more:
                                                                           -Moved TRUE & FALSE to top and added
                                                                              conditional
                                                                           -Moved entry conditions up and added macros
                                                                              for all conditions
                                                                           -Merged with AshWareETpu.h
                                                                              -Removed commet with of PDCM names.
                                                                           -Grouped latches and flags together.
                                                                             -added new set and clear for latches and
                                                                                flags
                                                                           -Merged output pin value to 1 set rather
                                                                              than 2
                                                                           -Added long channel mode names.
                                                                           -Added SetupMatch_AB for better
                                                                              optimization
                                                                           -Added match only conditions for output
                                                                              functions.
                                                                           -Added new ActionUnintA/B macros
                                                                           -Added new Pin macro
                                                                           -And more.
                                         0.5     J. Loeliger     12/Feb/04 -Changed DetectTrans to OnTrans.
                                         0.6     J. Loeliger     30/Mar/04 -Added SetupMatchB and fixed some old
                                                                             references to 1 & 2 -> A & B
                                         0.7     J. Loeliger     16/Apr/04 -Changed Disable match (MRLE) to =0
                                         0.8     J. Loeliger     27/Apr/04 -Fixed Disable/Enable match in thread,

ETPU "C" COMPILER 1.0.7.85                                              PAGE 225


                                                                              they were swapped.
                                         0.9     J. Loeliger     10/May/04 -Added support for OBE with new
                                                 M. Brejl                   EnableOutputBuffer()/DisableOutputBuffer()
                                                                            Removed all // comments. Changed Motorola
                                                                            to Freescale.
                                                                            Fixed spelling mistake in GetCurentChanNum

                                         0.4     Karen McMurray  19 May 04  Changed all ertA to erta
                                                                                        ertB to ertb.

                                         1.0     Kirk Zurell     11 Aug 04  Integrated etpuc_common.h from J. Loeliger
                                                                            and etpuc_common.h from Byte Craft Limited.
                                                                            Removed tabs & made comments more sustainable.
                                                                            Conditionalized some definitions to be more
                                                                            economical on symbols.

                                                                            Divider lines have 80 asterices.

                                        */



                                        /********************************************************************************/

                                        /* This file depends upon definitions from etpuc.h */

                                        #ifndef __ETPUC_H
                                        #include <etpuc.h>
                                        #endif /* __ETPUC_H */


                                        /********************************************************************************/

                                        /* Constant definitions */

                                        #ifndef TRUE
                                        #define TRUE        1
                                        #endif

                                        #ifndef FALSE
                                        #define FALSE       0
                                        #endif


                                        /********************************************************************************/

                                        /* State Resolution Flags, and other latches */

                                        /* Clear() definitions */
                                        #define LSRLatch      lsr
                                        #define LatchedMatchA mrlA
                                        #define LatchedMatchB mrlB
                                        #define TransLatch    tdl

                                        /* Macros */

ETPU "C" COMPILER 1.0.7.85                                              PAGE 226



                                        /* Set flag0 or flag1
                                           Usage: Set(flag0 | flag1);*/

                                        #define Set(cond)     (cond = 1)

                                        /* Clear a flag
                                           Usage: Clear(flag0 | flag1 | LSRLatch | lsr | MatchALatch | mrlA |
                                                         MatchBLatch | mrlB | TransLatch | tdl);         */

                                        #define Clear(cond)   (cond = 0)

                                        /* SYNONYMS */
                                        /* Flag 0 & flag 1 */
                                        #define ClrFlag0()  (channel.FLAG0 = 0)
                                        #define SetFlag0()  (channel.FLAG0 = 1)
                                        #define ClrFlag1()  (channel.FLAG1 = 0)
                                        #define SetFlag1()  (channel.FLAG1 = 1)


                                        #define FunctionMode0          channel.FM0
                                        #define IsFunctionMode0()     (channel.FM0==1)
                                        #define IsSampledFuncMode0()  (channel.FM0==1)
                                        #define IsLatchedFuncMode0()  (channel.FM0==1)

                                        #define FunctionMode1          channel.FM1
                                        #define IsFunctionMode1()     (channel.FM1==1)
                                        #define IsSampledFuncMode1()  (channel.FM1==1)
                                        #define IsLatchedFuncMode1()  (channel.FM1==1)


                                        /********************************************************************************/

                                        /* Writing the match registers and enabling/disabling the Match
                                           Recognition Latch Enable */

                                        #define EnableMatchA()                 (channel.ERWA = 0)
                                        #define EnableMatchB()                 (channel.ERWB = 0)
                                        #define DisableMatch()                 (channel.MRLE = 0)

                                        /* SYNONYMS */
                                        #define WriteErtAToMatchAAndEnable()   channel.ERWA = 0
                                        #define WriteErtBToMatchBAndEnable()   channel.ERWB = 0
                                        #define DisableMatchDetection();       channel.MRLE = 0


                                        /* Read capture register */
                                        #define GetCapRegA()  (erta)
                                        #define GetCapRegB()  (ertb)

                                        /* Clear Latch */
                                        #define ClearLSRLatch()       (channel.LSR  = 0)

                                        #define ClearMatchALatch()    (channel.MRLA = 0)
                                        #define ClearMatchBLatch()    (channel.MRLB = 0)

ETPU "C" COMPILER 1.0.7.85                                              PAGE 227



                                        #define ClearTransLatch()     (channel.TDL = 0)

                                        /* SYNONYMS */
                                        #define ClearLinkServiceRequestEvent() (lsr  = 0)

                                        #define ClearMatchAEvent()    (channel.MRLA = 0)
                                        #define ClearMatchBEvent()    (channel.MRLB = 0)

                                        #define ClearTransitionEvents() (channel.TDL = 0)



                                        /* Test latch conditions */

                                        #define TransitionALatch           channel.TDLA
                                        #define IsTransALatched()         (channel.TDLA==1)

                                        #define TransitionBLatch           channel.TDLB
                                        #define IsTransBLatched()         (channel.TDLB==1)

                                        #define MatchALatch            channel.MRLA
                                        #define IsMatchALatched()     (channel.MRLA==1)

                                        #define MatchBLatch            channel.MRLB
                                        #define IsMatchBLatched()     (channel.MRLB==1)

                                        /* SYNONYMS */
                                        #define IsLatchedTransitionA()    (channel.TDLA==1)
                                        #define IsLatchedTransitionB()    (channel.TDLB==1)
                                        #define IsLatchedMatchA()         (channel.MRLA==1)
                                        #define IsLatchedMatchB()         (channel.MRLB==1)



                                        /********************************************************************************/

                                        /* Enabling/Disabling Event Handling */

                                        #define EnableEventHandling()                   (channel.MTD = 0)
                                        #define DisableEventHandling()                  (channel.MTD = 1)

                                        /* SYNONYMS */
                                        #define EnableMatchAndTransitionEventHandling()  channel.MTD = 0
                                        #define DisableMatchAndTransitionEventHandling() channel.MTD = 1


                                        /********************************************************************************/

                                        /* Semaphore Operations */

                                        #define IsSemaphoreLocked()   (channel.SMPR == 1)
                                        #define LockSemaphore(num)    (channel.SMPR = num)
                                        #define FreeSemaphore()       (channel.SMPR = -1)


ETPU "C" COMPILER 1.0.7.85                                              PAGE 228



                                        /********************************************************************************/

                                        /* Exceptions */

                                        /* Channel control macros */
                                        #define SetChannelInterrupt()       (channel.CIRC = 0)
                                        #define SetChannelInterruptRequest()(channel.CIRC = 0)

                                        #define SetDataTransferInterrupt()        (channel.CIRC = 1)
                                        #define SetDataTransferInterruptRequest() (channel.CIRC = 1)

                                        #define SetGlobalException()  (channel.CIRC = 2)

                                        /* Channel control */

                                        /* Generate the link service request to channel[ChNum] */
                                        #define LinkToChannel(ChNum)            (link = ChNum)
                                        #define LinkTo(num)                 link = num;
                                        #define LinkToEngine1Chan(num)      link = (num | (1<<6))
                                        #define LinkToEngine2Chan(num)      link = (num | (2<<6))
                                        #define LinkToOtherEngineChan(num)  link = (num | (3<<6))

                                        /* switch to specified channel from current channel */
                                        #define SwitchToChannel(ChNum)      (chan = ChNum)

                                        /* return current channel number */
                                        #define GetCurrentChanNum()         (chan)

                                        /* branch condition */
                                        #define LinkServiceRequest     channel.LSR
                                        #define IsLinkReqActive()     (channel.LSR==1)
                                        #define IsSampledLink()       (channel.LSR==1)
                                        #define IsLatchedLink()       (channel.LSR==1)


                                        /********************************************************************************/

                                        /* Entry Conditions Definition */

                                        /* Usage: use these in the if()/else if()/else structure in an
                                           ETPU_function */

                                        #define HostServiceRequest               hsr
                                        #define IsHostServiceRequestEvent(num)   (hsr==num)

                                        #define MatchA_TransB                    (m1==1)
                                        #define matchA_transB                    (m1==1)
                                        #define IsMatchAOrTransitionBEvent()     (m1==1)

                                        #define MatchB_TransA                    (m2==1)
                                        #define matchB_transA                    (m2==1)
                                        #define IsMatchBOrTransitionAEvent()     (m2==1)

                                        #define linkRequest                      (lsr==1)

ETPU "C" COMPILER 1.0.7.85                                              PAGE 229


                                        #define IsLinkServiceRequestEvent()      (lsr==1)

                                        /* For output-only functions */
                                        #define MatchA                           (m1==1)
                                        #define MatchB                           (m2==1)


                                        /********************************************************************************/

                                        /* Predefined Channel Modes (PDCM) */

                                        #define SetChannelMode(mode)        (channel.PDCM = mode)
                                        #define channel_setup channel.PDCM

                                        /* Usage:       channel_setup = PDCM_constant

                                        PDCM_constants are taken from etpuc.h:
                                        em_b_st         Either Match, Blocking, Single Transition
                                        em_b_dt         Either Match, Blocking, Double Transition
                                        em_nb_st        Either Match, NonBlocking, Single Transition
                                        em_nb_dt        Either Match, NonBlocking, Double Transition
                                        m2_st           Match2, Single, Transition
                                        m2_dt           Match2, Double, Transition
                                        bm_st           Both Match, Single Transition
                                        bm_dt           Both Match, Double Transition
                                        m2_o_st         Match2, Ordered Single Blocking Transition
                                        m2_o_dt         Match2, Ordered Double Transition
                                        sm_st_e         Single Match, Single Transition Enhanced
                                        sm_st           Single Match, Single Transition
                                        sm_dt           Single Match, Double Transition
                                        */

                                        /* SYNONYMS */
                                        #define EitherMatchBlockingSingleTransition()     channel.PDCM = em_b_st
                                        #define EitherMatchBlockingDoubleTransition()     channel.PDCM = em_b_dt
                                        #define EitherMatchNonBlockingSingleTransition()  channel.PDCM = em_nb_st
                                        #define EitherMatchNonBlockingDoubleTransition()  channel.PDCM = em_nb_dt
                                        #define Match2SingleTransition()                  channel.PDCM = m2_st
                                        #define Match2DoubleTransition()                  channel.PDCM = m2_dt
                                        #define BothMatchSingleTransition()               channel.PDCM = bm_st
                                        #define BothMatchDoubleTransition()               channel.PDCM = bm_dt
                                        #define Match2OrderedSingleBlockingTransition()   channel.PDCM = m2_o_st
                                        #define Match2OrderedDoubleTransition()           channel.PDCM = m2_o_dt
                                        #define SingleMatchSingleTransitionEnhanced()     channel.PDCM = sm_st_e
                                        #define SingleMatchSingleTransition()             channel.PDCM = sm_st
                                        #define SingleMatchDoubleTransition()             channel.PDCM = sm_dt


                                        #define ClearAllLatches()         \
                                                (lsr = 0);(mrlA = 0);(mrlB = 0);(tdl = 0);


                                        /********************************************************************************/

                                        /* Complex Macros */

ETPU "C" COMPILER 1.0.7.85                                              PAGE 230



                                        /* These macros should provide the most optimized way of doing things.
                                           They should be in the best order for optimizing. The compiler might
                                           be able to identify this code for optimization. */

                                        #define SetupMatchA(reference) \
                                                erta = reference;      \
                                                EnableMatchA();        \
                                                ClearMatchALatch();

                                        #define SetupMatchB(reference) \
                                                ertb = reference;      \
                                                EnableMatchB();        \
                                                ClearMatchBLatch();

                                        /* These are ONLY useful for init. and if you know which TCR you want
                                           to use. Latches are cleared at the end so it can be combined with
                                           other latches. */

                                        #define ConfigMatch_AB() \
                                                WriteErtAToMatchAAndEnable(); \
                                                WriteErtBToMatchBAndEnable(); \
                                                EnableMatchA();        \
                                                EnableMatchB();        \
                                                EnableEventHandling();\
                                                ClearMatchALatch();\
                                                ClearMatchBLatch();

                                        #define SetupMatch_A(reference, timebase_comparator, pin_action) \
                                                erta = reference; \
                                                act_unitA = timebase_comparator; \
                                                opacA = pin_action; \
                                                EnableMatchA();        \
                                                ClearMatchALatch();\
                                                EnableEventHandling();

                                        #define SetupMatch_B(reference, timebase_comparator, pin_action) \
                                                ertb = reference; \
                                                act_unitB = timebase_comparator; \
                                                opacB = pin_action; \
                                                EnableMatchB();        \
                                                ClearMatchBLatch();\
                                                EnableEventHandling();

                                        #define SetupCaptureTrans_A(timebase, pin_trans) \
                                                act_unitA = timebase;\
                                                ipacA = pin_trans;\
                                                ClearTransLatch();\
                                                EnableEventHandling();

                                        #define SetupCaptureTrans_B(timebase, pin_trans) \
                                                act_unitB = timebase;\
                                                ipacB = pin_trans;\
                                                ClearTransLatch();\
                                                EnableEventHandling();

ETPU "C" COMPILER 1.0.7.85                                              PAGE 231




                                        /********************************************************************************/

                                        /* Action Units */

                                        /* Usage: ActionUnitA( MatchTCR1 | MatchTCR2,
                                                               CaptureTCR1 | CaptureTCR2,
                                                               GreaterEqual | EqualOnly ); */

                                        #define ActionUnitA( match, capture, compare)   (act_unitA=match##capture##compare)
                                        #define ActionUnitB( match, capture, compare)   (act_unitB=match##capture##compare)

                                        #define MatchTCR1    Mtcr1_
                                        #define MatchTCR2    Mtcr2_
                                        #define CaptureTCR1  Ctcr1_
                                        #define CaptureTCR2  Ctcr2_
                                        #define GreaterEqual ge
                                        #define EqualOnly    eq

                                        /* SYNONYMS */
                                        /* Action Unit A, Time Bases for match and capture */
                                        #define TimeBaseAMatchTcr1CaptureTcr1GreaterEqual()      channel.TBSA = Mtcr1_Ctcr1_ge
                                        #define TimeBaseAMatchTcr2CaptureTcr1GreaterEqual()      channel.TBSA = Mtcr2_Ctcr1_ge
                                        #define TimeBaseAMatchTcr1CaptureTcr2GreaterEqual()      channel.TBSA = Mtcr1_Ctcr2_ge
                                        #define TimeBaseAMatchTcr2CaptureTcr2GreaterEqual()      channel.TBSA = Mtcr2_Ctcr2_ge
                                        #define TimeBaseAMatchTcr1CaptureTcr1ExactlyEqual()      channel.TBSA = Mtcr1_Ctcr1_eq
                                        #define TimeBaseAMatchTcr2CaptureTcr1ExactlyEqual()      channel.TBSA = Mtcr2_Ctcr1_eq
                                        #define TimeBaseAMatchTcr1CaptureTcr2ExactlyEqual()      channel.TBSA = Mtcr1_Ctcr2_eq
                                        #define TimeBaseAMatchTcr2CaptureTcr2ExactlyEqual()      channel.TBSA = Mtcr2_Ctcr2_eq

                                        /* Action Unit B, Time Bases for match and capture */
                                        #define TimeBaseBMatchTcr1CaptureTcr1GreaterEqual()      channel.TBSB = Mtcr1_Ctcr1_ge
                                        #define TimeBaseBMatchTcr2CaptureTcr1GreaterEqual()      channel.TBSB = Mtcr2_Ctcr1_ge
                                        #define TimeBaseBMatchTcr1CaptureTcr2GreaterEqual()      channel.TBSB = Mtcr1_Ctcr2_ge
                                        #define TimeBaseBMatchTcr2CaptureTcr2GreaterEqual()      channel.TBSB = Mtcr2_Ctcr2_ge
                                        #define TimeBaseBMatchTcr1CaptureTcr1ExactlyEqual()      channel.TBSB = Mtcr1_Ctcr1_eq
                                        #define TimeBaseBMatchTcr2CaptureTcr1ExactlyEqual()      channel.TBSB = Mtcr2_Ctcr1_eq
                                        #define TimeBaseBMatchTcr1CaptureTcr2ExactlyEqual()      channel.TBSB = Mtcr1_Ctcr2_eq
                                        #define TimeBaseBMatchTcr2CaptureTcr2ExactlyEqual()      channel.TBSB = Mtcr2_Ctcr2_eq



                                        /********************************************************************************/

                                        /* Pin output buffer */

                                        #define EnableOutputBuffer()           (channel.TBSA = enable_output_buffer)
                                        #define DisableOutputBuffer()          (channel.TBSA = disable_output_buffer)


                                        /********************************************************************************/

                                        /* Pin control */


ETPU "C" COMPILER 1.0.7.85                                              PAGE 232


                                        /* Pin() definitions */
                                        #define SetHigh pin_high
                                        #define SetLow  pin_low
                                        #define PerPacA pin_opacA
                                        #define PerPacB pin_opacB

                                        /* Set Output Pin
                                           Usage: Pin( SetHigh | SetLow | PerPacA | PerPacB ); */
                                        #define Pin( state )          (channel.PIN=state)

                                        /* Immediate output pin */
                                        #define set_pin_per_opacA  pin_opacA
                                        #define set_pin_per_opacB  pin_opacB
                                        #define force_pin_high     pin_high
                                        #define force_pin_low      pin_low

                                        #define SetPinHigh()          (channel.PIN=force_pin_high)
                                        #define SetPinLow()           (channel.PIN=force_pin_low)
                                        #define SetPinPerPacA()       (channel.PIN=set_pin_per_opacA)
                                        #define SetPinPerPacB()       (channel.PIN=set_pin_per_opacB)

                                        /* Reading the pin states: branch conditions */

                                        #define SampledInputPin            channel.PSS
                                        #define IsLatchedInputPin()        (channel.PSS==1)
                                        #define IsInputPinHigh()           (channel.PSS==1)

                                        #define CurrentInputPin            channel.PSTI
                                        #define IsCurrentInputPin()        (channel.PSTI==1)

                                        #define CurrentOutputPin           channel.PSTO
                                        #define IsCurrentOutputPin()       (channel.PSTO==1)

                                        /* SYNONYMS */
                                        #define IsSampledInputPinHigh()    (channel.PSS==1)
                                        #define IsLatchedInputPinHigh()    (channel.PSS==1)
                                        #define IsCurrentInputPinHigh()    (channel.PSTI==1)
                                        #define IsCurrentOutputPinHigh()   (channel.PSTO==1)



                                        /********************************************************************************/

                                        /* Output Pin Action */

                                        #define NoChange    match_no_change
                                        #define PinHigh     match_high
                                        #define PinLow      match_low
                                        #define PinToggle   match_toggle

                                        /* Usage: OnMatchA( NoChange | PinHigh | PinLow | PinToggle ); */
                                        #define OnMatchA(action)      (opacA = action)
                                        #define OnMatchB(action)      (opacB = action)

                                        /* SYNONYMS */

ETPU "C" COMPILER 1.0.7.85                                              PAGE 233


                                        /* Action Unit A, Output Pin Actions */
                                        #define OnMatchAPinNoChange()      channel.OPACA = match_no_change
                                        #define OnMatchAPinHigh()          channel.OPACA = match_high
                                        #define OnMatchAPinLow()           channel.OPACA = match_low
                                        #define OnMatchAPinToggle()        channel.OPACA = match_toggle
                                        #define OnInputActionAPinLow()     channel.OPACA = transition_low
                                        #define OnInputActionAPinHigh()    channel.OPACA = transition_high
                                        #define OnInputActionAPinToggle()  channel.OPACA = transition_toggle

                                        /* Action Unit B, Output Pin Actions */
                                        #define OnMatchBPinNoChange()      channel.OPACB = match_no_change
                                        #define OnMatchBPinHigh()          channel.OPACB = match_high
                                        #define OnMatchBPinLow()           channel.OPACB = match_low
                                        #define OnMatchBPinToggle()        channel.OPACB = match_toggle
                                        #define OnInputActionBPinLow()     channel.OPACB = transition_low
                                        #define OnInputActionBPinHigh()    channel.OPACB = transition_high
                                        #define OnInputActionBPinToggle()  channel.OPACB = transition_toggle


                                        /********************************************************************************/

                                        /* Input Pin Action */

                                        #define NoDetect  no_detect
                                        #define LowHigh   low_high
                                        #define HighLow   high_low
                                        #define AnyTrans  any_trans

                                        /* Usage: DetectTransA( no_detect | low_high | high_low | any_trans | ...); */
                                        #define OnTransA(action)     (ipacA = action)
                                        #define OnTransB(action)     (ipacB = action)

                                        /* SYNONYMS */
                                        /* Action Unit A, Input Pin Edge Detection */
                                        #define DetectADisable()        channel.IPACA = no_detect
                                        #define DetectARisingEdge()     channel.IPACA = low_high
                                        #define DetectAFallingEdge()    channel.IPACA = high_low
                                        #define DetectAAnyEdge()        channel.IPACA = any_trans
                                        #define DetectALowOnMatchA()    channel.IPACA = detect_input_0_on_match
                                        #define DetectAHighOnMatchA()   channel.IPACA = detect_input_1_on_match

                                        /* Action Unit B, Input Pin Edge Detection */
                                        #define DetectBDisable()        channel.IPACB = no_detect
                                        #define DetectBRisingEdge()     channel.IPACB = low_high
                                        #define DetectBFallingEdge()    channel.IPACB = high_low
                                        #define DetectBAnyEdge()        channel.IPACB = any_trans
                                        #define DetectBLowOnMatchA()    channel.IPACB = detect_input_0_on_match
                                        #define DetectBHighOnMatchA()   channel.IPACB = detect_input_1_on_match


                                        /********************************************************************************/

                                        /* Intrinsics synonyms */

                                        /* Matches in Threads */

ETPU "C" COMPILER 1.0.7.85                                              PAGE 234


                                        #define DisableMatchesInThread()    match_disable()
                                        #define EnableMatchesInThread()     match_enable()



                                        #endif /* __ETPUC_COMMON_H */
                                        #include <etpuc.h>
                                        #ifndef __ETPUC_H
                                        #define __ETPUC_H

                                        /*
                                         *  eTPU C Code Development System
                                         *
                                         *  Processor register definitions
                                         *  for the eTPU C Code Development System.
                                         *
                                         *  This code may be adapted for any purpose
                                         *  when used with the eTPU C Code Development
                                         *  System.  No warranty is implied or given
                                         *  as to their usability for any purpose.
                                         *
                                         *  (c) Copyright 2002-2004 Byte Craft Limited
                                         *  421 King St.N., Waterloo, ON, Canada, N2J 4E4
                                         *  VOICE: 1 (519) 888 6911
                                         *  FAX  : 1 (519) 746 6751
                                         *  email: support@bytecraft.com
                                         *
                                         *  Byte Craft Limited
                                         *  Waterloo, Ontario
                                         *  Canada N2J 4E4
                                         *  (519) 888-6911
                                         *
                                         *  Walter Banks
                                         *
                                         * Revision history
                                         * ----------------
                                         * V0.90  WB    Nov 2003  First pre-release of etpuc.h based on V1.10 etpu.h with
                                         *                        changes to reflect eTPU naming conventions
                                         * V1.00  WB    Nov 2003  First release changes to the channel fields to reflect
                                         *                        naming conventions for eTPU
                                         * V1.01  WB    Dec 2003  Corrected definitions of pin_opacA and pin_opacB
                                         *
                                         *
                                         *
                                         *  All of the eTPU registers can be directly accessed from C
                                         *

                                             register_ac        ac   ;      // 24 bits
                                             register_b         b    ;      // 24 bits
                                             register_c         c    ;      // 24 bits
                                             register_d         d    ;      // 24 bits
                                             register_chan      chan ;      //  5 bits
                                             register_diob      diob ;      // 24 bits
                                             register_erta      erta ;      // 24 bits
                                             register_ertb      ertb ;      // 24 bits

ETPU "C" COMPILER 1.0.7.85                                              PAGE 235


                                             register_link      link ;      //  8 bits
                                             register_mach      mach ;      // 24 bits
                                             register_macl      macl ;      // 24 bits
                                             register_p         p    ;      // 24 bits
                                             register_rar       rar  ;      // 14 bits
                                             register_sr        sr   ;      // 24 bits
                                             register_tcr1      tcr1 ;      // 24 bits
                                             register_tcr2      tcr2 ;      // 24 bits
                                             register_tpr       tpr  ;      // 16 bits
                                             register_trr       trr  ;      // 24 bits
                                             register_chan_base chan_base;  // 24 bits
                                        */

                                        /* The following registers are defined for
                                           eTPU C application code */

                                             register_chan       chan ;       //  5 bits
                                             register_erta       erta ;       // 24 bits
                                             register_ertb       ertb ;       // 24 bits
                                             register_tcr1       tcr1 ;       // 24 bits
                                             register_tcr2       tcr2 ;       // 24 bits
                                             register_tpr        tpr  ;       // 16 bits
                                             register_trr        trr  ;       // 24 bits
                                             register_chan_base  chan_base;   // 24 bits
                                             register_link       link;        // 8 bits

                                        /*
                                           The link request can be set by copying the
                                           channel number into the link register. The
                                           following definition does this.
                                         */

                                        #define link_request(channel) link = channel

                                        /*
                                         *
                                         *
                                         *  All of the eTPU channel fields are predefined as a
                                         *  large C structure (chan_struct) by the eTPU C compiler.
                                         *
                                         *  struct chan {
                                         *               CIRC   int : 2 ;
                                         *               ERWA   int : 1 ;
                                         *               ERWB   int : 1 ;
                                         *               FLC    int : 3 ;
                                         *               IPACA  int : 3 ;
                                         *               IPACB  int : 3 ;
                                         *               LSR    int : 1 ;  // w test
                                         *               MRLA   int : 1 ;  // w test
                                         *               MRLB   int : 1 ;  // w test
                                         *               MRLE   int : 1 ;
                                         *               MTD    int : 2 ;
                                         *               OPACA  int : 3 ;
                                         *               OPACB  int : 3 ;
                                         *               PDCM   int : 4 ;

ETPU "C" COMPILER 1.0.7.85                                              PAGE 236


                                         *               PIN    int : 3 ;
                                         *               TBSA   int : 4 ;
                                         *               TBSB   int : 4 ;
                                         *               TDL    int : 1 ;
                                         *               SMPR   int : 2 ;
                                         * State Resolution
                                         *               FLAG0  int : 1 ;  // w only also defined in FLC
                                         *               FLAG1  int : 1 ;
                                         * Channel Flags
                                         *               FM0    int : 1 ;
                                         *               FM1    int : 1 ;
                                         *         //    LSR    int : 1 ;  // also channel fields
                                         *         //    MRLA   int : 1 ;  // also channel fields
                                         *         //    MRLB   int : 1 ;  // also channel fields
                                         *               PSS    int : 1 ;
                                         *               PSTI   int : 1 ;
                                         *               PSTO   int : 1 ;
                                         *               TDLA   int : 1 ;
                                         *               TDLB   int : 1 ;
                                         *              }
                                         ***/

                                        chan_struct channel;
                                        register_cc        CC;

                                        #define erwA       channel.ERWA
                                        #define erwB       channel.ERWB

                                        #define flc        channel.FLC
                                        #define ipacA      channel.IPACA
                                        #define ipacB      channel.IPACB
                                        #define lsr        channel.LSR

                                        #define mrlA       channel.MRLA
                                        #define mrlB       channel.MRLB
                                        #define mrle       channel.MRLE
                                        #define mtd        channel.MTD
                                        #define opacA      channel.OPACA
                                        #define opacB      channel.OPACB
                                        #define pdcm       channel.PDCM
                                        #define pin        channel.PIN
                                        #define act_unitA  channel.TBSA
                                        #define act_unitB  channel.TBSB
                                        #define tdl        channel.TDL
                                        #define flag0      channel.FLAG0
                                        #define flag1      channel.FLAG1
                                        #define fm0        channel.FM0
                                        #define fm1        channel.FM1
                                        #define pss        channel.PSS
                                        #define psti       channel.PSTI
                                        #define psto       channel.PSTO
                                        #define tdlA       channel.TDLA
                                        #define tdlB       channel.TDLB



ETPU "C" COMPILER 1.0.7.85                                              PAGE 237


                                        // IPAC 1,2
                                        #define no_detect                 0
                                        #define low_high                  1
                                        #define high_low                  2
                                        #define any_trans                 3
                                        #define detect_input_0_on_match   4
                                        #define detect_input_1_on_match   5
                                        #define no_change_ipac            7

                                        // OPAC 1,2  fields

                                        #define match_no_change   0
                                        #define match_high        1
                                        #define match_low         2
                                        #define match_toggle      3
                                        #define opac_high         1
                                        #define opac_low          2
                                        #define toggle            3
                                        #define opac_high_low     4
                                        #define opac_low_high     5
                                        #define transition_low    4
                                        #define transition_high   5
                                        #define transition_toggle 6

                                        // PDCM fields
                                        #define em_b_st  0              //Either Match, Blocking, Single Transition
                                        #define em_b_dt  1              //Either Match, Blocking, Double Transition
                                        #define em_nb_st 2              //Either Match, NonBlocking, Single Transition
                                        #define em_nb_dt 3              //Either Match, NonBlocking, Double Transition
                                        #define m2_st    4              //Match2, Single, Transition
                                        #define m2_dt    5              //Match2, Double, Transition
                                        #define bm_st    6              //Both Match, Single Transition
                                        #define bm_dt    7              //Both Match, Double Transition
                                        #define m2_o_st  8              //Match2, Ordered, Single Transition
                                        #define m2_o_dt  9              //Match2, Ordered, Double Transition
                                        #define sm_st_e  0xE                //Single Match, Single Transition, Enhanced
                                        #define sm_st    0xC                //Single Match, Single Transition
                                        #define sm_dt    0xD                //Single Match, Double Transition

                                        // Time Bases Selection for match and capture
                                        #define Mtcr1_Ctcr1_ge       0      //Match tcr1, Capture tcr1, greater than
                                        #define Mtcr2_Ctcr1_ge       1      //Match tcr2, Capture tcr1, greater than
                                        #define Mtcr1_Ctcr2_ge       2      //Match tcr1, Capture tcr2, greater than
                                        #define Mtcr2_Ctcr2_ge       3      //Match tcr2, Capture tcr2, greater than
                                        #define Mtcr1_Ctcr1_eq       4      //Match tcr1, Capture tcr1, equal
                                        #define Mtcr2_Ctcr1_eq       5      //Match tcr2, Capture tcr1, equal
                                        #define Mtcr1_Ctcr2_eq       6      //Match tcr1, Capture tcr2, equal
                                        #define Mtcr2_Ctcr2_eq       7      //Match tcr2, Capture tcr2, equal

                                        #define enable_output_buffer  8     // TBSx[3] = 1, TBSx[2:0] = 000
                                        #define disable_output_buffer 9     // TBSx[3] = 1, TBSx[2:0] = 001
                                        #define do_nothing       15     // TBSx[3] = 1, TBSx[2:0] = 111

                                        // Time Bases Selection for transition and capture
                                        #define Capture_tcr1        0       //TBSx[2] = 0

ETPU "C" COMPILER 1.0.7.85                                              PAGE 238


                                        #define Capture_tcr2        2       //TBSx[2] = 1

                                        // Tooth Program Register structure

                                        struct tpr_struct {
                                          int TICKS   : 10;
                                          int TPR10   : 1;
                                          int HOLD    : 1;
                                          int IPH     : 1;
                                          int MISSCNT : 2;
                                          int LAST    : 1;
                                          } ;

                                        // pin definitions
                                        //   pin = pin_high;
                                        #define pin_opacA  0
                                        #define pin_opacB  1
                                        #define pin_high   2
                                        #define pin_low    4

                                        #endif /* __ETPUC_H */


                                        #ifdef FUEL_ENABLE_FUNCTION_NUMBER
0007                                    #pragma ETPU_function FuelEnable, alternate @ FUEL_ENABLE_FUNCTION_NUMBER;
                                        #else
                                        #pragma ETPU_function FuelEnable, alternate;
                                        #endif

00000007                                #define FUEL_ENABLE_INIT 7

                                        void FuelEnable(void)
                                        {
0000                                        static unsigned int8 flagPin;

                                            if (hsr == RAIL_INIT)
                                            {
                                                DisableMatchesInThread();
                                                OnTransA(NoDetect);
                                                OnTransB(NoDetect);
                                                ClearLSRLatch();
                                                ClearTransLatch();
                                                ClearMatchAEvent();
                                                ClearMatchBEvent();

2294 580FF6BF   chan ipaca = no_detect,         
                    ipacb = no_detect,         
                    clr_lsr,clr_mrla,         
                    clr_mrlb,clr_tdl.         
2298 CFFFFD00   ram PRAM0 = #0(8) .             flagPin = 0;

                                                SetChannelMode(sm_st);
                                                EnableOutputBuffer();
                                                SetPinLow();
229C 4FF8FDF8   chan pin = low,         

ETPU "C" COMPILER 1.0.7.85                                              PAGE 239


                    tbsa = obe_on,sm_st.         
                                        
22A0                                            EnableEventHandling();
22A0 F73FFCFB   chan mtd = enable_mtsr;        }
                    end.                
01CA 08 A5        07 A05 P01 MD 2294  HSR 6/7   lsr x  m1 x  m2 x  pin x  flag1 x  flag0 x                             
                                         
0000             Thread Local RAM size                                   
                                            else if (lsr == 1)
                                            {
                                                ClearLSRLatch();

22A4 4FFFF7FF   chan clr_lsr.           
22A8 CFEFF880   ram p31_0 = PRAM0.              if (flagPin == 0)
22AC 3BF20FF4   alu a = p31_24 ,ccs.            {
22B0 F0C1161F   if z==0 jump 22C0,flush.         
                                        
22B4 3DFFAFF4   alu p31_24 = 1 .                    flagPin = 1;
                                                    SetPinHigh();
                                                }
22B8 F7E1165F   jump 22C8,noflush.                        else
22BC CF77F980   ram PRAM0 = p31_24;         
                    chan pin = high.         
                                                {
22C0 CFFFFD00   ram PRAM0 = #0(8) .                 flagPin = 0;
                                                    SetPinLow();
22C4 7FFFFDFE   chan pin = low.         
22C8                                            }
22C8 6FFFFFFF   end.                        }
01CC 48 A9        07 A06 P01 ME 22A4  HSR 0     lsr 1  m1 0  m2 0  pin 0  flag1 x  flag0 x                             
01CE 48 A9        07 A07 P01 ME 22A4  HSR 0     lsr 1  m1 0  m2 0  pin 1  flag1 x  flag0 x                             
01D0 48 A9        07 A08 P01 ME 22A4  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 0  flag0 0                             
01D2 48 A9        07 A09 P01 ME 22A4  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 0  flag0 1                             
01D4 48 A9        07 A0A P01 ME 22A4  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 1  flag0 0                             
01D6 48 A9        07 A0B P01 ME 22A4  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 1  flag0 1                             
01D8 48 A9        07 A0C P01 ME 22A4  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 0  flag0 0                             
01DA 48 A9        07 A0D P01 ME 22A4  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 0  flag0 1                             
01DC 48 A9        07 A0E P01 ME 22A4  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 1  flag0 0                             
01DE 48 A9        07 A0F P01 ME 22A4  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 1  flag0 1                             
01E0 48 A9        07 A10 P01 ME 22A4  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 0  flag0 0                             
01E2 48 A9        07 A11 P01 ME 22A4  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 0  flag0 1                             
01E4 48 A9        07 A12 P01 ME 22A4  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 1  flag0 0                             
01E6 48 A9        07 A13 P01 ME 22A4  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 1  flag0 1                             
01E8 48 A9        07 A14 P01 ME 22A4  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 0  flag0 0                             
01EA 48 A9        07 A15 P01 ME 22A4  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 0  flag0 1                             
01EC 48 A9        07 A16 P01 ME 22A4  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 1  flag0 0                             
01EE 48 A9        07 A17 P01 ME 22A4  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 1  flag0 1                             
01F0 48 A9        07 A18 P01 ME 22A4  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 0  flag0 0                             
01F2 48 A9        07 A19 P01 ME 22A4  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 0  flag0 1                             
01F4 48 A9        07 A1A P01 ME 22A4  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 1  flag0 0                             
01F6 48 A9        07 A1B P01 ME 22A4  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 1  flag0 1                             
01F8 48 A9        07 A1C P01 ME 22A4  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 0  flag0 0                             
01FA 48 A9        07 A1D P01 ME 22A4  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 0  flag0 1                             
01FC 48 A9        07 A1E P01 ME 22A4  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 1  flag0 0                             
01FE 48 A9        07 A1F P01 ME 22A4  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 1  flag0 1                             

ETPU "C" COMPILER 1.0.7.85                                              PAGE 240


                                         
0000             Thread Local RAM size                                   
                                            else
                                            {
                                        #ifdef GLOBAL_ERROR_FUNC
22CC FFC116BF   call 22D4,flush.                        Global_Error_Func();
                                        #else
                                                ClearAllLatches();
                                        #endif
22D0 6FFFFFFF   end.                        }
01C0 C8 B3        07 A00 P23 ME 22CC  HSR 2/3   lsr x  m1 x  m2 x  pin 0  flag1 x  flag0 0                             
01C2 C8 B3        07 A01 P23 ME 22CC  HSR 2/3   lsr x  m1 x  m2 x  pin 0  flag1 x  flag0 1                             
01C4 C8 B3        07 A02 P23 ME 22CC  HSR 2/3   lsr x  m1 x  m2 x  pin 1  flag1 x  flag0 0                             
01C6 C8 B3        07 A03 P23 ME 22CC  HSR 2/3   lsr x  m1 x  m2 x  pin 1  flag1 x  flag0 1                             
01C8 C8 B3        07 A04 P23 ME 22CC  HSR 1/4/5 lsr x  m1 x  m2 x  pin x  flag1 x  flag0 x                             
                                         
0000             Thread Local RAM size                                   
0000             Local RAM requirements for eTPU Function FuelEnable                                   
                                        }

                                        /* Information exported to Host CPU program */
22D4                                    #pragma write h, (::ETPUfilename (etpu_fuelenable_auto.h));
22D4                                    #pragma write h, (/*******************************************************************************);
22D4                                    #pragma write h, ( * 版权 2015-2016 中国航空工业集团第六三一所第十八研究室                        );
22D4                                    #pragma write h, ( *                                                                              );
22D4                                    #pragma write h, ( * 对本文件的拷贝、发布、修改或者其他任何用途必须得到中国航空工业集团第六三一所 );
22D4                                    #pragma write h, ( * 的书面协议许可。                                                             );
22D4                                    #pragma write h, ( *                                                                              );
22D4                                    #pragma write h, ( * Copyrights (2015-2016) ACTRI                                                 );
22D4                                    #pragma write h, ( * All Right Reserved                                                           );
22D4                                    #pragma write h, ( *******************************************************************************);
22D4                                    #pragma write h, (                                                                                );
22D4                                    #pragma write h, ( *******************************************************************************);
22D4                                    #pragma write h, ( * Revision History                                                             );
22D4                                    #pragma write h, ( *------------------------------------------------------------------------------);
22D4                                    #pragma write h, ( * 2017-12-07, gbo, created                                                     );
22D4                                    #pragma write h, ( *******************************************************************************);
22D4                                    #pragma write h, ( );
22D4                                    #pragma write h, ( *******************************************************************************);
22D4                                    #pragma write h, ( * content                                                                      );
22D4                                    #pragma write h, ( *------------------------------------------------------------------------------);
22D4                                    #pragma write h, ( *  File            : etpu_fuelenable_auto.h                                    );
22D4                                    #pragma write h, ( *  Description     : 喷油特殊信号头文件                                      );
22D4                                    #pragma write h, ( *  Call            : 029-89186510                                              );
22D4                                    #pragma write h, ( *  该文件由ETPU自动生成，请勿修改！！！                                        );
22D4                                    #pragma write h, ( ******************************************************************************/);
22D4                                    #pragma write h, (#ifndef _ETPU_FUEL_ENABLE_AUTO_H_ );
22D4                                    #pragma write h, (#define _ETPU_FUEL_ENABLE_AUTO_H_ );
22D4                                    #pragma write h, ( );
22D4                                    #pragma write h, (/* Function Configuration Information */);
22D4                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_FUEL_ENABLE_FUNCTION_NUMBER) FUEL_ENABLE_FUNCTION_NUMBER );
22D4                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_FUEL_ENABLE_TABLE_SELECT) ::ETPUentrytype(FuelEnable) );
22D4                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_FUEL_ENABLE_NUM_PARMS) ::ETPUram(FuelEnable) );
22D4                                    #pragma write h, ( );
22D4                                    #pragma write h, (/* Host Service Request Definitions */);

ETPU "C" COMPILER 1.0.7.85                                              PAGE 241


22D4                                    #pragma write h, (/* 喷油使能初始化 */);
22D4                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_FUEL_ENABLE_INIT) FUEL_ENABLE_INIT );
22D4                                    #pragma write h, (#endif /* _ETPU_PWM_AUTO_H_ */);
22D4                                    #pragma write h, ( );

                                        void Global_Error_Func()
                                        {
0045                                        int24 error_temp;

22D4 F301171F   if lsr==0 jump 22E0,                    if (LinkServiceRequest == 1) error_temp=1;
                    flush.              
22D8 F7E1173F   jump 22E4,noflush.                    else
22DC 9DFF7B11   alu p = 1 ;             
                    ram 0045 = p23_0.         
22E0 9FFF7B11   alu p = 0 ;                     error_temp = 0;
                    ram 0045 = p23_0.         

22E4 F281179F   if mrl1==0 jump 22F0,                    if (MatchALatch == 1) error_temp++;
                    flush.              
22E8 9FEFFB11   ram p23_0 = 0045.         
22EC 9DF87A11   alu p = p + 1 ,ccs;         
                    ram 0045 = p23_0.         
22F0 9FEFFB11   ram p23_0 = 0045.           error_temp <<= 1;

22F4 F2E1183F   if mrl2==0 jump 2304,                    if (MatchBLatch == 1) error_temp++;
                    noflush.            
22F8 93F87A11   alu p = p <<1 ,ccs;         
                    ram 0045 = p23_0.         
22FC 9FEFFB11   ram p23_0 = 0045.         
2300 9DF87A11   alu p = p + 1 ,ccs;         
                    ram 0045 = p23_0.         
2304 9FEFFB11   ram p23_0 = 0045.           error_temp <<= 1;

2308 93F87A11   alu p = p <<1 ,ccs;         
                    ram 0045 = p23_0.         
230C F20118DF   if tdl1==0 jump 2318,                    if (TransitionALatch == 1) error_temp++;
                    flush.              
2310 9FEFFB11   ram p23_0 = 0045.         
2314 9DF87A11   alu p = p + 1 ,ccs;         
                    ram 0045 = p23_0.         
2318 9FEFFB11   ram p23_0 = 0045.           error_temp <<= 1;

231C F261197F   if tdl2==0 jump 232C,                    if (TransitionBLatch == 1) error_temp++;
                    noflush.            
2320 93F87A11   alu p = p <<1 ,ccs;         
                    ram 0045 = p23_0.         
2324 9FEFFB11   ram p23_0 = 0045.         
2328 9DF87A11   alu p = p + 1 ,ccs;         
                    ram 0045 = p23_0.         
232C 9FEFFB11   ram p23_0 = 0045.           error_temp <<= 8;
2330 18087BCA   alu p = p <<8,ccs.         

2334 9FFFFB11   ram 0045 = p23_0.         
2338 3B197FB4   alu p = chan + p ,ccs.        Global_Error = error_temp + chan;


ETPU "C" COMPILER 1.0.7.85                                              PAGE 242


233C 9FFFFB00   ram 0001 = p23_0.         
2340                                        ClearAllLatches();
2340 FFFFCCF9   return,noflush.         }
2344 4FEFF6BF   chan clr_lsr,clr_mrla,         
                    clr_mrlb,clr_tdl.         

                                        #ifndef REGISTER_PASSING
                                        void Link4(union Link_t Link ){

                                            link = Link.Chan[0];
                                            link = Link.Chan[1];
                                            link = Link.Chan[2];
                                            link = Link.Chan[3];
                                        }
                                        #else
                                        void Link4( ){

                                            link = p7_0;
2348 3BF01FD4   alu link = p7_0 ,ccs.         
234C                                        link = p15_8;
234C 3BF11FD4   alu link = p15_8 ,ccs.         
2350                                        link = p23_16;
2350 3BF71FD4   alu link = p23_16 ,ccs.         
2354                                        link = p31_24;
2354 FFFFCCF9   return,noflush.         }
2358 3BF21FD4   alu link = p31_24 ,ccs.         
                                        #endif

                                        /* output eTPU code image and information for CPU */
235C                                    #pragma write h, (::ETPUfilename (etpu_set.h));
235C                                    #pragma write h, (/*******************************************************************************);
235C                                    #pragma write h, ( * 版权 2015-2016 中国航空工业集团第六三一所第十八研究室                        );
235C                                    #pragma write h, ( *                                                                              );
235C                                    #pragma write h, ( * 对本文件的拷贝、发布、修改或者其他任何用途必须得到中国航空工业集团第六三一所 );
235C                                    #pragma write h, ( * 的书面协议许可。                                                             );
235C                                    #pragma write h, ( *                                                                              );
235C                                    #pragma write h, ( * Copyrights (2015-2016) ACTRI                                                 );
235C                                    #pragma write h, ( * All Right Reserved                                                           );
235C                                    #pragma write h, ( *******************************************************************************);
235C                                    #pragma write h, (                                                                                );
235C                                    #pragma write h, ( *******************************************************************************);
235C                                    #pragma write h, ( * Revision History                                                             );
235C                                    #pragma write h, ( *------------------------------------------------------------------------------);
235C                                    #pragma write h, ( * 2017-12-07, gbo, created                                                     );
235C                                    #pragma write h, ( *******************************************************************************);
235C                                    #pragma write h, ( );
235C                                    #pragma write h, ( *******************************************************************************);
235C                                    #pragma write h, ( * content                                                                      );
235C                                    #pragma write h, ( *------------------------------------------------------------------------------);
235C                                    #pragma write h, ( *  File            : etpuc_set.h                                               );
235C                                    #pragma write h, ( *  Description     : 函数集头文件                                              );
235C                                    #pragma write h, ( *  Call            : 029-89186510                                              );
235C                                    #pragma write h, ( *  该文件由ETPU自动生成，请勿修改！！！                                        );
235C                                    #pragma write h, ( ******************************************************************************/);
235C                                    #pragma write h, (#ifndef _ETPU_SET_H_ );

ETPU "C" COMPILER 1.0.7.85                                              PAGE 243


235C                                    #pragma write h, (#define _ETPU_SET_H_ );
235C                                    #pragma write h, ( );
235C                                    #pragma write h, (/* eTPU standard function set1 */ );
235C                                    #pragma write h, (#define FS_ETPU_ENTRY_TABLE 0x0000);
235C                                    #pragma write h, ( );
235C                                    #pragma write h, (#define FS_ETPU_MISC ::ETPUmisc);
235C                                    #pragma write h, ( );
235C                                    #pragma write h, (const uint32_t etpu_globals[] = { ::ETPUglobalimage }; );
235C                                    #pragma write h, ();
235C                                    #pragma write h, (const uint32_t etpu_code[] = { ::ETPUcode32 }; );
235C                                    #pragma write h, (/* List of functions: );
235C                                    #pragma write h, (::ETPUnames);
235C                                    #pragma write h, (*/);
235C                                    #pragma write h, ( );
235C                                    #pragma write h, (#endif /* _ETPU_SET_H_ */ );
235C                                    #pragma write h, ( );

ETPU "C" COMPILER 1.0.7.85                                              PAGE 244




SYMBOL TABLE

LABEL                             VALUE LABEL                             VALUE 

AnyTrans                         0003 | CAM_COUNTING                     0005 
CAM_FIRST_EDGE                   0000 | CAM_FUNCTION_NUMBER              0002 
CAM_INIT                         0007 | CAM_INVALID_M1                   0001 
CAM_INVALID_M2                   0002 | CAM_MARK_VERIFIED                0004 
CAM_NO_ERROR                     0000 | CAM_SECOND_EDGE                  0001 
CAM_TEST_POSSIBLE_MARK           0002 | CAM_TOOTH_AFTER_MARK             0007 
CAM_TOOTH_BEFORE_MARK            0006 | CAM_VERIFY_MARK                  0003 
CC                               0000 | CRANK_ANGLE_ADJUST               0001 
CRANK_ANGLE_PER_TOOTH            012C | CRANK_BLANK_TEETH                0002 
CRANK_BLANK_TIME                 0001 | CRANK_COUNTING                   0008 
CRANK_FIRST_EDGE                 0003 | CRANK_FUNCTION_NUMBER            0003 
CRANK_GAP_VERIFIED               0007 | CRANK_INIT                       0007 
CRANK_INTERNAL_ERROR             0010 | CRANK_INVALID_M1                 0001 
CRANK_INVALID_M2                 0002 | CRANK_IPH                        0003 
CRANK_NO_ERROR                   0000 | CRANK_SECOND_EDGE                0004 
CRANK_SEEK                       0000 | CRANK_STALL                      0008 
CRANK_TEST_POSSIBLE_GAP          0005 | CRANK_TIMEOUT                    0004 
CRANK_TOOTH_AFTER_GAP            000A | CRANK_TOOTH_BEFORE_GAP           0009 
CRANK_VERIFY_GAP                 0006 | CamDetect                        0680 
CamReinit                        063C | Capture_tcr1                     0000 
Capture_tcr2                     0002 | CrankDetect                      0DAC 
CrankLsrProcess                  0D50 | CrankStall                       0C24 
EM_CAM_STATES                    0001 | EM_CRANK_STATES                  0001 
ENG_POS_FIRST_HALF_SYNC          0001 | ENG_POS_FULL_SYNC                0004 
ENG_POS_HALF_SYNC                0003 | ENG_POS_PRE_FULL_SYNC            0002 
ENG_POS_SEEK                     0000 | FALSE                            0000 
FIN_DEFAULT_CNT                  0004 | FIN_FALLING_EDGE                 0001 
FIN_FUNCTION_NUMBER              0001 | FIN_INIT                         0007 
FIN_PERIOD_UPDATE                0005 | FIN_USE_TCR1                     0000 
FUEL_ENABLE_FUNCTION_NUMBER      0007 | FUEL_ENABLE_INIT                 0007 
FUEL_FLAG0_ACTIVE                0000 | FUEL_FLAG0_INACTIVE              0001 
FUEL_FLAG1_NORMAL                0001 | FUEL_FLAG1_RAIL                  0000 
FUEL_FUNCTION_NUMBER             0005 | FUEL_INIT                        0007 
FUEL_INJ_TIME_UPDATE             0003 | FreqIn                           056C 
FuelEnable                       2294 | FuelMain                         1B6C 
Global_Error                     0001 | Global_Error_Func                22D4 
HighLow                          0002 | Link4                            2348 
Link_t                           0004 | LowHigh                          0001 
Mtcr1_Ctcr1_eq                   0004 | Mtcr1_Ctcr1_ge                   0000 
Mtcr1_Ctcr2_eq                   0006 | Mtcr1_Ctcr2_ge                   0002 
Mtcr2_Ctcr1_eq                   0005 | Mtcr2_Ctcr1_ge                   0001 
Mtcr2_Ctcr2_eq                   0007 | Mtcr2_Ctcr2_ge                   0003 
NoChange                         0000 | NoDetect                         0000 
PWM                              0400 | PWM_ACTIVE_HIGH                  0001 
PWM_ACTIVE_LOW                   0000 | PWM_COHERENT_UPDATE              0005 
PWM_FUNCTION_NUMBER              0000 | PWM_IMMED_UPDATE                 0003 
PWM_INIT                         0007 | PWM_USE_TCR1                     0000 
PerPacA                          0000 | PerPacB                          0001 
PinHigh                          0001 | PinLow                           0002 
ETPU "C" COMPILER 1.0.7.85                                              PAGE 245




SYMBOL TABLE - Continued

LABEL                            VALUE  LABEL                            VALUE  


PinToggle                        0003 | RAIL_FUNCTION_NUMBER             0006 
RAIL_INIT                        0007 | RailPress                        227C 
SetHigh                          0002 | SetLow                           0004 
TOOTHGEN                         1780 | TOOTHGEN_ERROR_CAMNOISE          0010 
TOOTHGEN_ERROR_CRANKNOISE        0004 | TOOTHGEN_ERROR_MISSING_CAM       0008 
TOOTHGEN_ERROR_MISSING_HIGHTIME  0001 | TOOTHGEN_ERROR_MISSING_LOWTIME   0002 
TOOTHGEN_ERROR_TOOTH_IN_GAP      0020 | TOOTHGEN_FM0_CAM_CHAN            0001 
TOOTHGEN_FM0_CRANK_CHAN          0000 | TOOTHGEN_FUNCTION_NUMBER         0004 
TOOTHGEN_HSR_INIT                0007 | TOOTH_GEN_CRANK_SEC_EDGE         1960 
TOOTH_GEN_CrankFirstEdge         17D4 | TOOTH_GEN_CrankSecondEdge        1960 
TOOTH_GEN_Error                  1A64 | TOOTH_GEN_Init                   1780 
TOOTH_GEN_NoiseFirstEdge         17A0 | TOOTH_GEN_NoiseSecondEdge        17D0 
TRUE                             0001 | any_trans                        0003 
bm_dt                            0007 | bm_st                            0006 
chan                             0000 | chan_base                        0000 
channel                          0000 | detect_input_0_on_match          0004 
detect_input_1_on_match          0005 | disable_output_buffer            0009 
do_nothing                       000F | em_b_dt                          0001 
em_b_st                          0000 | em_nb_dt                         0003 
em_nb_st                         0002 | enable_output_buffer             0008 
erta                             0000 | ertb                             0000 
force_pin_high                   0002 | force_pin_low                    0004 
gCamCount                        0009 | gCamEdgeAngle                    0005 
gCamState                        0004 | gEngPosSyncState                 0000 
high_low                         0002 | judgeFuture                      1AC8 
link                             0000 | low_high                         0001 
m2_dt                            0005 | m2_o_dt                          0009 
m2_o_st                          0008 | m2_st                            0004 
match_high                       0001 | match_low                        0002 
match_no_change                  0000 | match_toggle                     0003 
no_change_ipac                   0007 | no_detect                        0000 
opac_high                        0001 | opac_high_low                    0004 
opac_low                         0002 | opac_low_high                    0005 
p15_8                            0000 | p23_16                           0000 
p31_24                           0000 | p7_0                             0000 
pin_high                         0002 | pin_low                          0004 
pin_opacA                        0000 | pin_opacB                        0001 
restrictAngle                    1A6C | set_pin_per_opacA                0000 
set_pin_per_opacB                0001 | sm_dt                            000D 
sm_st                            000C | sm_st_e                          000E 
tcr1                             0000 | tcr2                             0000 
toggle                           0003 | tpr                              0000 
tprReg                           00BD | tpr_struct                       0004 
transition_high                  0005 | transition_low                   0004 
transition_toggle                0006 | trr                              0000 


ETPU "C" COMPILER 1.0.7.85                                              PAGE 246




RAM USAGE MAP 

0001     Global_Error                     signed int24        
0000     gEngPosSyncState                 unsigned char       
0004     gCamState                        unsigned char       
0005     gCamEdgeAngle                    unsigned int24      
0009     gCamCount                        unsigned int24      
0000     CC                               cc_reg              
PRAM17   LastFrame                        signed int24        0400  056B
PRAM21   NextEdge                         signed int24        0400  056B
PRAM13   startTime                        unsigned int24      056C  063B
PRAM17   edgeTimes                        unsigned int24      056C  063B
PRAM0    updateFlag                       unsigned char       056C  063B
0001     EM_CAM_STATES                    enum                
PRAM33   lastToothTime                    unsigned int24      0680  0C23
PRAM37   toothTime                        unsigned int24      0680  0C23
PRAM41   camPeriodB                       unsigned int24      0680  0C23
PRAM45   halfWinWidth                     unsigned int24      0680  0C23
0001     EM_CRANK_STATES                  enum                
reg_tpr  tprReg                           struct(4)           
reg_d    toothPeriodBAvg                  unsigned int24      10EC  1283
reg_d    toothPeriodBAvg                  unsigned int24      1288  170B
PRAM65   toothTime                        unsigned int24      0DAC  177F
PRAM69   lastToothTime                    unsigned int24      0DAC  177F
PRAM4    blankTimeout                     unsigned char       0DAC  177F
PRAM8    camState                         unsigned char       0DAC  177F
PRAM73   toothPeriodB                     unsigned int24      0DAC  177F
PRAM77   halfWinWidth                     unsigned int24      0DAC  177F
PRAM12   timeoutFlag                      unsigned char       0DAC  177F
PRAM16   firstRun                         unsigned char       0DAC  177F
PRAM81   crankPhyTeeth                    unsigned int24      0DAC  177F
PRAM85   crankLastTooth1                  unsigned int24      0DAC  177F
PRAM89   crankLastTooth2                  unsigned int24      0DAC  177F
PRAM65   edgeTime                         unsigned int24      1780  1A6B
reg_d    temp                             unsigned int24      1780  1A6B
0035     temp                             unsigned int24      1A6C  1AC7
000E     temp                             unsigned char       1AC8  1B6B
reg_d    temp                             unsigned int24      1B6C  1CAB
reg_d    temp                             unsigned int24      1CB0  1E67
reg_d    temp                             unsigned int24      1E6C  1F53
reg_d    temp                             unsigned int24      1F58  1FDF
reg_d    temp                             unsigned int24      1FE4  20E3
reg_d    temp                             unsigned int24      20E8  2237
reg_d    temp                             unsigned int24      223C  2267
PRAM8    injTimes                         unsigned char       1B6C  227B
PRAM12   flagPulse                        unsigned char       1B6C  227B
PRAM16   flag1Mirror                      unsigned char       1B6C  227B
PRAM21   edgeAngle                        unsigned int24      1B6C  227B
PRAM25   edgeAngleBack                    unsigned int24      1B6C  227B
PRAM29   injChangeTime                    unsigned int24      1B6C  227B
PRAM0    flagPin                          unsigned char       2294  22D3
0045     error_temp                       signed int24        22D4  233F


RAM MEMORY DECLARATIONS

RAM                                   [4001] @ 0000  0000 :: 4000 Used 0000 to 0047 (   72) 0048


ETPU "C" COMPILER 1.0.7.85                                              PAGE 247




ROM USAGE MAP 

    0000 to 01FF    0400 to 235B
    Total ROM used 215C (8540)


eTPU FUNCTION SUMMARY 

  0                               PWM  0400  056C  (    91 words)  SRAM =   24  Local RAM =    0
  1                            FreqIn  056C  063C  (    52 words)  SRAM =   24  Local RAM =    0
  2                         CamDetect  0680  0C24  (   361 words)  SRAM =   48  Local RAM =    0
  3                       CrankDetect  0DAC  1780  (   629 words)  SRAM =   96  Local RAM =    0
  4                          TOOTHGEN  1780  1A6C  (   187 words)  SRAM =   72  Local RAM =    0
  5                          FuelMain  1B6C  227C  (   452 words)  SRAM =   72  Local RAM =    0
  6                         RailPress  227C  2294  (     6 words)  SRAM =    0  Local RAM =    0
  7                        FuelEnable  2294  22D4  (    16 words)  SRAM =    8  Local RAM =    0


Errors             :    0
Warnings           :    0

